module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 255);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var CostMatrixType;
(function (CostMatrixType) {
    CostMatrixType[CostMatrixType["HalfSpeed"] = 0] = "HalfSpeed";
    CostMatrixType[CostMatrixType["FullSpeed"] = 1] = "FullSpeed";
    CostMatrixType[CostMatrixType["Offroad"] = 2] = "Offroad";
    CostMatrixType[CostMatrixType["Military"] = 3] = "Military";
    CostMatrixType[CostMatrixType["TransportRoute"] = 4] = "TransportRoute";
})(CostMatrixType = exports.CostMatrixType || (exports.CostMatrixType = {}));


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var cache = {};
var posCache = {};
function __flush() {
    cache = {};
    posCache = {};
}
exports.__flush = __flush;
function findInRoom(room, type) {
    var key = room.name + "_" + type;
    var values = cache[key];
    if (_.isUndefined(values)) {
        values = room.find(type);
    }
    return values;
}
function __find(room, type, opts) {
    var values = findInRoom(room, type);
    if (_.isUndefined(opts)) {
        return values;
    }
    var existingOpts = opts;
    return _.filter(values, existingOpts.filter);
}
exports.__find = __find;
function __findInRange(pos, type, range, opts) {
    var room = Game.rooms[pos.roomName];
    if (_.isUndefined(room)) {
        throw Error("Could not access room " + pos.roomName);
    }
    var key = room.name + "_" + type + "_" + pos.pack() + "_" + range;
    var result = posCache[key];
    if (_.isUndefined(result)) {
        result = _.filter(findInRoom(room, type), function (i) { return pos.getRangeTo(i) <= range; });
    }
    return (_.isUndefined(opts) || _.isUndefined(opts.filter)) ? result : _.filter(result, opts.filter);
}
exports.__findInRange = __findInRange;


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Squad_1 = __webpack_require__(26);
var Config_1 = __webpack_require__(8);
var Traveler_1 = __webpack_require__(91);
var TickCache_1 = __webpack_require__(1);
var CostMatrixFactory_1 = __webpack_require__(45);
var CostMatrixType_1 = __webpack_require__(0);
var CreepsSet_1 = __webpack_require__(87);
var RoomProvider_1 = __webpack_require__(12);
var RoomUtils_1 = __webpack_require__(249);
var BehaviorBase = (function () {
    function BehaviorBase() {
    }
    BehaviorBase._calcWeightParts = function (creep, carry) {
        if (!carry) {
            carry = creep.carry;
        }
        var totalCarry = _.sum(carry);
        if (!totalCarry) {
            return 0;
        }
        var weight = 0;
        for (var i = creep.body.length - 1; i >= 0; i--) {
            var part = creep.body[i];
            if (part.type != CARRY || !part.hits) {
                continue;
            }
            var boost = 1;
            if (part.boost) {
                boost = BOOSTS[CARRY][part.boost].capacity || 1;
            }
            totalCarry -= Math.min(totalCarry, CARRY_CAPACITY * boost);
            weight++;
        }
        return weight;
    };
    BehaviorBase._speedType = function (creep, carry) {
        if (carry === void 0) { carry = null; }
        var moves = 0;
        var nonMoves = 0;
        for (var _i = 0, _a = creep.body; _i < _a.length; _i++) {
            var p = _a[_i];
            if (p.type == CARRY) {
                continue;
            }
            if (p.type != MOVE) {
                nonMoves++;
                continue;
            }
            if (!p.boost) {
                moves++;
                continue;
            }
            moves += BOOSTS[MOVE][p.boost].fatigue;
        }
        var weightParts = BehaviorBase._calcWeightParts(creep, carry);
        return moves >= (nonMoves + weightParts) ?
            CostMatrixType_1.CostMatrixType.FullSpeed :
            CostMatrixType_1.CostMatrixType.HalfSpeed;
    };
    BehaviorBase.FindPath = function (creep, position, opts) {
        var options = BehaviorBase.FormOptions(creep, opts);
        var pos = position instanceof RoomPosition ? position : position.pos;
        return Traveler_1.Traveler.findTravelPath(creep, pos, options);
    };
    BehaviorBase.GoToPosition = function (creep, position, opts) {
        var pos = position instanceof RoomPosition ? position : position.pos;
        if (_.isUndefined(Memory['TrafficManager'])) {
            Memory['TrafficManager'] = {};
        }
        if (_.isUndefined(Memory['TrafficManager']['LastMoves'])) {
            Memory['TrafficManager']['LastMoves'] = {};
        }
        var options = BehaviorBase.FormOptions(creep, opts);
        if (creep.memory['_lastMoveTick'] == Game.time) {
            return true;
        }
        creep.memory['_lastMoveTick'] = Game.time;
        if (opts.experimentalAvoid) {
            var room_1 = Game.rooms[creep.pos.roomName];
            var hostiles = room_1.find(FIND_HOSTILE_CREEPS, { filter: function (c) { return !_.includes(Config_1.alliedPlayers, c.owner.username); } });
            var flags = room_1.find(FIND_FLAGS, { filter: function (f) { return f.color == COLOR_RED && f.secondaryColor == COLOR_RED; } });
            if ((Math.random() < 0.25) && _.some(hostiles) || _.some(flags)) {
                var melees_1 = [], rangers_1 = [];
                _.forEach(hostiles, function (c) {
                    if (_.some(c.body, { type: ATTACK })) {
                        melees_1.push(c.pos);
                        return;
                    }
                    if (_.some(c.body, { type: RANGED_ATTACK })) {
                        rangers_1.push(c.pos);
                        return;
                    }
                });
                _.forEach(flags, function (f) {
                    if (f.color == COLOR_RED && f.secondaryColor == COLOR_RED) {
                        melees_1.push(f.pos);
                        return;
                    }
                    if (f.color == COLOR_BLUE) {
                        rangers_1.push(f.pos);
                        return;
                    }
                });
                var startCpu = Game.cpu.getUsed();
                var matrix = options.roomCallback(room_1.name, CostMatrixFactory_1.default.GetCostMatrix(room_1.name, opts.costMatrixType));
                var myDistances = RoomUtils_1.default.GetDistanceMatrix([creep.pos], matrix);
                var danger_1 = [];
                var hostileMatrix = CostMatrixFactory_1.default.GetCostMatrix(room_1.name, CostMatrixType_1.CostMatrixType.FullSpeed);
                var meleeDangerDistances = RoomUtils_1.default.GetDistanceMatrix(melees_1, hostileMatrix);
                for (var x = 0; x < 49; x++) {
                    for (var y = 0; y < 49; y++) {
                        var my = myDistances.getDistance(x, y);
                        var theirs = meleeDangerDistances.getDistance(x, y);
                        if (my >= theirs) {
                            danger_1[50 * x + y] = 1 + my - theirs;
                        }
                    }
                }
                delete creep.memory['_trav'];
                var oldCallback_1 = options.roomCallback;
                options.roomCallback = function (roomName, matrix) {
                    var oldMatrix = oldCallback_1(roomName, matrix);
                    if (room_1.name == roomName || _.isBoolean(oldMatrix)) {
                        return oldMatrix;
                    }
                    var m = oldMatrix.clone();
                    for (var x = 0; x < 49; x++) {
                        for (var y = 0; y < 49; y++) {
                            if (!_.isUndefined(danger_1[50 * x + y])) {
                                m.set(x, y, m.get(x, y) + 55 + danger_1[50 * x + y]);
                            }
                        }
                    }
                    return m;
                };
                var consumed = Game.cpu.getUsed() - startCpu;
                console.log("CPU consumed for evading in " + room_1.name + ": " + consumed);
            }
        }
        var result = Traveler_1.Traveler.travelTo(creep, pos, options);
        if (result != OK && result != ERR_BUSY) {
            console.log("travelTo failed for " + creep + "@" + creep.pos + ": " + result);
        }
        var data = options.returnData;
        if ((data.nextPos != null) && (creep instanceof Creep) || (creep instanceof PowerCreep)) {
            var c = creep;
            var ahead = data.nextPos.look();
            var creepAhead = _(ahead).filter(function (l) { return (l.creep && l.creep.my) || (l.powerCreep && l.powerCreep.my); }).map(function (l) { return l.creep || l.powerCreep; }).first();
            if (creepAhead != null) {
                if ((creepAhead.memory['follower'] && (creepAhead.memory['follower'] != c.name)) ||
                    (creepAhead.memory['following'] && creepAhead.memory['following'] != c.name)) {
                    var squad = BehaviorBase.GetSquad(c);
                    if (!_.includes(squad, creepAhead)) {
                        c.cancelOrder('move');
                        delete creep.memory['_lastMoveTick'];
                        return true;
                    }
                }
                var lastMove = Memory['TrafficManager']['LastMoves'][creepAhead.name] || creepAhead.memory['_lastMoveTick'];
                if (_.isUndefined(lastMove) || ((lastMove > 0) && ((lastMove + 1) < Game.time))) {
                    c.say(BehaviorBase.directionIcons[creepAhead.pos.getDirectionTo(creep)], true);
                    creepAhead.say('👌', true);
                    creepAhead.move(creepAhead.pos.getDirectionTo(creep));
                    delete creepAhead.memory['_trav'];
                    creepAhead.memory['_lastMoveTick'] = Game.time;
                    return true;
                }
                return true;
            }
            if (data.state && (data.state.stuckCount > 2) && !data.nextPos.isWalkable()) {
                c.say("stuck: " + data.state.stuckCount);
                RoomProvider_1.default.UpdateRoom(c.room);
                delete creep.memory['_trav'];
            }
        }
        return true;
    };
    BehaviorBase.MoveByPath = function (movable, path) {
        if (!_.isArray(path)) {
            return ERR_INVALID_ARGS;
        }
        if (_.isArray(path) && path.length > 0 && (path[0] instanceof RoomPosition)) {
            var idx = _.findIndex(path, function (i) { return i.isEqualTo(movable.pos); });
            if (idx === -1) {
                if (!path[0].isNearTo(movable.pos)) {
                    return ERR_NOT_FOUND;
                }
            }
            idx++;
            if (idx >= path.length) {
                return ERR_NOT_FOUND;
            }
            return movable.move(movable.pos.getDirectionTo(path[idx]));
        }
        return ERR_NOT_FOUND;
    };
    BehaviorBase.Flee = function (movable, hostile, rng, costMatrixType) {
        if (costMatrixType === void 0) { costMatrixType = CostMatrixType_1.CostMatrixType.HalfSpeed; }
        var normalizedPos = hostile instanceof RoomPosition ? hostile : hostile.pos;
        function fleeMatrix(r) {
            var m = CostMatrixFactory_1.default.GetCostMatrix(r, costMatrixType);
            if (_.isBoolean(m)) {
                return m;
            }
            var room = Game.rooms[r];
            if (!_.isUndefined(room)) {
                var creeps = room.find(FIND_CREEPS);
                _.forEach(creeps, function (c) {
                    if ((movable instanceof Creep) && (movable.id != c.id)) {
                        m.set(c.pos.x, c.pos.y, Infinity);
                    }
                    if ((movable instanceof CreepsSet_1.default) && !_.includes(movable.creeps, c)) {
                        m.set(c.pos.x, c.pos.y, Infinity);
                    }
                });
            }
            return m;
        }
        var fleePath = PathFinder.search(movable.pos, { pos: normalizedPos, range: rng }, {
            flee: true,
            plainCost: 2,
            swampCost: 10,
            maxOps: 500,
            maxRooms: 1,
            roomCallback: function (r) { return fleeMatrix(r); }
        });
        BehaviorBase.MoveByPath(movable, fleePath.path);
        movable.memory['_lastMoveTick'] = Game.time;
    };
    BehaviorBase.GetFollowers = function (creep) {
        if (!_.isUndefined(creep.memory.follower) &&
            !_.isUndefined(Game.creeps[creep.memory.follower])) {
            return [creep].concat(BehaviorBase.GetFollowers(Game.creeps[creep.memory.follower]));
        }
        else
            return [creep];
    };
    BehaviorBase.GetSquadLeader = function (creep) {
        if (_.isUndefined(creep.memory['following'])) {
            return creep;
        }
        var following = Game.creeps[creep.memory['following']];
        if (following == null) {
            return creep;
        }
        return BehaviorBase.GetSquadLeader(following);
    };
    BehaviorBase.GetSquad = function (creep) {
        return BehaviorBase.GetFollowers(BehaviorBase.GetSquadLeader(creep));
    };
    BehaviorBase.SetTravelTime = function (creep, creepContext) {
        if (creep == null) {
            return;
        }
        if (!creepContext['travelTime']) {
            creepContext['travelTime'] = Game.time - creepContext['spawnedAt'];
        }
    };
    BehaviorBase.FindRecyclePosition = function (room) {
        var container = _.first(TickCache_1.__find(room, FIND_STRUCTURES, {
            filter: function (s) { return (s.structureType == STRUCTURE_CONTAINER) && (TickCache_1.__findInRange(s.pos, FIND_MY_SPAWNS, 1).length > 0); }
        }));
        return container == null ? null : container.pos;
    };
    BehaviorBase.Recycle = function (creep, creepContext) {
        if (_.isUndefined(creepContext['recyclePos'])) {
            creep.suicide();
            return;
        }
        var pos = RoomPosition.sunpack(creepContext['recyclePos']);
        if (creep.pos.isEqualTo(pos)) {
            var spawn = _.first(TickCache_1.__findInRange(pos, FIND_MY_STRUCTURES, 1, { filter: function (s) { return s.structureType == STRUCTURE_SPAWN; } }));
            if (spawn == null) {
                creep.suicide();
                return;
            }
            spawn.recycleCreep(creep);
            return;
        }
        BehaviorBase.GoToPosition(creep, pos, { costMatrixType: CostMatrixType_1.CostMatrixType.FullSpeed });
    };
    BehaviorBase.Idle = function (creep) {
        creep.say('🚬', true);
    };
    BehaviorBase.FormOptions = function (creep, opts) {
        _.defaults(opts, {
            range: 0,
            useFindRoute: false,
            allowSK: true,
            maxOps: 50000,
            stuckValue: 3
        });
        opts.returnData = {};
        function GetCostMatrixBase(roomName, type) {
            var origin = creep instanceof RoomPosition ? creep : creep.pos;
            if (Game.map.getRoomStatus(origin.roomName).status != Game.map.getRoomStatus(roomName).status) {
                return false;
            }
            var baseMatrix = CostMatrixFactory_1.default.GetCostMatrix(roomName, type);
            if (_.isBoolean(baseMatrix)) {
                return baseMatrix;
            }
            if (_.isUndefined(Game.rooms[roomName])) {
                return baseMatrix;
            }
            var matrix = baseMatrix;
            var creeps = Game.rooms[roomName].find(FIND_MY_CREEPS).concat(Game.rooms[roomName].find(FIND_MY_POWER_CREEPS));
            for (var _i = 0, creeps_1 = creeps; _i < creeps_1.length; _i++) {
                var c = creeps_1[_i];
                if ((c instanceof Creep) && (c.getActiveBodyparts(MOVE) <= 1) && (c.body.length > 1)) {
                    matrix.set(c.pos.x, c.pos.y, Infinity);
                    continue;
                }
                var lastMove = Memory['TrafficManager']['LastMoves'][c.name] || c.memory['_lastMoveTick'];
                if (_.isUndefined(lastMove) || ((lastMove > 0) && ((lastMove + 1) < Game.time))) {
                    var newCost = 1 + matrix.get(c.pos.x, c.pos.y);
                    matrix.set(c.pos.x, c.pos.y, newCost);
                }
            }
            for (var o in opts.addCosts) {
                var p = RoomPosition.unpack(parseInt(o));
                if (p.roomName == roomName) {
                    matrix.set(p.x, p.y, opts.addCosts[o]);
                }
            }
            if (opts.maxRooms <= 1) {
                for (var i = 0; i < 50; i++) {
                    matrix.set(0, i, Infinity);
                    matrix.set(49, i, Infinity);
                    matrix.set(i, 0, Infinity);
                    matrix.set(i, 49, Infinity);
                }
            }
            return matrix;
        }
        var GetCostMatrix = GetCostMatrixBase;
        if (creep instanceof Squad_1.Squad) {
            GetCostMatrix = function (roomName, type) {
                var baseMatrix = CostMatrixFactory_1.default.GetCostMatrix(roomName, type);
                if (_.isBoolean(baseMatrix)) {
                    return baseMatrix;
                }
                var matrix = baseMatrix;
                return creep.Formation.TransformCostMatrix(matrix);
            };
        }
        if (creep instanceof CreepsSet_1.default) {
            GetCostMatrix = function (roomName, type) {
                var baseMatrix = CostMatrixFactory_1.default.GetCostMatrix(roomName, type);
                if (_.isBoolean(baseMatrix)) {
                    return baseMatrix;
                }
                var matrix = baseMatrix;
                return creep.Formation.TransformCostMatrix(matrix);
            };
        }
        opts.roomCallback = function (r) { return GetCostMatrix(r, opts.costMatrixType); };
        return opts;
    };
    BehaviorBase.directionIcons = [undefined, '⬆', '↗', '➡', '↘', '⬇', '↙', '⬅', '↖'];
    return BehaviorBase;
}());
exports.default = BehaviorBase;


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var TickCache_1 = __webpack_require__(1);
var Setup_1 = __webpack_require__(18);
var CreepSetup_1 = __webpack_require__(72);
var TaskManager_1 = __webpack_require__(7);
var CreepSpawnStatus;
(function (CreepSpawnStatus) {
    CreepSpawnStatus[CreepSpawnStatus["Alive"] = 0] = "Alive";
    CreepSpawnStatus[CreepSpawnStatus["Expired"] = 1] = "Expired";
    CreepSpawnStatus[CreepSpawnStatus["Spawning"] = 2] = "Spawning";
    CreepSpawnStatus[CreepSpawnStatus["InQueue"] = 3] = "InQueue";
    CreepSpawnStatus[CreepSpawnStatus["Unknown"] = 4] = "Unknown";
})(CreepSpawnStatus = exports.CreepSpawnStatus || (exports.CreepSpawnStatus = {}));
function getSpawningInRoom(room) {
    var result = [];
    var spawns = TickCache_1.__find(room, FIND_MY_SPAWNS);
    _.forEach(spawns, function (spawn) {
        if (spawn.spawning != null) {
            result.push({
                name: spawn.spawning.name,
                assign: getAssignmentByName(spawn.spawning.name),
                role: getRoleByName(spawn.spawning.name),
                spawnRoomName: spawn.room.name
            });
        }
    });
    return result;
}
function getAssignmentByName(creepName) {
    if (Game.creeps[creepName] && !_.isUndefined(Game.creeps[creepName].memory['assignedTo'])) {
        return Game.creeps[creepName].memory['assignedTo'];
    }
    var parts = creepName.split('_');
    var assign = _.tail(_.initial(parts)).join('_');
    return assign;
}
exports.getAssignmentByName = getAssignmentByName;
function assignmentPosition(assignString) {
    if (_.isNumber(assignString)) {
        return { pos: RoomPosition.unpack(assignString), range: 0 };
    }
    if (Game.flags[assignString]) {
        return { pos: Game.flags[assignString].pos, range: 0 };
    }
    if (Game.rooms[assignString] || /^([WE])\d+([NS])\d+$/.exec(assignString)) {
        return { pos: new RoomPosition(25, 25, assignString), range: 20 };
    }
}
exports.assignmentPosition = assignmentPosition;
function getRoleByName(creepName) {
    if (_.isUndefined(Game.creeps[creepName])) {
        return null;
    }
    if (!_.isUndefined(Game.creeps[creepName].memory['role'])) {
        return Game.creeps[creepName].memory['role'];
    }
    return _.first(creepName.split('_'));
}
exports.getRoleByName = getRoleByName;
function getCreepSpawnStatus(room, creepName) {
    if (Game.creeps[creepName] != null) {
        var creep = Game.creeps[creepName];
        if (creep.spawning) {
            return CreepSpawnStatus.Spawning;
        }
        if (_.isUndefined(creep.ticksToLive)) {
            return CreepSpawnStatus.Alive;
        }
        var requiredTtl = creep.memory['travelTime'] || CREEP_SPAWN_TIME * creep.body.length;
        if (creep.ticksToLive > requiredTtl) {
            return CreepSpawnStatus.Alive;
        }
    }
    if (_.some(getSpawningInRoom(room), function (c) { return c.name == creepName; })) {
        return CreepSpawnStatus.Spawning;
    }
    var spawnQueue = room.memory['spawnQueue'];
    if (_.some(spawnQueue, function (q) { return q.creepName == creepName; })) {
        return CreepSpawnStatus.InQueue;
    }
    return (Game.creeps[creepName] == null) ? CreepSpawnStatus.Unknown : CreepSpawnStatus.Expired;
}
exports.getCreepSpawnStatus = getCreepSpawnStatus;
var cachedAssigns = null;
var cachedFlags = null;
function getFreeSpawn(roomName) {
    var room = Game.rooms[roomName];
    if (_.isUndefined(room)) {
        return null;
    }
    var spawns = TickCache_1.__find(room, FIND_MY_SPAWNS, { filter: function (s) { return s.isActive(); } });
    for (var i = 0; i < spawns.length; i++) {
        var spawn = spawns[i];
        if (spawn.isActive() &&
            (_.isUndefined(spawn.spawning) || (null == spawn.spawning)) &&
            !spawn.memory.busy &&
            (_.isUndefined(spawn.room.memory['reservedSpawn']) || (spawn.id != spawn.room.memory['reservedSpawn']))) {
            return spawn;
        }
        else {
        }
    }
    return null;
}
function createCreepName(roomName, assign, role) {
    var room = Game.rooms[roomName];
    var spawnQueue = room.memory['spawnQueue'];
    if (_.isUndefined(spawnQueue)) {
        spawnQueue = [];
        room.memory['spawnQueue'] = [];
    }
    var existingNames = _.union(_.keys(Game.creeps), getSpawningInRoom(room).map(function (i) { return i.name; }), spawnQueue.map(function (i) { return i.creepName; }));
    var n = 1;
    while (_.includes(existingNames, role + "_" + assign + "_" + n)) {
        n++;
    }
    return role + "_" + assign + "_" + n;
}
function processSpawnQueue(room) {
    if (room == null) {
        console.log("<font color=\"red\">Room " + room.name + " not found, wtf</font>");
        return false;
    }
    var spawnQueue = room.memory['spawnQueue'] || [];
    if (!_.some(spawnQueue)) {
        return false;
    }
    var spawn = getFreeSpawn(room.name);
    if (spawn == null) {
        if (spawnQueue.length > 1) {
            console.log("No free spawn in room " + room.name + ", spawn queue length " + spawnQueue.length);
        }
        return false;
    }
    var creepToSpawn = _.first(spawnQueue);
    var setup = CreepSetup_1.makeSetup(creepToSpawn.creepSetup);
    var body = CreepSetup_1.makeBody(setup);
    var cost = Setup_1.getCost(body);
    if (room.energyAvailable < cost) {
        console.log("No energy in room " + room.name + " to spawn " + creepToSpawn.creepName + " (cost " + cost + ")");
        return true;
    }
    var checkResult = spawn.canCreateCreep(body, creepToSpawn.creepName);
    if (checkResult !== OK) {
        console.log("Spawn error in room " + room.name + " while spawning " + creepToSpawn.creepName + " (error code " + checkResult + ")");
        delete room.memory['spawnQueue'];
        return true;
    }
    var memory = _.clone(creepToSpawn.creepMemory);
    memory['spawnedAt'] = Game.time;
    var result = spawn.createCreep(body, creepToSpawn.creepName, memory);
    if (creepToSpawn.creepName === result) {
        spawnQueue = _.tail(spawnQueue);
        room.memory['spawnQueue'] = spawnQueue;
        return true;
    }
    console.log("Spawn error in room " + room.name + " while spawning " + creepToSpawn.creepName + " (error code " + result + ")");
    return true;
}
exports.processSpawnQueue = processSpawnQueue;
function addToSpawnQueue(roomName, setup, assign, priority) {
    var CreepSetups = Setup_1.GetCreepSetups();
    if (_.isUndefined(CreepSetups[setup])) {
        console.log("<font color=\"red\">setup not defined for role " + setup + "</font>");
        return null;
    }
    return addToSpawnQueueBySetup(roomName, CreepSetups[setup], assign, priority);
}
exports.addToSpawnQueue = addToSpawnQueue;
function addToSpawnQueueBySetup(roomName, setupString, assign, priority, creepName) {
    var room = Game.rooms[roomName];
    var spawnPriority = _.isUndefined(priority) ? 1 : priority;
    var setupMatch = /^(.*)\/(.*)$/.exec(setupString);
    if (!setupMatch) {
        throw new Error("Can not parse setup string " + setupString);
    }
    var name = creepName || createCreepName(roomName, assign, setupMatch[1]);
    var memory = {
        spawnedAt: Game.time,
        spawnedFromRoom: roomName,
    };
    var setup = CreepSetup_1.makeSetup(setupString);
    for (var _i = 0, _a = setup.body; _i < _a.length; _i++) {
        var part = _a[_i];
        if (!_.isUndefined(part.boost) && (part.boost != null)) {
            var task = TaskManager_1.default.AddLoadTask(roomName, part.boost, part.amount);
            task.InitLab();
            if (task.lab != null) {
                memory[task.boost + "boostLabId"] = task.lab.id;
            }
            else {
                console.log("Failed to init lab for load task (creep " + name + ", boost " + task.boost + ")");
            }
        }
    }
    var spawnItem = {
        assignmentId: assign,
        creepName: name,
        creepSetup: setupString,
        priority: spawnPriority,
        creepMemory: memory
    };
    if (room && room.controller && room.controller.my && !room.memory['spawnQueue']) {
        room.memory['spawnQueue'] = [];
    }
    var spawnQueue = room.memory['spawnQueue'];
    spawnQueue.push(spawnItem);
    spawnQueue = spawnQueue.sort(function (a, b) { return a.priority - b.priority; });
    room.memory['spawnQueue'] = spawnQueue;
    return name;
}
exports.addToSpawnQueueBySetup = addToSpawnQueueBySetup;
function tick() {
    cachedAssigns = null;
    cachedFlags = null;
    var myRooms = _.filter(Game.rooms, function (r) { return r.controller && r.controller.my; });
    var spawnCheckInterval = Game.cpu.bucket > 8000 ? 3 : 6;
    if ((Game.time % spawnCheckInterval) == (spawnCheckInterval - 1)) {
        myRooms.forEach(processSpawnQueue);
    }
}
exports.tick = tick;


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var BehaviorBase_1 = __webpack_require__(2);
var Locks_1 = __webpack_require__(55);
var Spawn_1 = __webpack_require__(3);
var Squad_1 = __webpack_require__(73);
var TickCache_1 = __webpack_require__(1);
var CostMatrixType_1 = __webpack_require__(0);
var PositionUtils_1 = __webpack_require__(88);
var RoomProvider_1 = __webpack_require__(12);
var inProcCache = {};
var useInProc = false;
var RoleBase = (function () {
    function RoleBase() {
        this._myInitialPositionRange = 0;
    }
    RoleBase.prototype.process = function (creep, process) {
        if (process === void 0) { process = null; }
        this._process = process;
        var state = creep.memory.state;
        if (_.isUndefined(state)) {
            state = 1;
            creep.memory.state = state;
        }
        var actions = 0;
        while (actions < 10) {
            if (!_.isFunction(this[state])) {
                console.log("No handler for role " + this.name + " state " + state + " (" + creep + "@" + creep.pos + ")");
                creep.memory.state = 1;
                return;
            }
            if (this[state](creep)) {
                return;
            }
            state = creep.memory.state;
            actions++;
        }
        console.log("Creep " + creep.name + " exceeds actions limit for role " + this.name + " (last state " + state + ")");
    };
    RoleBase._assignedTo = function (creep) {
        var current = creep.memory['current'] || Spawn_1.getAssignmentByName(creep.name);
        return Game.flags[current];
    };
    RoleBase.prototype._travelToAssignment = function (creep, moveType, updateRooms, bumpState) {
        if (moveType === void 0) { moveType = null; }
        if (updateRooms === void 0) { updateRooms = true; }
        if (bumpState === void 0) { bumpState = true; }
        if (!moveType) {
            moveType = BehaviorBase_1.default._speedType(creep);
        }
        if (updateRooms && RoomProvider_1.default.UpdateRoomIfNecessary(creep.room)) {
            delete creep.memory['_trav'];
        }
        var assign = Spawn_1.getAssignmentByName(creep.name);
        if (Game.flags[assign]) {
            if (!creep.pos.isEqualTo(Game.flags[assign].pos)) {
                return this._moveInRaidToFlag(creep, moveType, 0) ||
                    this._travelToFlag(creep, Game.flags[assign], 0, moveType) ||
                    this._moveToFlag(creep, 0, moveType);
            }
            this._setTravelTime(creep);
            if (bumpState) {
                this._nextState(creep);
                return false;
            }
            return true;
        }
        if (!_.isNaN(+assign)) {
            var pos = RoomPosition.unpack(+assign);
            if (!creep.pos.isEqualTo(pos)) {
                BehaviorBase_1.default.GoToPosition(creep, pos, { costMatrixType: moveType, range: 0 });
                return true;
            }
            this._setTravelTime(creep);
            if (bumpState) {
                this._nextState(creep);
                return false;
            }
            return true;
        }
        var targetRoomCenter = new RoomPosition(25, 25, assign);
        if ((creep.room.name != assign) || (targetRoomCenter.getRangeTo(creep) > 20)) {
            BehaviorBase_1.default.GoToPosition(creep, targetRoomCenter, { costMatrixType: moveType, range: 20 });
            return true;
        }
        if (bumpState) {
            this._nextState(creep);
            return false;
        }
        return true;
    };
    RoleBase.prototype._travelToDestinationRoom = function (creep, moveType) {
        if (moveType === void 0) { moveType = CostMatrixType_1.CostMatrixType.FullSpeed; }
        if (creep.memory['_trav'] && creep.memory['_trav'].path) {
            var stroke = creep.memory['_trav'].path.length > creep.ticksToLive ? '#ff8080' : '#80ff80';
            this._drawTravelVisuals(creep, { stroke: stroke });
        }
        var flag = this._getMyFlag(creep);
        if (flag == null) {
            creep.say('?');
            return true;
        }
        if (creep.pos.getRangeTo(flag) < 5) {
            this._setTravelTime(creep);
            flag.memory['postpone'] =
                Game.time +
                    CONTROLLER_ATTACK_BLOCKED_UPGRADE +
                    (creep.room.controller.upgradeBlocked || 0)
                    - creep.memory['travelTime']
                    - 5;
            this._nextState(creep);
            return false;
        }
        return this._moveInRaidToFlag(creep, moveType, 1) ||
            this._travelToFlag(creep, flag, 1, moveType) ||
            this._moveToFlag(creep, 1, moveType) || true;
    };
    RoleBase.prototype._puckupEnergyNearby = function (creep, periodicity) {
        if ((Game.cpu.bucket < 8300) && (periodicity > 1)) {
            return false;
        }
        if ((periodicity > 1) && (Game.time % periodicity) != (periodicity - 1)) {
            return false;
        }
        var dropped = _.first(TickCache_1.__findInRange(creep.pos, FIND_DROPPED_RESOURCES, 1, {
            filter: function (e) { return (e.resourceType == RESOURCE_ENERGY) && (e.amount > 50); }
        }));
        if ((dropped == null) || (_.sum(creep.carry) === creep.carryCapacity)) {
            return false;
        }
        creep.pickup(dropped);
        return true;
    };
    RoleBase.prototype._raidIsReady = function (creep) {
        var followers = BehaviorBase_1.default.GetFollowers(creep);
        if (_.some(followers, function (c) { return c.fatigue > 0; })) {
            if (followers.length > 1) {
            }
            return false;
        }
        if (followers.length > 1) {
        }
        return true;
    };
    RoleBase.prototype._moveInRaid = function (creep, goal, opts) {
        if (!creep.memory.inRaid) {
            var flag = this._getCurrentCheckpoint(creep, Game.flags[Spawn_1.getAssignmentByName(creep.name)]);
            if (flag != null) {
                if (_.includes([COLOR_CYAN, COLOR_GREEN], flag.secondaryColor)) {
                    Squad_1.formRaid(creep);
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        if (!_.isUndefined(creep.memory.follower) && _.isUndefined(Game.creeps[creep.memory.follower])) {
            delete creep.memory.follower;
        }
        if (!_.isUndefined(creep.memory.following) && _.isUndefined(Game.creeps[creep.memory.following])) {
            delete creep.memory.following;
        }
        if (!_.isUndefined(creep.memory.follower) &&
            !_.isUndefined(Game.creeps[creep.memory.follower]) &&
            !creep.pos.isNearTo(Game.creeps[creep.memory.follower]) &&
            (creep.pos.roomName == Game.creeps[creep.memory.follower].pos.roomName) &&
            (creep.pos.x > 0) && (creep.pos.x < 49) && (creep.pos.y > 0) && (creep.pos.y < 49)) {
            creep.say('👋', true);
            return true;
        }
        if (!_.isUndefined(creep.memory.following) && !_.isUndefined(Game.creeps[creep.memory.following])) {
            var following = Game.creeps[creep.memory.following];
            var close = creep.pos.isNearTo(following);
            var inSameRoom = creep.pos.roomName == following.pos.roomName;
            var inCloseRooms = Game.map.getRoomLinearDistance(following.pos.roomName, creep.pos.roomName) < 2;
            var inside = (creep.pos.x > 0) && (creep.pos.x < 49) && (creep.pos.y > 0) && (creep.pos.y < 49);
            var followingInside = (following.pos.x > 0) && (following.pos.x < 49) && (following.pos.y > 0) && (following.pos.y < 49);
            if (close || (!inSameRoom && inCloseRooms && !inside && !followingInside)) {
                if (!following.spawning) {
                    creep.move(creep.pos.getDirectionTo(following));
                    delete creep.memory['_trav'];
                }
                return true;
            }
            else {
                if (following.pos.roomName == creep.pos.roomName) {
                    if (!following.spawning) {
                        BehaviorBase_1.default.GoToPosition(creep, following.pos, opts);
                    }
                    return true;
                }
            }
        }
        if (!this._raidIsReady(creep)) {
            creep.say('🚬', true);
            return true;
        }
        if (creep.pos.isNearTo(goal)) {
            creep.move(creep.pos.getDirectionTo(goal));
            if (goal.isEqualTo(RoleBase._getMyAssignmentPosition(creep))) {
                this._setTravelTime(creep);
            }
            return true;
        }
        BehaviorBase_1.default.GoToPosition(creep, goal, opts);
        return true;
    };
    RoleBase.prototype._moveInRaidToFlag = function (creep, type, rng) {
        var flag = RoleBase._assignedTo(creep);
        if (!flag) {
            return false;
        }
        var currentCheckpoint = this._getCurrentCheckpoint(creep, flag) || flag;
        var range = currentCheckpoint.name == flag.name ? rng : 0;
        return this._moveInRaid(creep, currentCheckpoint.pos, { costMatrixType: type, range: range });
    };
    RoleBase.prototype._moveToFlag = function (creep, rng, moveType) {
        var pos = RoleBase._getMyAssignmentPosition(creep);
        if (pos == null) {
            return false;
        }
        if (!creep.pos.isNearTo(pos)) {
            BehaviorBase_1.default.GoToPosition(creep, pos, { costMatrixType: moveType, range: rng });
        }
        return true;
    };
    RoleBase.prototype._travelToFlag = function (creep, flag, rng, moveType) {
        if (creep.fatigue > 0) {
            return true;
        }
        var currentCheckpoint = this._getCurrentCheckpoint(creep, flag);
        if (currentCheckpoint == null) {
            return false;
        }
        var range = creep.pos.getRangeTo(currentCheckpoint);
        if (range == 1) {
            creep.move(creep.pos.getDirectionTo(currentCheckpoint));
            if (currentCheckpoint.pos.isEqualTo(RoleBase._getMyAssignmentPosition(creep))) {
                this._setTravelTime(creep);
            }
            return true;
        }
        BehaviorBase_1.default.GoToPosition(creep, currentCheckpoint.pos, { costMatrixType: moveType, range: rng });
        return true;
    };
    RoleBase.prototype._idle = function (creep) {
        creep.say('🚬', true);
        return true;
    };
    RoleBase.prototype._getCurrentCheckpoint = function (creep, destination) {
        if (destination == null) {
            return null;
        }
        var checkpoints = this._getCheckpoints(creep, destination);
        var currentCheckpoint = Game.flags[_.first(checkpoints)];
        var range = creep.pos.getRangeTo(currentCheckpoint);
        if (range == 1) {
            var moveResult = creep.move(creep.pos.getDirectionTo(currentCheckpoint));
            if (currentCheckpoint.pos.isEqualTo(RoleBase._getMyAssignmentPosition(creep))) {
                this._setTravelTime(creep);
            }
            if (moveResult == OK) {
                creep.memory.checkPoints = _.tail(creep.memory.checkPoints);
            }
            checkpoints = creep.memory.checkPoints;
            return currentCheckpoint;
        }
        if (checkpoints.length > 1) {
            if ((Game.flags[checkpoints[0]].pos.roomName != creep.room.name) && (Game.flags[checkpoints[1]].pos.roomName == creep.room.name)) {
                checkpoints = _.tail(checkpoints);
            }
        }
        return Game.flags[_.first(checkpoints)] || destination;
    };
    RoleBase.prototype._getCheckpoints = function (creep, destination) {
        if (creep.memory['checkPoints'] == null) {
            if (!_.isUndefined(destination) && !_.isUndefined(destination.memory) && !_.isUndefined(destination.memory.via)) {
                creep.memory.checkPoints = _.map(destination.memory.via, _.clone);
                creep.memory.checkPoints.push(destination.name);
            }
            else {
                creep.memory.checkPoints = [destination.name];
            }
        }
        return creep.memory.checkPoints;
    };
    RoleBase.prototype._moveToInitialPosition = function (creep) {
        return this._moveToPosition(creep, this._getMyInitialPosition(creep), this._myInitialPositionRange);
    };
    RoleBase.prototype._moveToPosition = function (creep, position, rng) {
        var range = creep.pos.getRangeTo(position);
        var costMatrixType = BehaviorBase_1.default._speedType(creep);
        switch (range) {
            case 0:
                this._nextState(creep);
                return false;
            case 1:
                this._setTravelTime(creep);
                if (this._myInitialPositionRange == 1) {
                    this._nextState(creep);
                    return true;
                }
                BehaviorBase_1.default.GoToPosition(creep, position, { costMatrixType: costMatrixType, range: 0 });
                return true;
            default:
                BehaviorBase_1.default.GoToPosition(creep, position, { costMatrixType: costMatrixType, range: rng });
                return true;
        }
    };
    RoleBase.prototype._setTravelTime = function (creep) {
        if (!creep.memory['travelTime']) {
            var flag = this._getMyFlag(creep);
            var margin = flag && flag.memory['spawnMargin'] || 0;
            creep.memory['travelTime'] = Game.time - creep.memory['spawnedAt'] + margin;
        }
    };
    RoleBase.prototype._getState = function (creep) {
        return creep.memory.state;
    };
    RoleBase.prototype._setState = function (creep, newState) {
        var stateChanged = creep.memory.state != newState;
        creep.memory.state = newState;
        return stateChanged;
    };
    RoleBase.prototype._nextState = function (creep) {
        if (_.isUndefined(this[1 + creep.memory.state])) {
            console.log("No next state for " + creep.name + " (" + this.name + ")");
            return true;
        }
        creep.memory.state = 1 + creep.memory.state;
        return true;
    };
    RoleBase.prototype._prevState = function (creep) {
        if (_.isUndefined(this[creep.memory['state'] - 1])) {
            return false;
        }
        creep.memory['state'] = creep.memory['state'] - 1;
        return true;
    };
    RoleBase.prototype._getHomeRoomName = function (creep) {
        if (!_.isUndefined(creep.memory['homeRoomName'])) {
            return creep.memory['homeRoomName'];
        }
        return null;
    };
    RoleBase.prototype._getHomeRoom = function (creep) {
        var myRoomName = creep.memory['spawnedFromRoom'];
        if (!_.isUndefined(myRoomName)) {
            return Game.rooms[myRoomName];
        }
        var homeRoomName = this._getHomeRoomName(creep);
        return homeRoomName == null ? null : Game.rooms[homeRoomName];
    };
    RoleBase.prototype._travelHome = function (creep, moveType) {
        if (moveType === void 0) { moveType = CostMatrixType_1.CostMatrixType.FullSpeed; }
        if (creep.getActiveBodyparts(HEAL) > 0) {
            creep.heal(creep);
        }
        var homeRoom = this._getHomeRoom(creep);
        if (!homeRoom) {
            return true;
        }
        var roomCenter = homeRoom.storage.pos;
        if ((creep.pos.roomName != roomCenter.roomName) || (creep.pos.getRangeTo(roomCenter) > 5)) {
            BehaviorBase_1.default.GoToPosition(creep, this._getHomeRoom(creep).storage.pos, { costMatrixType: moveType, range: 5 });
            return true;
        }
        console.log(creep.name + " is at home, switching state (current " + creep.memory.state + ")");
        this._nextState(creep);
        return true;
    };
    RoleBase.prototype._recycle = function (creep) {
        if ((creep.room.controller != null) && creep.room.controller.my) {
            var pos = this._getRecyclePosition(creep);
            if (pos != null) {
                if (creep.pos.isEqualTo(pos)) {
                    _.first(TickCache_1.__findInRange(creep.pos, FIND_MY_SPAWNS, 1)).recycleCreep(creep);
                    return true;
                }
                BehaviorBase_1.default.GoToPosition(creep, pos, { costMatrixType: CostMatrixType_1.CostMatrixType.FullSpeed, range: 0 });
                return true;
            }
        }
        creep.suicide();
        return true;
    };
    RoleBase.prototype._getRecyclePosition = function (creep) {
        if (_.isUndefined(creep.memory['recyclePosition'])) {
            var pos = this._findRecyclePosition(creep);
            if (pos != null) {
                creep.memory['recyclePosition'] = pos.pack();
            }
            return pos;
        }
        return RoomPosition.unpack(creep.memory['recyclePosition']);
    };
    RoleBase.prototype._findRecyclePosition = function (creep) {
        var firstSpawn = _.first(creep.room.find(FIND_MY_SPAWNS));
        if (firstSpawn != null) {
            return new RoomPosition(firstSpawn.pos.x + 1, firstSpawn.pos.y, firstSpawn.pos.roomName);
        }
        return null;
    };
    RoleBase._getMyAssignmentPosition = function (creep) {
        var assign = Spawn_1.getAssignmentByName(creep.name);
        if (!_.isUndefined(Game.flags[assign])) {
            return Game.flags[assign].pos;
        }
        var assignNumber = parseInt(assign);
        if (_.isNumber(assignNumber) && (assignNumber > 0)) {
            return RoomPosition.unpack(assignNumber);
        }
        if (assign.length == 2) {
            return RoomPosition.sunpack(assign);
        }
        return null;
    };
    RoleBase.prototype._getMyFlag = function (creep) {
        var assign = Spawn_1.getAssignmentByName(creep.name);
        if (assign == null) {
            return null;
        }
        return Game.flags[assign];
    };
    RoleBase.prototype._boost = function (creep, mineral, parts) {
        if (_.isUndefined(creep.memory['spawnedFromRoom'])) {
            creep.memory['spawnedFromRoom'] = creep.room.name;
        }
        if (!_.isUndefined(creep.memory['disableBoosting']) && (creep.memory['disableBoosting'] == true)) {
            return false;
        }
        var lab = this._getBoostLab(creep, mineral);
        if (lab == null) {
            this._nextState(creep);
            return false;
        }
        if (!_.isUndefined(Locks_1.Locks[lab.id])) {
            return true;
        }
        if (!creep.pos.isNearTo(lab)) {
            BehaviorBase_1.default.GoToPosition(creep, lab.pos, { costMatrixType: CostMatrixType_1.CostMatrixType.FullSpeed, range: 1 });
            return true;
        }
        if ((lab.energy <= LAB_BOOST_ENERGY) || (lab.mineralAmount <= LAB_BOOST_MINERAL)) {
            return this._idle(creep);
        }
        var boostResult = parts == null ? lab.boostCreep(creep) : lab.boostCreep(creep, parts);
        if (boostResult == ERR_NOT_IN_RANGE) {
            BehaviorBase_1.default.GoToPosition(creep, lab.pos, { costMatrixType: CostMatrixType_1.CostMatrixType.FullSpeed, range: 1 });
            return true;
        }
        Locks_1.Locks[lab.id] = creep.id;
        creep.say('💪🏼', true);
        this._nextState(creep);
        return false;
    };
    RoleBase.prototype._getBoostLab = function (creep, mineral) {
        if (!_.isUndefined(creep.memory[mineral + "boostLabId"])) {
            return Game.getObjectById(creep.memory[mineral + "boostLabId"]);
        }
        var lab = _.first(TickCache_1.__find(creep.room, FIND_STRUCTURES, {
            filter: function (s) { return ((s.structureType == STRUCTURE_LAB) && (s.mineralType == mineral) && (s.mineralAmount >= 30) && (s.energy >= 20)); }
        }).sort(function (a, b) { return b.mineralAmount - a.mineralAmount; }));
        creep.memory[mineral + "boostLabId"] = lab == null ? null : lab.id;
        return lab;
    };
    RoleBase.prototype._getCachedObject = function (creep, memoryKey, getter, inProc) {
        if (inProc === void 0) { inProc = false; }
        var context = (useInProc && inProc) ? inProcCache : creep.memory;
        var key = (useInProc && inProc) ? creep.name + "_" + memoryKey : memoryKey;
        if ((useInProc && inProc) && !_.isUndefined(creep.memory[memoryKey])) {
            delete creep.memory[memoryKey];
        }
        if (!_.isUndefined(context[key])) {
            return context[key] == null ?
                null :
                Game.getObjectById(context[key]);
        }
        var result = getter(creep);
        context[key] = result != null ? result.id : null;
        return result;
    };
    RoleBase.prototype._getCachedObjects = function (creep, memoryKey, getter, inProc) {
        if (inProc === void 0) { inProc = false; }
        var context = (useInProc && inProc) ? inProcCache : creep.memory;
        var key = (useInProc && inProc) ? creep.name + "_" + memoryKey : memoryKey;
        if ((useInProc && inProc) && !_.isUndefined(creep.memory[memoryKey])) {
            delete creep.memory[memoryKey];
        }
        if (!_.isUndefined(context[key])) {
            return context[key] == null ?
                null :
                _.compact(context[key].map(function (id) { return Game.getObjectById(id); }));
        }
        var items = getter(creep);
        context[key] = ((items != null) && (items.length > 0)) ?
            items.map(function (i) { return i.id; }) :
            null;
        return items;
    };
    RoleBase.AddCreepsToMatrix = function (roomName, matrix) {
        var room = Game.rooms[roomName];
        if (_.isUndefined(room)) {
            return matrix;
        }
        for (var _i = 0, _a = TickCache_1.__find(room, FIND_CREEPS); _i < _a.length; _i++) {
            var creep = _a[_i];
            if (creep.my) {
                matrix.set(creep.pos.x, creep.pos.y, 1 + matrix.get(creep.pos.x, creep.pos.y));
            }
            else {
                matrix.set(creep.pos.x, creep.pos.y, 0xFF);
            }
        }
        return matrix;
    };
    RoleBase.prototype._drawTravelVisuals = function (creep, options) {
        if (options === void 0) { options = {}; }
        var pathString = creep.memory['_trav'].path;
        if (pathString) {
            var path = [creep.pos];
            for (var d = 1; d < pathString.length; d++) {
                var next = PositionUtils_1.default.PositionInDirection(_.last(path), parseInt(pathString[d]));
                path.push(next);
            }
            Game.map.visual.poly(path, Object.assign({ stroke: '#ffffff', strokeWidth: .8, opacity: .2, lineStyle: 'dashed' }, options));
        }
    };
    return RoleBase;
}());
exports.RoleBase = RoleBase;


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ProcessList_1 = __webpack_require__(9);
var Process = (function () {
    function Process(listRecord) {
        this._processInfo = listRecord;
    }
    Object.defineProperty(Process.prototype, "subprocesses", {
        get: function () {
            return [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Process.prototype, "autoshutdownChilds", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Process.prototype, "childCheckInterval", {
        get: function () {
            return 100;
        },
        enumerable: true,
        configurable: true
    });
    Process.prototype._checkChildProcesses = function () {
        var _this = this;
        if (_.isUndefined(this.memory['recheckChilds']) || (this.memory['recheckChilds'] <= Game.time)) {
            this.memory['recheckChilds'] = Game.time + this.childCheckInterval;
            var subproc = this.subprocesses;
            var childs = ProcessList_1.GetChildProcesses(this.id);
            var _loop_1 = function (def) {
                if (!_.some(childs, function (p) {
                    return (p.parentId == _this.id) && (p.name == def.imageName) && (_.isEqual(p.processInfo.args, def.args));
                })) {
                    ProcessList_1.createProcess(this_1.id, def.imageName, def.args, def.priority);
                }
            };
            var this_1 = this;
            for (var _i = 0, subproc_1 = subproc; _i < subproc_1.length; _i++) {
                var def = subproc_1[_i];
                _loop_1(def);
            }
            if (this.autoshutdownChilds) {
                var _loop_2 = function (p) {
                    var definition = _.first(_.filter(subproc, function (d) { return (d.imageName == p.name) && _.isEqual(d.args, p.processInfo.args); }));
                    if (definition != null) {
                        if (definition.priority != p.priority) {
                            console.log("Setting process " + p.id + " priority " + p.priority + "=>" + definition.priority);
                            p.processInfo.priority = definition.priority;
                        }
                    }
                    else {
                        if (p.allowAutoshutdown()) {
                            ProcessList_1.KillProcessTree(p.id);
                            return "continue";
                        }
                    }
                };
                for (var _a = 0, childs_1 = childs; _a < childs_1.length; _a++) {
                    var p = childs_1[_a];
                    _loop_2(p);
                }
            }
        }
    };
    Process.prototype.GetProcessInParentChain = function (imageName) {
        var current = this;
        while (current && current.id > 1) {
            if (current.name == imageName) {
                return current;
            }
            current = ProcessList_1.GetProcessById(current.parentId);
        }
        return null;
    };
    Process.prototype.allowAutoshutdown = function () {
        return true;
    };
    Object.defineProperty(Process.prototype, "processInfo", {
        get: function () {
            return this._processInfo;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Process.prototype, "id", {
        get: function () {
            return this._processInfo.id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Process.prototype, "state", {
        get: function () {
            return this._processInfo.state;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Process.prototype, "priority", {
        get: function () {
            return this._processInfo.priority;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Process.prototype, "parentId", {
        get: function () {
            return this._processInfo.parentId;
        },
        enumerable: true,
        configurable: true
    });
    Process.prototype.sleep = function (ticks) {
        this.processInfo.awakeAtTick = Game.time + ticks;
    };
    Object.defineProperty(Process.prototype, "memory", {
        get: function () {
            if (_.isUndefined(Memory['proc'][this.id])) {
                Memory['proc'][this.id] = {};
            }
            return Memory['proc'][this.id];
        },
        set: function (value) {
            Memory['proc'][this.id] = value;
        },
        enumerable: true,
        configurable: true
    });
    Process.prototype.beginTick = function () {
        this._cpuAtStart = Game.cpu.getUsed();
    };
    Process.prototype.endTick = function () {
        this._processInfo.executionTicks++;
        this._processInfo.cpuSpent += Game.cpu.getUsed() - this._cpuAtStart;
    };
    Process.prototype.GetCachedValue = function (memoryKey, getter, cacheTicks) {
        if (cacheTicks === void 0) { cacheTicks = 1000; }
        if (_.isUndefined(this.memory['cache'])) {
            this.memory['cache'] = {};
        }
        if (!_.isUndefined(this.memory['cache'][memoryKey])) {
            var cacheItem = this.memory['cache'][memoryKey];
            if (_.isUndefined(cacheItem.expire) || (cacheItem.expire < Game.time)) {
                delete this.memory['cache'][memoryKey];
            }
            else {
                return cacheItem.value;
            }
        }
        var result = getter();
        this.memory['cache'][memoryKey] = {
            expire: Game.time + cacheTicks,
            value: result
        };
        return result;
    };
    Process.prototype.GetCachedObject = function (memoryKey, getter, cacheTicks) {
        if (cacheTicks === void 0) { cacheTicks = 1000; }
        if (_.isUndefined(this.memory['cache'])) {
            this.memory['cache'] = {};
        }
        if (!_.isUndefined(this.memory['cache'][memoryKey])) {
            var cacheItem = this.memory['cache'][memoryKey];
            if (_.isUndefined(cacheItem.expire) || (cacheItem.expire < Game.time) || !cacheItem.value) {
                delete this.memory['cache'][memoryKey];
            }
            else {
                return cacheItem.value == null ?
                    null :
                    Game.getObjectById(cacheItem.value);
            }
        }
        var result = getter();
        this.memory['cache'][memoryKey] = {
            expire: Game.time + cacheTicks,
            value: result != null ? result.id : null
        };
        return result;
    };
    Process.prototype.GetCachedObjects = function (memoryKey, getter, cacheTicks) {
        if (cacheTicks === void 0) { cacheTicks = 1000; }
        if (_.isUndefined(this.memory['cache'])) {
            this.memory['cache'] = {};
        }
        if (!_.isUndefined(this.memory['cache'][memoryKey])) {
            var cacheItem = this.memory['cache'][memoryKey];
            if (_.isUndefined(cacheItem.expire) || (cacheItem.expire < Game.time)) {
                delete this.memory['cache'][memoryKey];
            }
            else {
                return cacheItem.values == null ?
                    null :
                    cacheItem.values.map(function (id) { return Game.getObjectById(id); });
            }
        }
        var items = getter();
        this.memory['cache'][memoryKey] = {
            expire: Game.time + cacheTicks,
            values: items == null ? null : items.map(function (i) { return i.id; })
        };
        return items;
    };
    return Process;
}());
exports.Process = Process;


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var TaskType;
(function (TaskType) {
    TaskType["DeliverResource"] = "deliver";
    TaskType["CarryResources"] = "carry";
    TaskType["LoadPower"] = "loadPower";
    TaskType["ProduceBoost"] = "boost";
    TaskType["LoadBoost"] = "loadBoost";
    TaskType["LoadLab"] = "loadLab";
    TaskType["UnloadLab"] = "unloadLab";
    TaskType["LootResource"] = "lootResource";
    TaskType["EvacuateResources"] = "evac";
    TaskType["BuyResource"] = "buyResource";
    TaskType["SellResource"] = "sellResource";
    TaskType["Tow"] = "tow";
    TaskType["ProduceCommodity"] = "commodity";
})(TaskType = exports.TaskType || (exports.TaskType = {}));
var TaskExecutionResultType;
(function (TaskExecutionResultType) {
    TaskExecutionResultType[TaskExecutionResultType["Continue"] = 0] = "Continue";
    TaskExecutionResultType[TaskExecutionResultType["Completed"] = 1] = "Completed";
    TaskExecutionResultType[TaskExecutionResultType["Postpone"] = 2] = "Postpone";
})(TaskExecutionResultType = exports.TaskExecutionResultType || (exports.TaskExecutionResultType = {}));
var Task = (function () {
    function Task(data) {
        this._data = data;
        this._data['type'] = this.Type;
    }
    Object.defineProperty(Task.prototype, "dataObject", {
        get: function () {
            return this._data;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Task.prototype, "id", {
        get: function () {
            return this._data['id'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Task.prototype, "priority", {
        get: function () {
            return this._data['priority'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Task.prototype, "subtasks", {
        get: function () {
            return this._data['subtasks'].filter(function (id) { return !!Memory['Tasks'][id]; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Task.prototype, "agents", {
        get: function () {
            if (_.isUndefined(this._data['agents'])) {
                return null;
            }
            var agents = _.compact(this._data['agents'].map(function (a) { return Game.getObjectById(a); }));
            if (this._data['agents'].length != agents.length) {
                this._data['agents'] = agents.map(function (i) { return i.id; });
            }
            return agents;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Task.prototype, "postponedUntil", {
        get: function () {
            if (_.isUndefined(this._data['postponed'])) {
                return null;
            }
            if (Game.time >= this._data['postponed']) {
                delete this._data['postponed'];
                return null;
            }
            return this._data['postponed'];
        },
        enumerable: true,
        configurable: true
    });
    Task.prototype.isPostponed = function () {
        return this.postponedUntil != null;
    };
    Task.prototype.Continue = function (postponeTicks) {
        if (postponeTicks == null) {
            return {
                Type: TaskExecutionResultType.Continue
            };
        }
        return {
            Type: TaskExecutionResultType.Postpone,
            Postpone: postponeTicks
        };
    };
    Task.prototype.Completed = function () {
        return {
            Type: TaskExecutionResultType.Completed
        };
    };
    Task.prototype.Postpone = function (ticks) {
        if (ticks <= 0) {
            throw new Error("Trying to postpone task " + this.id + " for " + ticks + " ticks");
        }
        this._data['agents'] = [];
        this._data['postponed'] = Game.time + ticks;
        return {
            Type: TaskExecutionResultType.Postpone,
            Postpone: ticks
        };
    };
    Task.prototype.isCompleted = function () {
        return !_.some(this.subtasks);
    };
    Task.prototype.AssignTo = function (agent) {
        if (_.isUndefined(this._data['agents'])) {
            this._data['agents'] = [];
        }
        if (!_.includes(this._data['agents'], agent.id)) {
            this._data['agents'].push(agent.id);
        }
    };
    Task.prototype.Unassign = function (agent) {
        if (_.isUndefined(this._data['agents'])) {
            this._data['agents'] = [];
        }
        _.pull(this._data['agents'], agent.id);
    };
    Task.CreateTaskObject = function (id, priority) {
        var res = {};
        res['id'] = id;
        res['priority'] = priority;
        res['subtasks'] = [];
        return res;
    };
    return Task;
}());
exports.Task = Task;


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Guid_1 = __webpack_require__(47);
var Task_1 = __webpack_require__(6);
var TaskFactory_1 = __webpack_require__(75);
var BuyResourceTask_1 = __webpack_require__(76);
var CarryTask_1 = __webpack_require__(43);
var DeliverResourceTask_1 = __webpack_require__(77);
var EvacuateResourcesTask_1 = __webpack_require__(78);
var LoadBoostTask_1 = __webpack_require__(79);
var LoadLabTask_1 = __webpack_require__(80);
var LoadPowerTask_1 = __webpack_require__(81);
var LootResourceTask_1 = __webpack_require__(82);
var ProduceBoostTask_1 = __webpack_require__(44);
var ProduceCommodityTask_1 = __webpack_require__(83);
var SellResourceTask_1 = __webpack_require__(84);
var TowTask_1 = __webpack_require__(85);
var UnloadLabTask_1 = __webpack_require__(86);
var TasksRepository_1 = __webpack_require__(11);
var TaskManager = (function () {
    function TaskManager() {
    }
    TaskManager.QueryProduceTasks = function () {
        return TasksRepository_1.default.QueryTasks(function (t) {
            return (t.Type == Task_1.TaskType.ProduceBoost) &&
                !t.isCompleted();
        });
    };
    TaskManager.QueryDeliverTasks = function () {
        return TasksRepository_1.default.QueryTasks(function (t) {
            return (t.Type == Task_1.TaskType.DeliverResource) &&
                !t.isCompleted() &&
                !t.isPostponed();
        });
    };
    TaskManager.QueryMarketTasks = function () {
        return TasksRepository_1.default.QueryTasks(function (t) {
            return _.includes([Task_1.TaskType.BuyResource, Task_1.TaskType.SellResource], t.Type) &&
                !t.isCompleted() &&
                !t.isPostponed();
        });
    };
    TaskManager.QueryDeliverOrBuyTasks = function () {
        return TasksRepository_1.default.QueryTasks(function (t) {
            return _.includes([Task_1.TaskType.DeliverResource, Task_1.TaskType.BuyResource], t.Type) &&
                !t.isCompleted();
        });
    };
    TaskManager.QueryEvacuateTasks = function () {
        return TasksRepository_1.default.QueryTasks(function (t) {
            return (t.Type == Task_1.TaskType.EvacuateResources) &&
                !t.isCompleted();
        });
    };
    TaskManager.QueryProduceTaskForRoom = function (room) {
        var roomName = room.name;
        return _.first(TasksRepository_1.default.QueryTasks(function (t) {
            return (t.Type == Task_1.TaskType.ProduceBoost) &&
                (t.roomName == roomName) &&
                !t.isCompleted();
        }));
    };
    TaskManager.QueryFactoryTaskForRoom = function (room) {
        var roomName = room.name;
        return _.first(TasksRepository_1.default.QueryTasks(function (t) {
            return (t.Type == Task_1.TaskType.ProduceCommodity) &&
                (t.roomName == roomName) &&
                !t.isCompleted();
        }));
    };
    TaskManager.QueryProduceTaskForResource = function (resource) {
        return _.first(TasksRepository_1.default.QueryTasks(function (t) {
            return (t.Type == Task_1.TaskType.ProduceBoost) &&
                (t.resource == resource) &&
                !t.isCompleted() &&
                !t.isPostponed();
        }));
    };
    TaskManager.QueryLocalCarryTask = function (creep) {
        var roomName = creep.room.name;
        var possibleTasks = TasksRepository_1.default.QueryTasks(function (t) {
            return (t.Type == Task_1.TaskType.CarryResources) &&
                !t.isCompleted() &&
                !t.isPostponed() &&
                (!_.some(t.agents) || _.some(t.agents, { id: creep.id })) &&
                t.isLocal &&
                (t.to.pos.roomName == roomName);
        });
        if (!_.some(possibleTasks)) {
            return null;
        }
        var priority = _.min(possibleTasks, 'priority').priority;
        var topPriorityTasks = _.filter(possibleTasks, { priority: priority });
        var smallTasks = _.filter(topPriorityTasks, function (t) { return t.amount <= creep.carryCapacity; });
        var tasks = _.some(smallTasks) ? smallTasks : topPriorityTasks;
        var selectedTask = _.first(tasks);
        if (selectedTask.amount > creep.carryCapacity) {
            return TaskManager.Extract(selectedTask, creep.carryCapacity);
        }
        return selectedTask;
    };
    TaskManager.QueryLocalHaulerTask = function (creep) {
        return TaskManager.QueryLoadBoostTask(creep) ||
            TaskManager.QueryLoadPowerTask(creep) ||
            TaskManager.QueryLoadLabTask(creep) ||
            TaskManager.QueryUnloadLabTask(creep) ||
            TaskManager.QueryLootTask(creep) ||
            TaskManager.QueryLocalCarryTask(creep);
    };
    TaskManager.QueryLoadLabTask = function (creep) {
        var roomName = creep.room.name;
        var possibleTasks = TasksRepository_1.default.QueryTasks(function (t) {
            return (t.Type == Task_1.TaskType.LoadLab) &&
                !t.isCompleted() &&
                !t.isPostponed() &&
                t.roomName == roomName &&
                (!_.some(t.agents) || _.includes(t.agents, creep));
        });
        if (!_.some(possibleTasks)) {
            return null;
        }
        return _.min(possibleTasks, 'priority');
    };
    TaskManager.QueryUnloadLabTask = function (creep) {
        var roomName = creep.room.name;
        var possibleTasks = TasksRepository_1.default.QueryTasks(function (t) {
            return (t.Type == Task_1.TaskType.UnloadLab) &&
                !t.isCompleted() &&
                !t.isPostponed() &&
                t.roomName == roomName &&
                (!_.some(t.agents) || _.includes(t.agents, creep));
        });
        if (!_.some(possibleTasks)) {
            return null;
        }
        return _.min(possibleTasks, 'priority');
    };
    TaskManager.QueryLoadBoostTask = function (creep) {
        var roomName = creep.room.name;
        var possibleTasks = TasksRepository_1.default.QueryTasks(function (t) {
            return (t.Type == Task_1.TaskType.LoadBoost) &&
                !t.isCompleted() &&
                !t.isPostponed() &&
                (!_.some(t.agents) || _.some(t.agents, function (a) { return a.id == creep.id; })) &&
                t.roomName == roomName;
        });
        if (!_.some(possibleTasks)) {
            return null;
        }
        var selectedTask = _.first(possibleTasks.sort(function (a, b) { return a.priority - b.priority; }));
        var carryParts = creep.carryCapacity / 50;
        if (selectedTask.amount > carryParts) {
            return TaskManager.Extract(selectedTask, carryParts);
        }
        return selectedTask;
    };
    TaskManager.QueryLoadPowerTask = function (creep) {
        var roomName = creep.room.name;
        var possibleTasks = TasksRepository_1.default.QueryTasks(function (t) {
            return (t.Type == Task_1.TaskType.LoadPower) &&
                !t.isCompleted() &&
                !t.isPostponed() &&
                t.roomName == roomName &&
                (!_.some(t.agents) || _.includes(t.agents, creep));
        });
        if (!_.some(possibleTasks)) {
            return null;
        }
        return _.first(possibleTasks.sort(function (a, b) { return a.priority - b.priority; }));
    };
    TaskManager.QueryLootTask = function (creep) {
        var lootTasks = TaskManager.QueryLootTasks(creep.room.name);
        var unassigned = _.filter(lootTasks, function (task) { return !_.some(task.agents); });
        return _.first(unassigned);
    };
    TaskManager.QueryTowTask = function (creep) {
        var towTasks = TasksRepository_1.default.QueryTasks(function (t) {
            return (t.Type == Task_1.TaskType.Tow) &&
                !t.isCompleted() &&
                !t.isPostponed() &&
                (!_.some(t.agents) || _.some(t.agents, function (a) { return a.id == creep.id; })) &&
                t.Creep.room.name == creep.room.name;
        });
        return _.first(towTasks);
    };
    TaskManager.QueryLootTasks = function (roomName) {
        return TasksRepository_1.default.QueryTasks(function (t) {
            return (t.Type == Task_1.TaskType.LootResource) &&
                !t.isCompleted() &&
                !t.isPostponed() &&
                (t.LootObject != null) &&
                (t.LootObject.pos.roomName == roomName);
        }).sort(function (a, b) { return a.priority - b.priority; });
    };
    TaskManager.AddCarryTask = function (from, to, resource, amount, priority) {
        if (priority === void 0) { priority = 10; }
        var taskObject = CarryTask_1.default.CreateCarryTaskObject(Guid_1.default.newGuid(), priority, amount, resource, from.id, to.id);
        var task = new CarryTask_1.default(taskObject);
        TasksRepository_1.default.AddTask(task);
        return task;
    };
    TaskManager.AddProduceTask = function (resource, amount, roomName, priority) {
        if (priority === void 0) { priority = 10; }
        var taskObject = ProduceBoostTask_1.default.CreateProduceTaskObject(Guid_1.default.newGuid(), priority, amount, resource, roomName);
        var task = new ProduceBoostTask_1.default(taskObject);
        TasksRepository_1.default.AddTask(task);
        return task;
    };
    TaskManager.AddProduceCommodityTask = function (commodity, amount, roomName, priority) {
        if (priority === void 0) { priority = 10; }
        var taskObject = ProduceCommodityTask_1.default.CreateProduceCommodityTaskObject(Guid_1.default.newGuid(), priority, amount, commodity, roomName);
        var task = new ProduceCommodityTask_1.default(taskObject);
        TasksRepository_1.default.AddTask(task);
        return task;
    };
    TaskManager.AddDeliverTask = function (resource, amount, roomName, priority) {
        if (priority === void 0) { priority = 9; }
        var taskObject = DeliverResourceTask_1.default.CreateDeliverResourceTaskObject(Guid_1.default.newGuid(), priority, amount, roomName, resource);
        var task = new DeliverResourceTask_1.default(taskObject);
        TasksRepository_1.default.AddTask(task);
        return task;
    };
    TaskManager.AddBuyTask = function (resource, amount, roomName, priority) {
        if (priority === void 0) { priority = 9; }
        var taskObject = BuyResourceTask_1.default.CreateBuyResourceTaskObject(Guid_1.default.newGuid(), priority, amount, roomName, resource);
        var task = new BuyResourceTask_1.default(taskObject);
        TasksRepository_1.default.AddTask(task);
        return task;
    };
    TaskManager.AddSellTask = function (resource, amount, roomName, priority) {
        if (priority === void 0) { priority = 8; }
        var taskObject = SellResourceTask_1.default.CreateSellResourceTaskObject(Guid_1.default.newGuid(), priority, amount, roomName, resource);
        var task = new SellResourceTask_1.default(taskObject);
        TasksRepository_1.default.AddTask(task);
        return task;
    };
    TaskManager.AddLoadTask = function (roomName, resource, parts, priority, labId) {
        if (priority === void 0) { priority = 5; }
        var tasksToMerge = TasksRepository_1.default.QueryTasks(function (t) {
            return t.Type == Task_1.TaskType.LoadBoost &&
                t.roomName == roomName &&
                t.boost == resource &&
                t.Step == 'init' &&
                ((t.amount + parts) <= Math.floor(LAB_MINERAL_CAPACITY / LAB_BOOST_MINERAL));
        });
        if (_.some(tasksToMerge)) {
            var taskToMerge = _.max(tasksToMerge, 'amount');
            if (tasksToMerge) {
                taskToMerge.addParts(parts);
                return taskToMerge;
            }
            else {
                console.log("Something went wrong when merging " + parts + " of " + resource + " in " + roomName + ": no task");
            }
        }
        var taskObject = LoadBoostTask_1.default.CreateLoadBoostTaskObject(Guid_1.default.newGuid(), priority, roomName, resource, parts, labId);
        var task = new LoadBoostTask_1.default(taskObject);
        TasksRepository_1.default.AddTask(task);
        task.EnsureBoost();
        return task;
    };
    TaskManager.AddLoadPowerTask = function (roomName, priority) {
        if (priority === void 0) { priority = 9; }
        var taskObject = LoadPowerTask_1.default.CreateLoadPowerTaskObject(Guid_1.default.newGuid(), priority, roomName);
        var task = new LoadPowerTask_1.default(taskObject);
        TasksRepository_1.default.AddTask(task);
        return task;
    };
    TaskManager.AddLoadLabTask = function (roomName, amount, left, right, priority) {
        if (priority === void 0) { priority = 9; }
        var taskObject = LoadLabTask_1.default.CreateLoadLabTaskObject(Guid_1.default.newGuid(), priority, roomName, left, right, amount);
        var task = new LoadLabTask_1.default(taskObject);
        TasksRepository_1.default.AddTask(task);
        return task;
    };
    TaskManager.AddUnloadLabTask = function (roomName, unloadAll, priority) {
        if (priority === void 0) { priority = 9; }
        var taskObject = UnloadLabTask_1.default.CreateUnloadLabTaskObject(Guid_1.default.newGuid(), priority, roomName, unloadAll);
        var task = new UnloadLabTask_1.default(taskObject);
        TasksRepository_1.default.AddTask(task);
        return task;
    };
    TaskManager.AddLootTask = function (lootObject, priority) {
        if (priority === void 0) { priority = 15; }
        var taskObject = LootResourceTask_1.default.CreateLootTaskObject(Guid_1.default.newGuid(), priority, lootObject);
        var task = new LootResourceTask_1.default(taskObject);
        TasksRepository_1.default.AddTask(task);
        return task;
    };
    TaskManager.AddEvacuateTask = function (roomName) {
        var taskObject = EvacuateResourcesTask_1.default.CreateEvacuateResourcesTaskObject(Guid_1.default.newGuid(), 13, roomName);
        var task = new EvacuateResourcesTask_1.default(taskObject);
        TasksRepository_1.default.AddTask(task);
        return task;
    };
    TaskManager.AddTowTask = function (creep, position, range, priority) {
        if (priority === void 0) { priority = 11; }
        var taskObject = TowTask_1.default.CreateTowTaskObject(Guid_1.default.newGuid(), priority, creep, position, range);
        var task = new TowTask_1.default(taskObject);
        TasksRepository_1.default.AddTask(task);
        return task;
    };
    TaskManager.Extract = function (task, amount) {
        var extractedObject = _.cloneDeep(task.dataObject);
        extractedObject['id'] = Guid_1.default.newGuid();
        extractedObject['amount'] = amount;
        extractedObject['subtasks'] = [];
        extractedObject['agents'] = [];
        task.dataObject['amount'] -= amount;
        var extractedTask = TaskFactory_1.default.CreateTask(extractedObject);
        TasksRepository_1.default.AddTask(extractedTask, true);
        return extractedTask;
    };
    return TaskManager;
}());
exports.default = TaskManager;


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.targetBucket = 5000;
exports.criticalPriority = 10;
exports.alliedPlayers = ['FeTiD', 'ART999', 'likeafox', 'demawi', 'x3mka', 'Robalian', 'DonCarlitos'];
exports.boosts = {
    defaultPraiseMineral: RESOURCE_CATALYZED_GHODIUM_ACID
};
exports.collectStats = true;
exports.activeDefense = false;
exports.fortifyStorageLimit = 950000;
var ChargeLayout;
(function (ChargeLayout) {
    ChargeLayout[ChargeLayout["Free"] = 0] = "Free";
    ChargeLayout[ChargeLayout["Diamond"] = 1] = "Diamond";
    ChargeLayout[ChargeLayout["BunkerA"] = 2] = "BunkerA";
    ChargeLayout[ChargeLayout["BunkerB"] = 3] = "BunkerB";
    ChargeLayout[ChargeLayout["BunkerC"] = 4] = "BunkerC";
})(ChargeLayout = exports.ChargeLayout || (exports.ChargeLayout = {}));
exports.bunkerTypes = [
    ChargeLayout.BunkerA,
    ChargeLayout.BunkerB,
    ChargeLayout.BunkerC,
];
var RoomsConfig = {};
var ShardsConfig = {
    'shard0': RoomsConfig,
};
function getRoomConfig(roomName) {
    if (!ShardsConfig[Game.shard.name] || !ShardsConfig[Game.shard.name][roomName]) {
        return {
            RoomName: roomName,
            ChargeLayout: ChargeLayout.BunkerC
        };
    }
    return ShardsConfig[Game.shard.name][roomName];
}
exports.getRoomConfig = getRoomConfig;
function getMyRooms() {
    return ShardsConfig[Game.shard.name];
}
exports.getMyRooms = getMyRooms;
exports.ResourcesConfiguration = {
    baseAmount: 4000,
    HydroxideMult: 3,
    GhoduimMult: 2,
    T1Mult: 2,
    T2Mult: 2.5,
    T3Mult: 5,
    HarvestMult: 1,
    BuildMult: 1,
    CarryMult: 1,
    UpgradeMult: 1,
    AttackMult: 1,
    DismantleMult: 1,
    HealMult: 1.5,
    MoveMult: 1.5,
    RangedAttackMult: 1.5,
    ArmorMult: 1.5
};
var MarketPricesShardConfig = {
    shard0: {
        energy: { MaxBuyPrice: 3, MinSellPrice: 0.001 },
    },
    shard1: {
        energy: { MaxBuyPrice: 15, MinSellPrice: 10 },
    },
    shard2: {
        energy: { MaxBuyPrice: 15, MinSellPrice: 10 },
    },
    shard3: {
        energy: { MaxBuyPrice: 0.3, MinSellPrice: 0.001 },
    },
};
exports.AutoBuy = {
    U: 4000,
    L: 4000,
    Z: 4000,
    K: 4000,
    O: 4000,
    H: 4000,
    X: 4000,
};
exports.AutoSell = {
    U: 12000,
    L: 12000,
    Z: 12000,
    K: 12000,
    O: 12000,
    H: 12000,
    X: 12000,
    purifier: 3000,
    oxidant: 3000,
    reductant: 3000,
    utrium_bar: 3000,
    lemergium_bar: 3000,
    zynthium_bar: 3000,
    keanium_bar: 3000
};
exports.MarketResourcesConfig = MarketPricesShardConfig[Game.shard.name];
exports.BuildConfig = {
    AutoShield: true
};


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Dozer_1 = __webpack_require__(124);
var Jax_1 = __webpack_require__(125);
var Link_1 = __webpack_require__(126);
var Mattis_1 = __webpack_require__(127);
var OpsGenerator_1 = __webpack_require__(128);
var Sparks_1 = __webpack_require__(130);
var Tank_1 = __webpack_require__(131);
var GeneratePixelProcess_1 = __webpack_require__(137);
var Factory_1 = __webpack_require__(153);
var RemoveCore_1 = __webpack_require__(165);
var PerformanceTest_1 = __webpack_require__(175);
var Supply_1 = __webpack_require__(74);
var Process_init_1 = __webpack_require__(132);
var ProcessPermanentRoom_1 = __webpack_require__(157);
var TributeTracker_1 = __webpack_require__(37);
var Statd_1 = __webpack_require__(174);
var Reserving_1 = __webpack_require__(144);
var ActiveRepair_1 = __webpack_require__(145);
var SimpleActiveDefense_1 = __webpack_require__(167);
var VusializePath_1 = __webpack_require__(177);
var LegacyRoles_1 = __webpack_require__(138);
var BasicTowers_1 = __webpack_require__(57);
var Links_1 = __webpack_require__(155);
var Labs_1 = __webpack_require__(154);
var ProcessPower_1 = __webpack_require__(158);
var Diamond_1 = __webpack_require__(149);
var LinkedHarvesting_1 = __webpack_require__(139);
var Square_1 = __webpack_require__(150);
var VisualizeBattleField_1 = __webpack_require__(170);
var CoordinatedDefense_1 = __webpack_require__(151);
var Scand_1 = __webpack_require__(166);
var FlagsHub_1 = __webpack_require__(134);
var FlaggedCreeps_1 = __webpack_require__(133);
var MissionStartTracker_1 = __webpack_require__(142);
var CaravanMission_1 = __webpack_require__(141);
var SquadHub_1 = __webpack_require__(173);
var Squad_1 = __webpack_require__(172);
var MineralsHarvesting_1 = __webpack_require__(156);
var Autobuilder_1 = __webpack_require__(146);
var TerminalUpgrade_1 = __webpack_require__(169);
var ContainerUpgrade_1 = __webpack_require__(168);
var Market_1 = __webpack_require__(140);
var NukeLauncher_1 = __webpack_require__(143);
var BunkerCharge_1 = __webpack_require__(148);
var Working_1 = __webpack_require__(171);
var ResourceBalancer_1 = __webpack_require__(34);
var BoostsManager_1 = __webpack_require__(20);
var CentralMining_1 = __webpack_require__(147);
var ZoneVisualizer_1 = __webpack_require__(252);
var Remote_1 = __webpack_require__(162);
var RemoteScouting_1 = __webpack_require__(164);
var InfrastructureWorking_1 = __webpack_require__(161);
var Harvesting_1 = __webpack_require__(160);
var Delivering_1 = __webpack_require__(159);
var RemoteDefend_1 = __webpack_require__(163);
var IntershardHub_1 = __webpack_require__(135);
var GarbageCollector_1 = __webpack_require__(136);
var TestPowerCreepsMover_1 = __webpack_require__(176);
var ProcessState;
(function (ProcessState) {
    ProcessState[ProcessState["Created"] = 0] = "Created";
    ProcessState[ProcessState["Running"] = 1] = "Running";
    ProcessState[ProcessState["Pausing"] = 2] = "Pausing";
    ProcessState[ProcessState["Paused"] = 3] = "Paused";
    ProcessState[ProcessState["Resuming"] = 4] = "Resuming";
    ProcessState[ProcessState["Suspending"] = 5] = "Suspending";
    ProcessState[ProcessState["Suspended"] = 6] = "Suspended";
    ProcessState[ProcessState["Killed"] = 7] = "Killed";
})(ProcessState = exports.ProcessState || (exports.ProcessState = {}));
var processContext = {
    '/sbin/init': Process_init_1.ProcessInit.prototype,
    '/usr/sbin/zone-visualizer': ZoneVisualizer_1.default.prototype,
    '/usr/bin/permanent-room': ProcessPermanentRoom_1.ProcessPermanentRoom.prototype,
    '/usr/bin/remote-defend': RemoteDefend_1.default.prototype,
    '/usr/bin/central-mining': CentralMining_1.default.prototype,
    "/usr/bin/reserving": Reserving_1.Reserving.prototype,
    "/usr/bin/linked-harvesting": LinkedHarvesting_1.LinkedHarvesting.prototype,
    '/usr/bin/supplyd': Supply_1.ProcessSupply.prototype,
    '/usr/bin/scand': Scand_1.default.prototype,
    "/usr/bin/tribute-tracker": TributeTracker_1.default.prototype,
    "/usr/bin/statd": Statd_1.Statd.prototype,
    "/usr/bin/basic-towers": BasicTowers_1.BasicTowers.prototype,
    "/usr/bin/links": Links_1.Links.prototype,
    "/usr/bin/simple-labs": Labs_1.Labs.prototype,
    "/usr/bin/factory-task": Factory_1.Factory.prototype,
    "/usr/bin/terminal-upgrade": TerminalUpgrade_1.default.prototype,
    "/usr/bin/container-upgrade": ContainerUpgrade_1.default.prototype,
    "/usr/bin/active-repair": ActiveRepair_1.ActiveRepair.prototype,
    "/usr/bin/simple-active-defense": SimpleActiveDefense_1.SimpleActiveDefense.prototype,
    "/opt/bin/legacy-roles": LegacyRoles_1.LegacyRoles.prototype,
    "/usr/bin/flags-hub": FlagsHub_1.default.prototype,
    "/usr/bin/flagged-creeps": FlaggedCreeps_1.default.prototype,
    "/usr/bin/vis-path": VusializePath_1.VisualizePath.prototype,
    "/usr/bin/vis-bf": VisualizeBattleField_1.VisualizeBattleField.prototype,
    "/usr/bin/process-power": ProcessPower_1.ProcessPower.prototype,
    "/usr/bin/diamond": Diamond_1.Diamond.prototype,
    "/usr/bin/square": Square_1.Square.prototype,
    "/usr/bin/bunker-charge": BunkerCharge_1.default.prototype,
    "/usr/bin/working": Working_1.default.prototype,
    "/usr/bin/coordinated-defense": CoordinatedDefense_1.CoordinatedDefense.prototype,
    "/usr/bin/mission-start-tracker": MissionStartTracker_1.default.prototype,
    "/usr/bin/caravan-mission": CaravanMission_1.default.prototype,
    "/usr/bin/squad-hub": SquadHub_1.default.prototype,
    "/usr/bin/squad": Squad_1.default.prototype,
    "/usr/bin/minerals-harvesting": MineralsHarvesting_1.default.prototype,
    "/usr/bin/autobuilder": Autobuilder_1.default.prototype,
    "/usr/bin/marketd": Market_1.default.prototype,
    "/usr/bin/nuke-launcher": NukeLauncher_1.default.prototype,
    "/usr/bin/resource-balancer": ResourceBalancer_1.default.prototype,
    "/usr/bin/boosts-manager": BoostsManager_1.default.prototype,
    "/usr/bin/remote": Remote_1.default.prototype,
    "/usr/bin/remote-scouting": RemoteScouting_1.default.prototype,
    "/usr/bin/infrastructure-working": InfrastructureWorking_1.default.prototype,
    "/usr/bin/harvesting": Harvesting_1.default.prototype,
    "/usr/bin/delivering": Delivering_1.default.prototype,
    "/usr/bin/remove-core": RemoveCore_1.default.prototype,
    "/usr/bin/intershard-hub": IntershardHub_1.default.prototype,
    "/usr/sbin/garbage-collector": GarbageCollector_1.default.prototype,
    "/tmp/powercreeps-mover": TestPowerCreepsMover_1.default.prototype,
    "/tmp/performance-test": PerformanceTest_1.default.prototype,
    "/usr/bin/ops-generator": OpsGenerator_1.default.prototype,
    "/usr/bin/power-creeps/dozer": Dozer_1.default.prototype,
    "/usr/bin/power-creeps/tank": Tank_1.default.prototype,
    "/usr/bin/power-creeps/link": Link_1.default.prototype,
    "/usr/bin/power-creeps/jax": Jax_1.default.prototype,
    "/usr/bin/power-creeps/sparks": Sparks_1.default.prototype,
    "/usr/bin/power-creeps/mattis": Mattis_1.default.prototype,
    "/opt/pixels": GeneratePixelProcess_1.default.prototype
};
var ProcessLoader = (function () {
    function ProcessLoader(objContext) {
        this.objContext = objContext;
    }
    ProcessLoader.prototype.getInstance = function (listItem) {
        if (_.isUndefined(this.objContext[listItem.name])) {
            KillProcess(listItem.id);
            throw new TypeError("No image for " + listItem.name);
        }
        var instance = Object.create(this.objContext[listItem.name]);
        instance.constructor.call(instance, listItem);
        return instance;
    };
    return ProcessLoader;
}());
function GetProcessList() {
    var processTable = GetProcessTable();
    return _.values(processTable).sort(function (a, b) {
        return (a.priority - (a.processInfo.priorityBonus || 0)) -
            (b.priority - (b.processInfo.priorityBonus || 0));
    });
}
exports.GetProcessList = GetProcessList;
var _processTable = null;
var _processTableTick = null;
function GetProcessTable() {
    if (_.isUndefined(Memory['processTable'])) {
        Memory['processTable'] = {};
    }
    if ((_processTable == null) || (_processTableTick == null) || (_processTableTick < Game.time)) {
        _processTableTick = Game.time;
        _processTable = {};
        var loader_1 = new ProcessLoader(processContext);
        var processInfoTable = Memory['processTable'];
        _.forEach(processInfoTable, function (pi) {
            try {
                var process_1 = loader_1.getInstance(pi);
                _processTable[process_1.id] = process_1;
            }
            catch (e) {
                delete Memory.processTable[pi.id];
                delete Memory.proc[pi.id];
                console.log("<font color=\"red\">TypeInitializerException (" + pi.id + ":" + pi.name + "): " + e.message + "\r\n" + e.stack + "</font>");
            }
        });
    }
    return _processTable;
}
exports.GetProcessTable = GetProcessTable;
function GetProcessById(id) {
    return GetProcessTable()[id];
}
exports.GetProcessById = GetProcessById;
function KillProcess(id) {
    var process = GetProcessById(id);
    if (process != null) {
        process.processInfo.state = ProcessState.Killed;
    }
}
exports.KillProcess = KillProcess;
function KillProcessTree(id) {
    var childs = GetChildProcesses(id);
    var result = [];
    for (var _i = 0, childs_1 = childs; _i < childs_1.length; _i++) {
        var child = childs_1[_i];
        var killedPids = KillProcessTree(child.id);
        for (var _a = 0, killedPids_1 = killedPids; _a < killedPids_1.length; _a++) {
            var p = killedPids_1[_a];
            result.push(p);
        }
    }
    KillProcess(id);
    result.push(id);
    return result;
}
exports.KillProcessTree = KillProcessTree;
function GetChildProcesses(pid, opts) {
    var allChilds = GetProcessList().filter(function (p) { return p.parentId == pid; });
    return _.filter(allChilds.map(function (p) { return p; }), _.isUndefined(opts) ? null : opts.filter);
}
exports.GetChildProcesses = GetChildProcesses;
function createProcess(parentId, name, args, priority) {
    var processTable = GetProcessTable();
    var pids = _.values(processTable).map(function (p) { return p.id; });
    var maxPid = _.some(processTable) ? _.last(pids.sort(function (a, b) { return a - b; })) : 0;
    var lastPid = Memory['lastPid'] || maxPid;
    var parentProcess = GetProcessById(parentId);
    var pri = priority || _.isUndefined(parentProcess) ? 10 : parentProcess.processInfo.priority;
    var newProcessId = 1 + lastPid;
    var newProcessInfo = {
        id: newProcessId,
        parentId: parentId,
        name: name,
        args: args,
        env: {},
        state: ProcessState.Created,
        priority: pri,
        launchLick: Game.time,
        executionTicks: 0,
        cpuSpent: 0
    };
    Memory['processTable'][newProcessId] = newProcessInfo;
    Memory['lastPid'] = newProcessId;
    _processTable = null;
    return newProcessId;
}
exports.createProcess = createProcess;
function updateProcessTable() {
    var processInfoTable = {};
    _.forEach(_processTable, function (p) {
        processInfoTable[p.id] = p.processInfo;
    });
    Memory['processTable'] = processInfoTable;
}
exports.updateProcessTable = updateProcessTable;


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var BehaviorBase_1 = __webpack_require__(2);
var Process_1 = __webpack_require__(5);
var ProcessList_1 = __webpack_require__(9);
var Roles_1 = __webpack_require__(66);
var Spawn_1 = __webpack_require__(3);
var CostMatrixType_1 = __webpack_require__(0);
var PopulatedProcess = (function (_super) {
    __extends(PopulatedProcess, _super);
    function PopulatedProcess() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PopulatedProcess.prototype.SpawningAllowed = function () {
        if (this.ParentRoom.find(FIND_NUKES).length) {
            var firstNukeLand = _.min(this.ParentRoom.find(FIND_NUKES), 'timeToLand').timeToLand;
            if (firstNukeLand <= 201) {
                return false;
            }
        }
        var parentRoomProcess = this.GetRootRoomProcess();
        return (parentRoomProcess != null) && !parentRoomProcess.invaded;
    };
    PopulatedProcess.prototype.allowAutoshutdown = function () {
        return !_.some(this._getPopulation()) && !_.some(this._getCurrentCreeps());
    };
    PopulatedProcess.prototype._handleCreeps = function () {
        if (this.ParentRoomName && Game.flags["evac" + this.ParentRoomName] && this.ParentRoom.find(FIND_NUKES).length) {
            var firstNukeLand = _.min(this.ParentRoom.find(FIND_NUKES), 'timeToLand').timeToLand;
            if (firstNukeLand < 50) {
                this._evacuate(Game.flags["evac" + this.ParentRoomName], firstNukeLand);
            }
        }
        for (var _i = 0, _a = this._getCurrentCreeps(); _i < _a.length; _i++) {
            var creep = _a[_i];
            if (!creep.spawning && !creep.memory['processed']) {
                try {
                    var roleName = Spawn_1.getRoleByName(creep.name);
                    var role = Roles_1.roles[roleName];
                    if (role != null) {
                        role.process(creep, this);
                    }
                    else {
                        console.log("No role " + roleName + " for " + creep + " (" + creep.pos + ")");
                    }
                    creep.memory['processed'] = true;
                }
                catch (e) {
                    creep.memory['processed'] = true;
                    if (e == null) {
                        console.log("<font color=\"red\">Roles.process() exception for " + creep.name + ", no details</font>");
                    }
                    else {
                        console.log("<font color=\"red\">Roles.process() exception for " + creep.name + ": " + e.message + "\r\n" + e.stack + "</font>");
                    }
                }
            }
        }
    };
    PopulatedProcess.prototype._createCreepName = function (i) {
        if (!this.memory['creeps-counter']) {
            this.memory['creeps-counter'] = {};
        }
        var m = /^(.*)\/(.*)$/.exec(i.setupString);
        if (!m) {
            throw new Error("Parse failed: " + i.setupString);
        }
        var key = m[1] + "_" + i.assignment;
        this.memory['creeps-counter'][key] = 1 + (this.memory['creeps-counter'][key] || 0);
        return key + "_" + this.memory['creeps-counter'][key];
    };
    PopulatedProcess.prototype._handlePopulation = function () {
        var _this = this;
        if (!this.SpawningAllowed()) {
            return;
        }
        if (_.isUndefined(this.memory['recheckCreeps']) || (this.memory['recheckCreeps'] <= Game.time)) {
            this.memory['recheckCreeps'] = Game.time + this.creepsCheckInterval;
            var population = this._cachedPopulation();
            var currentCreeps = this._getCurrentCreepsNames();
            if (!_.isUndefined(['current-creeps'])) {
                this.memory['current-creeps'] =
                    _.filter(this.memory['current-creeps'], function (cn) { return Spawn_1.CreepSpawnStatus.Unknown != Spawn_1.getCreepSpawnStatus(_this.ParentRoom, cn) || !_.isUndefined(Memory.creeps[cn]); });
            }
            var alive = _.filter(currentCreeps, function (c) { return !_.includes([Spawn_1.CreepSpawnStatus.Unknown, Spawn_1.CreepSpawnStatus.Expired], Spawn_1.getCreepSpawnStatus(_this.ParentRoom, c)); });
            var assigned = _.groupBy(alive, function (c) { return Spawn_1.getAssignmentByName(c); });
            for (var _i = 0, _a = _.values(population); _i < _a.length; _i++) {
                var item = _a[_i];
                if (_.isUndefined(assigned[item.assignment]) || (item.positions > assigned[item.assignment].length)) {
                    var newName = Spawn_1.addToSpawnQueueBySetup(this.ParentRoomName, item.setupString, item.assignment, item.proirity, this._createCreepName(item));
                    this.memory['current-creeps'].push(newName);
                    this.OnCreepSpawned(newName, item.setupString);
                    currentCreeps = this._getCurrentCreepsNames();
                }
            }
        }
    };
    PopulatedProcess.prototype.OnCreepSpawned = function (_name, _setupString) { };
    PopulatedProcess.prototype._cachedPopulation = function () {
        if (_.isUndefined(this.memory['recheckPopulation']) || (this.memory['recheckPopulation'] <= Game.time)) {
            this.memory['recheckPopulation'] = Game.time + this.populationCheckInterval;
            this.memory['population'] = this._getPopulation();
        }
        return this.memory['population'];
    };
    Object.defineProperty(PopulatedProcess.prototype, "populationCheckInterval", {
        get: function () {
            return 15;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PopulatedProcess.prototype, "creepsCheckInterval", {
        get: function () {
            return 6;
        },
        enumerable: true,
        configurable: true
    });
    PopulatedProcess.prototype._getCurrentCreepsNames = function () {
        if (_.isUndefined(this.memory['current-creeps'])) {
            var population = this._cachedPopulation();
            this.memory['current-creeps'] = [];
            var _loop_1 = function (p) {
                var item = population[p];
                var _a = /^(.*)\/(.*)$/.exec(item.setupString), behavior = _a[1];
                var prefix = behavior + "_" + item.assignment;
                var creeps = _.filter(Game.creeps, function (c) { return c.name.substring(0, prefix.length) === prefix; });
                var that = this_1;
                _.forEach(creeps, function (c) {
                    that.memory['current-creeps'].push(c.name);
                });
            };
            var this_1 = this;
            for (var p in population) {
                _loop_1(p);
            }
        }
        return this.memory['current-creeps'];
    };
    PopulatedProcess.prototype._getCurrentCreeps = function () {
        return _.compact(_.map(this._getCurrentCreepsNames(), function (c) { return Game.creeps[c]; }));
    };
    PopulatedProcess.prototype.GetRootRoomProcess = function () {
        if (!_.isUndefined(this.memory['prpId'])) {
            return ProcessList_1.GetProcessById(this.memory['prpId']);
        }
        var rootRoomProcess = this.GetProcessInParentChain("/usr/bin/permanent-room");
        if (rootRoomProcess != null) {
            this.memory['prpId'] = rootRoomProcess.id;
        }
        return rootRoomProcess;
    };
    Object.defineProperty(PopulatedProcess.prototype, "ParentRoom", {
        get: function () {
            return Game.rooms[this.ParentRoomName];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PopulatedProcess.prototype, "ParentRoomName", {
        get: function () {
            if (_.isUndefined(this.memory['rrn'])) {
                var process_1 = this.GetRootRoomProcess();
                if (!process_1) {
                    return null;
                }
                this.memory['rrn'] = process_1._room.name;
            }
            return this.memory['rrn'];
        },
        enumerable: true,
        configurable: true
    });
    PopulatedProcess.prototype._evacuate = function (flag, ticksToLand) {
        var funnyMessages = [
            [],
            ['☝', '', '', '', '', '', '', '', '', '', ''],
            ['wtf', 'what?', 'where?'],
            ['oww', 'wtf', 'OMG'],
            ['is this..?', 'NUKE!!!', 'where?'],
            ['RUN!', 'where?', 'RUNRUNRUN!'],
            ['SOS', 'OMG NUKE', 'RUUUUUN!!!', '🏃'],
            ['🏃', 'WorldAtWar', 'RUN OMG...', 'Panic!', '🏃'],
            ['There!', '', '', '', '', '', '', '', '', '', ''],
            ['Where?', '', '', '', '', '', '', '', '', '', ''],
            ['THERE!!!', '', '', '', '', '', '', '', '', '', ''],
            ['Our home...', 'PANIC!!!', 'Bastards!', '🏃', '', '', '', ''],
            ['Faster!', 'OMG BOMB', 'Bastards!', 'RUN!!!', '🏃', 'Move!Move!', 'GoGoGo!']
        ];
        var tick = 50 - ticksToLand;
        var creeps = _.shuffle(this._getCurrentCreeps());
        var msgs = tick >= funnyMessages.length ? _.last(funnyMessages) : funnyMessages[tick];
        for (var _i = 0, creeps_1 = creeps; _i < creeps_1.length; _i++) {
            var creep = creeps_1[_i];
            if (tick >= 3) {
                if ((creep.room.name != this.ParentRoomName) && (creep.room.name != flag.pos.roomName)) {
                    creep.memory['processed'] = true;
                    continue;
                }
                if (creep.pos.getRangeTo(flag) <= 2) {
                    creep.memory['processed'] = true;
                    continue;
                }
                creep.memory['state'] = 1;
                if (creep.carry.energy > 0) {
                    if (creep.pos.isNearTo(this.ParentRoom.storage)) {
                        creep.transfer(this.ParentRoom.storage, RESOURCE_ENERGY);
                    }
                    else if (creep.pos.isNearTo(this.ParentRoom.terminal)) {
                        creep.transfer(this.ParentRoom.terminal, RESOURCE_ENERGY);
                    }
                    else if (creep.fatigue && creep.room.name == this.ParentRoomName) {
                        creep.drop(RESOURCE_ENERGY);
                    }
                }
                BehaviorBase_1.default.GoToPosition(creep, flag, { costMatrixType: CostMatrixType_1.CostMatrixType.HalfSpeed, range: 2 });
            }
            if (creep.room.name == this.ParentRoomName) {
                if (_.some(msgs)) {
                    creep.say(_.first(msgs), true);
                    msgs = _.tail(msgs);
                }
            }
            creep.memory['processed'] = true;
        }
    };
    return PopulatedProcess;
}(Process_1.Process));
exports.PopulatedProcess = PopulatedProcess;


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var TaskFactory_1 = __webpack_require__(75);
var TasksCache = null;
var TasksCacheUpdated = 0;
var TasksRepository = (function () {
    function TasksRepository() {
    }
    TasksRepository.GetById = function (id) {
        if (_.isUndefined(Memory['Tasks'])) {
            Memory['Tasks'] = [];
            return null;
        }
        TasksRepository.UpdateCache();
        return TasksCache[id] || null;
    };
    TasksRepository.QueryTasks = function (filter) {
        if (_.isUndefined(Memory['Tasks'])) {
            Memory['Tasks'] = [];
            return [];
        }
        TasksRepository.UpdateCache();
        var tasks = _(TasksCache).values();
        if (!!filter) {
            tasks = tasks.filter(filter);
        }
        return tasks.value();
    };
    TasksRepository.AddTask = function (task, unshift) {
        if (unshift === void 0) { unshift = false; }
        if (_.isUndefined(Memory['Tasks'])) {
            Memory['Tasks'] = [];
        }
        if (unshift) {
            Memory['Tasks'].unshift(task.dataObject);
        }
        else {
            Memory['Tasks'].push(task.dataObject);
        }
        Memory['Tasks'] = Memory['Tasks'].sort(function (a, b) { return a.priority - b.priority; });
        TasksCache[task.id] = task;
        TasksRepository.UpdateCache();
        return task;
    };
    TasksRepository.CleanupTask = function (task) {
        _.forEach(Memory['Tasks'], function (taskObject) {
            _.remove(taskObject['subtasks'], function (id) { return id == task.id; });
        });
        _.remove(Memory['Tasks'], function (t) { return t.id == task.id; });
        delete TasksCache[task.id];
    };
    TasksRepository.CleanupCompletedTasks = function () {
        var executing = true;
        while (executing) {
            var completedTasks = TasksRepository.QueryTasks(function (t) { return t.isCompleted(); });
            if (_.some(completedTasks)) {
                _.forEach(completedTasks, function (task) {
                    TasksRepository.CleanupTask(task);
                });
            }
            else {
                executing = false;
            }
        }
    };
    TasksRepository.UpdateCache = function () {
        if (_.isUndefined(TasksCache) ||
            (TasksCache == null) ||
            (Memory['Tasks'].length != _.size(TasksCache)) ||
            (100 < (Game.time - TasksCacheUpdated))) {
            console.log("Updating tasks cache (age " + (Game.time - TasksCacheUpdated) + ")");
            TasksCacheUpdated = Game.time;
            TasksCache = {};
            _.forEach(Memory['Tasks'], function (t) {
                TasksCache[t.id] = TaskFactory_1.default.CreateTask(t);
            });
        }
    };
    return TasksRepository;
}());
exports.default = TasksRepository;


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var RoomData_1 = __webpack_require__(248);
var RoomProvider = (function () {
    function RoomProvider() {
    }
    RoomProvider.GetRoomData = function (roomName) {
        if (_.isUndefined(Memory['RoomsCache'])) {
            Memory['RoomsCache'] = {};
        }
        var RoomsCache = Memory['RoomsCache'];
        if (!_.isUndefined(RoomsCache[roomName])) {
            var serializedData = JSON.parse(RoomsCache[roomName]);
            if ((Game.rooms[roomName] != null) && (serializedData.e < Game.time)) {
                var data_1 = new RoomData_1.RoomData(Game.rooms[roomName], roomName);
                RoomsCache[roomName] = JSON.stringify(data_1.Serialize());
                return data_1;
            }
            else {
                return new RoomData_1.RoomData(serializedData, roomName);
            }
        }
        if (_.isUndefined(Game.rooms[roomName])) {
            return null;
        }
        var data = new RoomData_1.RoomData(Game.rooms[roomName], roomName);
        RoomsCache[roomName] = JSON.stringify(data.Serialize());
        return data;
    };
    RoomProvider.UpdateRoom = function (room) {
        if (_.isUndefined(Memory['RoomsCache'])) {
            Memory['RoomsCache'] = {};
        }
        var RoomsCache = Memory['RoomsCache'];
        var data = new RoomData_1.RoomData(room, room.name);
        RoomsCache[room.name] = JSON.stringify(data.Serialize());
    };
    RoomProvider.UpdateRoomIfNecessary = function (room) {
        if (_.isUndefined(Memory['RoomsCache'])) {
            Memory['RoomsCache'] = {};
        }
        var RoomsCache = Memory['RoomsCache'];
        if (_.isUndefined(RoomsCache[room.name])) {
            RoomProvider.UpdateRoom(room);
            return true;
        }
        var serializedData = JSON.parse(RoomsCache[room.name]);
        if (serializedData.e < Game.time) {
            RoomProvider.UpdateRoom(room);
            return true;
        }
        return false;
    };
    return RoomProvider;
}());
exports.default = RoomProvider;


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Config_1 = __webpack_require__(8);
var Spawn_1 = __webpack_require__(3);
var CreepAnalyzer_1 = __webpack_require__(15);
var BehaviorBase_1 = __webpack_require__(2);
var TickCache_1 = __webpack_require__(1);
var CostMatrixType_1 = __webpack_require__(0);
var CreepsSet_1 = __webpack_require__(87);
var RoomProvider_1 = __webpack_require__(12);
var Role_Base_1 = __webpack_require__(4);
function hitsPercentageComparator(a, b) {
    return (a.hits / a.hitsMax - b.hits / b.hitsMax) || (a.hits - b.hits);
}
var FighterBase = (function (_super) {
    __extends(FighterBase, _super);
    function FighterBase() {
        var _this = _super.call(this) || this;
        _this[255] = _this._recycle;
        return _this;
    }
    FighterBase.prototype._getMyInitialPosition = function (creep) {
        return Role_Base_1.RoleBase._getMyAssignmentPosition(creep);
    };
    FighterBase.prototype._coordinatingHealing = function (creep) {
        var squad = BehaviorBase_1.default.GetSquad(creep);
        if ((squad == null) || (squad.length < 2)) {
            return false;
        }
        var healers = _.filter(squad, function (f) { return (f instanceof Creep) && f.getActiveBodyparts(HEAL) > 0; }).sort(function (a, b) { return b.getActiveBodyparts(HEAL) - a.getActiveBodyparts(HEAL); });
        var myPlace = healers.indexOf(creep);
        var damagedCreeps = _.filter(squad, function (c) { return (c.hits + 100) < c.hitsMax; }).sort(function (a, b) { return (b.hitsMax - b.hits) - (a.hitsMax - a.hits); });
        if ((myPlace < 0) || (myPlace > damagedCreeps.length)) {
            return false;
        }
        var healTarget = damagedCreeps[myPlace];
        if (!creep.pos.isNearTo(healTarget)) {
            return false;
        }
        var boostMultiplier = this._getMyHealBoostMultiplier();
        var healAmount = boostMultiplier * HEAL_POWER * creep.getActiveBodyparts(HEAL);
        if (healTarget.hits + healAmount / 2 > healTarget.hitsMax) {
            return false;
        }
        creep.heal(healTarget);
        return true;
    };
    FighterBase.prototype._healMySignificantDamage = function (creep) {
        var healParts = creep.getActiveBodyparts(HEAL);
        if (healParts == 0) {
            return false;
        }
        var boostMultiplier = this._getMyHealBoostMultiplier();
        var healAmount = boostMultiplier * HEAL_POWER * healParts;
        if (creep.hits + healAmount <= creep.hitsMax) {
            creep.heal(creep);
            return true;
        }
        return false;
    };
    FighterBase.prototype._healSignificantDamageNearby = function (creep) {
        var weakestAlly = this._findWeakestAlly(creep, 1);
        if (weakestAlly == null) {
            return false;
        }
        var healParts = creep.getActiveBodyparts(HEAL);
        if (healParts == 0) {
            return false;
        }
        var boostMultiplier = this._getMyHealBoostMultiplier();
        var healAmount = boostMultiplier * HEAL_POWER * healParts;
        if (weakestAlly.hits + healAmount / 2 <= weakestAlly.hitsMax) {
            creep.heal(weakestAlly);
            return true;
        }
        return false;
    };
    FighterBase.prototype._healMyMinorDamage = function (creep) {
        if (creep.hits < creep.hitsMax) {
            creep.heal(creep);
            return true;
        }
        return false;
    };
    FighterBase.prototype._healOthersNearby = function (creep) {
        var weakestAlly = this._findWeakestAlly(creep, 1);
        if (weakestAlly == null) {
            return false;
        }
        creep.heal(weakestAlly);
        return true;
    };
    FighterBase.prototype._healOthersAtDistance = function (creep) {
        var weakestAlly = this._findWeakestAlly(creep, 3);
        if (weakestAlly == null) {
            return false;
        }
        creep.rangedHeal(weakestAlly);
        return true;
    };
    FighterBase.prototype._overheal = function (creep) {
        var myFlag = this._getMyFlag(creep);
        if ((myFlag != null) && (myFlag.secondaryColor == COLOR_GREEN)) {
            var leader = BehaviorBase_1.default.GetSquadLeader(creep);
            if ((leader != null) && (creep.pos.isNearTo(leader))) {
                creep.heal(leader);
                return true;
            }
            var following = Game.creeps[creep.memory['following']];
            if ((following != null) && creep.pos.isNearTo(following)) {
                creep.heal(following);
                return true;
            }
        }
        creep.heal(creep);
        return true;
    };
    FighterBase.prototype._meleeAttack = function (creep, target) {
        if (target === void 0) { target = null; }
        var attackParts = creep.getActiveBodyparts(ATTACK);
        if (attackParts == 0) {
            return false;
        }
        var rampartsPositions = _.map(creep.room.find(FIND_HOSTILE_STRUCTURES, { filter: { structureType: STRUCTURE_RAMPART } }), function (s) { return s.pos.pack(); });
        var enemiesNear = _.filter(this._findEnemies(creep, 1), function (c) { return !_.includes(rampartsPositions, c.pos.pack()); });
        var meleesNear = _.filter(enemiesNear, function (c) { return c instanceof Creep && c.getActiveBodyparts(ATTACK) > 0; });
        var healersNear = _.filter(enemiesNear, function (c) { return c instanceof Creep && c.getActiveBodyparts(HEAL) > 0; });
        if (!_.isUndefined(creep.room.memory['focusFire'])) {
            var target_1 = Game.getObjectById(creep.room.memory['focusFire']);
            if ((target_1 != null) && (target_1.pos.getRangeTo(creep) <= 1)) {
                if ((target_1 instanceof Structure) || (target_1 instanceof PowerCreep) || (target_1.getActiveBodyparts(ATTACK) <= creep.getActiveBodyparts(ATTACK))) {
                    creep.attack(target_1);
                }
                if ((target_1 instanceof Creep) && (target_1.getActiveBodyparts(ATTACK) < 1) && !_.some(meleesNear) && !target_1.pos.isEdge() && this._raidIsReady(creep)) {
                    creep.move(creep.pos.getDirectionTo(target_1.pos));
                    delete creep.memory['_trav'];
                    creep.memory['moved'] = true;
                }
                return true;
            }
        }
        var currentTarget = (target != null) ? target : _.some(healersNear) ? _.last(healersNear) : this._findWeakestEnemy(creep, 1);
        if (currentTarget != null) {
            if (currentTarget instanceof PowerCreep || (currentTarget instanceof Creep && currentTarget.getActiveBodyparts(ATTACK) <= creep.getActiveBodyparts(ATTACK))) {
                creep.attack(currentTarget);
            }
            if (!currentTarget.pos.isEdge()) {
                var rampart = _.first(TickCache_1.__findInRange(currentTarget.pos, FIND_STRUCTURES, 0, { filter: function (s) { return s.structureType == STRUCTURE_RAMPART; } }));
                if (rampart == null) {
                    creep.room.memory['focusFire'] = currentTarget.id;
                    if (currentTarget instanceof PowerCreep || (currentTarget instanceof Creep && currentTarget.getActiveBodyparts(ATTACK) < 1) && !_.some(meleesNear) && this._raidIsReady(creep)) {
                        creep.move(creep.pos.getDirectionTo(currentTarget.pos));
                        delete creep.memory['_trav'];
                        creep.memory['moved'] = true;
                    }
                }
            }
            return true;
        }
        return false;
    };
    FighterBase.prototype._findTarget = function (position, chaseCreepsRange, stompConstructionRange) {
        var room = Game.rooms[position.roomName];
        if (!room) {
            return null;
        }
        var ignorePositions = _.map(room.find(FIND_FLAGS, { filter: { color: COLOR_GREY } }), function (s) { return s.pos.pack(); });
        var rampartsPositions = _.map(room.find(FIND_HOSTILE_STRUCTURES, { filter: function (s) { return (s.structureType == STRUCTURE_RAMPART) && (s.hits > 5000); } }), function (s) { return s.pos.pack(); });
        var flags = room.find(FIND_FLAGS, { filter: { color: COLOR_ORANGE } });
        var targets = [];
        _.forEach(flags, function (flag) {
            var roomObjects = flag.pos.look();
            _.forEach(roomObjects, function (roomObject) {
                if (chaseCreepsRange && roomObject.creep && !roomObject.creep.my && (position.getRangeTo(roomObject.creep) <= chaseCreepsRange)) {
                    targets.push(roomObject.creep);
                }
                if (chaseCreepsRange && roomObject.powerCreep && !roomObject.powerCreep.my && (position.getRangeTo(roomObject.powerCreep) <= chaseCreepsRange)) {
                    targets.push(roomObject.powerCreep);
                }
                if (roomObject.structure) {
                    targets.push(roomObject.structure);
                }
            });
        });
        var options = BehaviorBase_1.default.FormOptions(position, { costMatrixType: CostMatrixType_1.CostMatrixType.Military, range: 1 });
        options.ignoreCreeps = true;
        options.range = 1;
        if (_.some(targets)) {
            RoomProvider_1.default.UpdateRoom(room);
            var target = position.findClosestByPath(targets, options);
            if (target) {
                return target;
            }
        }
        if (stompConstructionRange) {
            var opts = BehaviorBase_1.default.FormOptions(position, { costMatrixType: CostMatrixType_1.CostMatrixType.Military });
            var site = position.findClosestByPath(FIND_CONSTRUCTION_SITES, {
                costCallback: opts.roomCallback,
                filter: function (cs) {
                    return !_.includes([STRUCTURE_EXTRACTOR, STRUCTURE_ROAD], cs.structureType) &&
                        (cs.progress >= (cs.progressTotal / 4)) &&
                        !cs.my &&
                        !_.contains(Config_1.alliedPlayers, cs.owner.username);
                }
            });
            if (site) {
                return site;
            }
        }
        if (chaseCreepsRange) {
            var isKiter_1 = function (c) {
                var moveParts = 0, nonMoveParts = 0;
                for (var _i = 0, _a = c.body; _i < _a.length; _i++) {
                    var part = _a[_i];
                    if (part.type == MOVE) {
                        moveParts++;
                    }
                    else {
                        nonMoveParts++;
                    }
                }
                return nonMoveParts * 5 <= moveParts;
            };
            var pc = position.findClosestByPath(FIND_HOSTILE_POWER_CREEPS, _.merge({}, options, { filter: function (c) { return !_.includes(rampartsPositions, c.pos.pack()) && (position.getRangeTo(c.pos) <= chaseCreepsRange); } }));
            if (pc) {
                return pc;
            }
            var creep = position.findClosestByPath(FIND_HOSTILE_CREEPS, _.merge({}, options, {
                filter: function (c) { return !isKiter_1(c) &&
                    !_.includes(rampartsPositions, c.pos.pack()) &&
                    !_.includes(ignorePositions, c.pos.pack()) &&
                    (position.getRangeTo(c.pos) <= chaseCreepsRange); }
            }));
            if (creep) {
                return creep;
            }
        }
        var unprotectedStructure = position.findClosestByPath(FIND_HOSTILE_STRUCTURES, _.merge({}, options, {
            filter: function (s) {
                return !_.includes([STRUCTURE_CONTROLLER, STRUCTURE_TERMINAL, STRUCTURE_STORAGE], s.structureType) &&
                    !_.includes(rampartsPositions, s.pos.pack()) &&
                    !_.includes(ignorePositions, s.pos.pack());
            }
        }));
        if (unprotectedStructure) {
            return unprotectedStructure;
        }
        var spawner = position.findClosestByPath(FIND_HOSTILE_STRUCTURES, _.merge({}, options, {
            filter: function (s) { return s.structureType == STRUCTURE_SPAWN; }
        }));
        if (spawner) {
            return spawner;
        }
        var controller = Game.rooms[position.roomName].controller;
        if (controller &&
            controller.owner &&
            !_.includes(Config_1.alliedPlayers, controller.owner.username)) {
            var unprotectedControllerTiles = controller.pos.around(1, { filter: function (p) { return p.isFree(); } });
            if (!_.some(unprotectedControllerTiles)) {
                var obstacles = controller.pos.findInRange(FIND_STRUCTURES, 1, _.merge({}, options, {
                    filter: function (s) { return _.includes([STRUCTURE_RAMPART].concat(OBSTACLE_OBJECT_TYPES), s.structureType) &&
                        !_.includes(ignorePositions, s.pos.pack()) &&
                        !_.includes([STRUCTURE_CONTROLLER, STRUCTURE_TERMINAL, STRUCTURE_STORAGE], s.structureType); }
                }));
                var obstacle = position.findClosestByPath(obstacles, options);
                if (obstacle) {
                    return obstacle;
                }
            }
        }
        return position.findClosestByPath(FIND_HOSTILE_STRUCTURES, _.merge({}, options, {
            filter: function (s) { return !_.includes([STRUCTURE_CONTROLLER, STRUCTURE_TERMINAL, STRUCTURE_STORAGE], s.structureType); }
        }));
    };
    FighterBase.prototype._attackFocusedStructure = function (creep, range) {
        var attackParts = creep.getActiveBodyparts(ATTACK);
        var rangedAttackParts = creep.getActiveBodyparts(RANGED_ATTACK);
        if (!attackParts && !rangedAttackParts) {
            return false;
        }
        var struct = this._findFocusedStructure(creep, range);
        if (!struct) {
            return false;
        }
        var r = creep.pos.getRangeTo(struct);
        if ((r <= 1) && (attackParts > 0)) {
            creep.attack(struct);
            this._drawAttackVisuals(creep, struct);
            return true;
        }
        if ((r <= 3) && (rangedAttackParts > 0)) {
            var massToRamparts = false;
            if (struct instanceof StructureRampart) {
                massToRamparts = TickCache_1.__findInRange(creep.pos, FIND_STRUCTURES, 2, { filter: function (s) { return s.structureType == STRUCTURE_RAMPART; } }).length > 2;
            }
            if (massToRamparts || ((r == 1) && (struct instanceof OwnedStructure))) {
                creep.rangedMassAttack();
            }
            else {
                creep.rangedAttack(struct);
            }
        }
        return true;
    };
    FighterBase.prototype._dismantleFocusedStructure = function (creep) {
        var workParts = creep.getActiveBodyparts(WORK);
        if (workParts == 0) {
            return false;
        }
        var struct = this._findFocusedStructure(creep, 1);
        if (struct == null) {
            return false;
        }
        creep.dismantle(struct);
        this._drawDismantleVisuals(creep, struct, workParts);
        return true;
    };
    FighterBase.prototype._getRangedAttackEfficiency = function (pos, enemies) {
        var result = 0;
        for (var i = 0; i < enemies.length; i++) {
            switch (pos.getRangeTo(enemies[i])) {
                case 1:
                    result += 10;
                    break;
                case 2:
                    result += 4;
                    break;
                case 3:
                    result += 1;
                    break;
                default:
                    break;
            }
        }
        return result;
    };
    FighterBase.prototype._rangedAttacks = function (creep) {
        var rangedAttackParts = creep.getActiveBodyparts(RANGED_ATTACK);
        if (rangedAttackParts == 0) {
            return false;
        }
        var flag = Game.flags[Spawn_1.getAssignmentByName(creep.name)];
        var rmaAllowed = (flag != null) && (flag.color == COLOR_RED);
        var focusId = creep.memory['focusFire'] || creep.room.memory['focusFire'];
        if (focusId) {
            var target = Game.getObjectById(focusId);
            if (target != null) {
                var range = target.pos.getRangeTo(creep);
                if (range <= 3) {
                    if (rmaAllowed && (range < 2)) {
                        creep.rangedMassAttack();
                    }
                    else {
                        creep.rangedAttack(target);
                    }
                    return true;
                }
            }
        }
        var ramparts = TickCache_1.__findInRange(creep.pos, FIND_STRUCTURES, 3, { filter: function (s) { return s.structureType == STRUCTURE_RAMPART; } });
        var defendedPositions = ramparts.map(function (r) { return r.pos.pack(); });
        var enemies = _.filter(this._findEnemies(creep, 3), function (c) { return !_.includes(defendedPositions, c.pos.pack()); });
        if (enemies.length == 0) {
            return false;
        }
        if (rmaAllowed && (this._getRangedAttackEfficiency(creep.pos, enemies.map(function (c) { return c.pos; })) >= 10)) {
            creep.rangedMassAttack();
        }
        else {
            enemies = enemies.sort(hitsPercentageComparator);
            creep.rangedAttack(_.first(enemies));
        }
        return true;
    };
    FighterBase.prototype._attackHostileStructuresNear = function (creep) {
        var attackParts = creep.getActiveBodyparts(ATTACK);
        var rangedAttackParts = creep.getActiveBodyparts(RANGED_ATTACK);
        if ((attackParts == 0) && (rangedAttackParts == 0)) {
            return false;
        }
        if (attackParts > 0) {
            var structure = this._findHostileStructure(creep, 1);
            if (structure != null) {
                creep.attack(structure);
                if (rangedAttackParts > 0) {
                    creep.rangedAttack(structure);
                }
                return true;
            }
        }
        if (rangedAttackParts > 0) {
            var structure = this._findHostileStructure(creep, 3);
            if (structure != null) {
                if (creep.pos.isNearTo(structure)) {
                    creep.rangedMassAttack();
                }
                else {
                    creep.rangedAttack(structure);
                }
                return true;
            }
        }
        return false;
    };
    FighterBase.prototype._dismantleEnemyStructureNear = function (creep) {
        var destination = Game.flags[Spawn_1.getAssignmentByName(creep.name)];
        if ((destination != null) && !_.includes([COLOR_RED, COLOR_ORANGE], destination.color)) {
            return;
        }
        var workParts = creep.getActiveBodyparts(WORK);
        if (workParts == 0) {
            return false;
        }
        var structure = this._findHostileStructure(creep, 1);
        if (structure == null) {
            return false;
        }
        creep.dismantle(structure);
        this._drawDismantleVisuals(creep, structure, workParts);
        return true;
    };
    FighterBase.prototype._disableRenew = function (creep) {
        creep.memory.renewAllowed = false;
        creep.notifyWhenAttacked(false);
        this._nextState(creep);
        return true;
    };
    FighterBase.prototype._findWeakestEnemy = function (creep, range) {
        var ramparts = TickCache_1.__findInRange(creep.pos, FIND_STRUCTURES, 3, { filter: function (s) { return s.structureType == STRUCTURE_RAMPART; } });
        var defendedPositions = ramparts.map(function (r) { return r.pos.pack(); });
        var enemiesNear = this._findEnemies(creep, range);
        var wat = _.filter(enemiesNear, function (c) { return !c.pos; });
        if (_.some(wat)) {
            console.log("WAT: " + JSON.stringify(wat));
            return null;
        }
        if (_.some(enemiesNear)) {
            enemiesNear = _.filter(enemiesNear, function (c) { return !_.includes(defendedPositions, c.pos.pack()); });
            enemiesNear = enemiesNear.sort(hitsPercentageComparator);
        }
        return _.first(enemiesNear);
    };
    FighterBase.prototype._findEnemies = function (creep, range) {
        var creeps = creep.pos.findInRange(FIND_HOSTILE_CREEPS, range, {
            filter: function (c) { return !c.owner || !_.includes(Config_1.alliedPlayers, c.owner.username); }
        });
        var powerCreeps = creep.pos.findInRange(FIND_HOSTILE_POWER_CREEPS, range, {
            filter: function (c) { return !c.owner || !_.includes(Config_1.alliedPlayers, c.owner.username); }
        });
        return creeps.concat(powerCreeps);
    };
    FighterBase.prototype._findEnemiesInRoom = function (creep) {
        return TickCache_1.__find(creep.room, FIND_HOSTILE_CREEPS, {
            filter: function (c) { return !_.includes(Config_1.alliedPlayers, c.owner.username); }
        });
    };
    FighterBase.prototype._findWeakestAlly = function (creep, range) {
        var allies = TickCache_1.__findInRange(creep.pos, FIND_CREEPS, range, {
            filter: function (c) { return (c.my || _.includes(Config_1.alliedPlayers, c.owner.username)) && (c.hits < c.hitsMax); }
        });
        if (allies.length > 1) {
            allies = allies.sort(hitsPercentageComparator);
        }
        return _.first(allies);
    };
    FighterBase.prototype._findFocusedStructure = function (creep, range) {
        if (range === void 0) { range = 1; }
        if (creep.room.controller != null && creep.room.controller.my) {
            return null;
        }
        if (creep.memory['focusedObject']) {
            var focusedObject = Game.getObjectById(creep.memory['focusedObject']);
            if (focusedObject && focusedObject instanceof Structure) {
                return focusedObject;
            }
        }
        var focusFlags = creep.pos.findInRange(FIND_FLAGS, range, { filter: function (f) { return f.color == COLOR_ORANGE; } });
        var structs = _.flatten(focusFlags.map(function (f) { return TickCache_1.__findInRange(f.pos, FIND_STRUCTURES, 0, {
            filter: function (s) { return !s.my && (_.isUndefined(s.owner) || (s.owner == null) || !_.includes(Config_1.alliedPlayers, s.owner.username)); }
        }); }));
        var owned = _.filter(structs, function (s) { return s instanceof OwnedStructure; });
        return creep.pos.findClosestByRange(owned) || creep.pos.findClosestByRange(structs);
    };
    FighterBase.prototype._findHostileStructure = function (creep, range) {
        return creep.pos.findClosestByRange(FIND_HOSTILE_STRUCTURES, {
            filter: function (s) {
                return (creep.pos.getRangeTo(s.pos) <= range) &&
                    !_.includes([STRUCTURE_CONTROLLER, STRUCTURE_STORAGE, STRUCTURE_TERMINAL], s.structureType) &&
                    (s.owner != null) &&
                    !_.includes(Config_1.alliedPlayers, s.owner.username);
            }
        });
    };
    FighterBase.prototype._drawDismantleVisuals = function (creep, struct, workParts) {
        var structToShow = _.first(struct.pos.lookFor(LOOK_STRUCTURES).filter(function (s) { return s.structureType == STRUCTURE_RAMPART; })) || struct;
        var hits = structToShow.hits;
        var totalPower = DISMANTLE_POWER * workParts * this._getMyDismantleBoostMultiplier();
        var ticks = hits / totalPower;
        var label = Math.floor(hits / 1000) + "k (" + Math.ceil(hits / totalPower) + " ticks)";
        var x = structToShow.pos.x + 0.5;
        var y = structToShow.pos.y - 0.5;
        var color = (ticks > creep.ticksToLive) ? '#ff8080' : '#80ff80';
        creep.room.visual.text(label, x, y, { align: 'left', size: 0.4, color: color, opacity: 0.8 });
    };
    FighterBase.prototype._drawAttackVisuals = function (creep, struct) {
        var structToShow = _.first(struct.pos.lookFor(LOOK_STRUCTURES).filter(function (s) { return s.structureType == STRUCTURE_RAMPART; })) || struct;
        var hits = structToShow.hits;
        var myThreat = CreepAnalyzer_1.CreepAnalyzer.GetThreatLevel(creep, false);
        var totalPower = myThreat.MeleeThreat;
        var ticks = hits / totalPower;
        var label = Math.floor(hits / 1000) + "k (" + Math.ceil(hits / totalPower) + " ticks)";
        var x = structToShow.pos.x + 0.5;
        var y = structToShow.pos.y - 0.5;
        var color = (ticks > creep.ticksToLive) ? '#ff8080' : '#80ff80';
        creep.room.visual.text(label, x, y, { align: 'left', size: 0.4, color: color, opacity: 0.8 });
    };
    FighterBase.prototype._makeFormation = function (creep) {
        var combatActions = this._combatActions(creep);
        if (!_.isUndefined(creep.memory['following'])) {
            return true;
        }
        var followers = BehaviorBase_1.default.GetFollowers(creep);
        if (!_.some(followers)) {
            return true;
        }
        var creepsNear = _.filter(followers, function (c) { return c.pos.isNearTo(creep); });
        var creepsAway = _.reject(followers, function (c) { return c.pos.isNearTo(creep); });
        if (!_.some(creepsAway)) {
            var nextState = 1 + this._getState(creep);
            for (var _i = 0, followers_1 = followers; _i < followers_1.length; _i++) {
                var c = followers_1[_i];
                if (Spawn_1.getRoleByName(creep.name) == Spawn_1.getRoleByName(c.name)) {
                    this._setState(c, nextState);
                }
            }
            return false;
        }
        for (var _a = 0, followers_2 = followers; _a < followers_2.length; _a++) {
            var c = followers_2[_a];
            if (Spawn_1.getRoleByName(creep.name) == Spawn_1.getRoleByName(c.name)) {
                this._setState(c, this._getState(creep));
            }
        }
        var blockedTiles = _.reduce(creepsNear, function (result, c) { result[c.pos.pack()] = 256; return result; }, {});
        for (var _b = 0, creepsAway_1 = creepsAway; _b < creepsAway_1.length; _b++) {
            var c = creepsAway_1[_b];
            console.log(c.name + " is away");
            BehaviorBase_1.default.GoToPosition(c, creep.pos, { costMatrixType: CostMatrixType_1.CostMatrixType.Military, addCosts: blockedTiles });
        }
        return combatActions;
    };
    FighterBase.prototype._fightInFormation = function (creep) {
        this._combatActions(creep);
        if (!_.isUndefined(creep.memory['following'])) {
            return true;
        }
        var squad = BehaviorBase_1.default.GetFollowers(creep);
        console.log("Squad of " + squad.length + " members");
        var healthy = _.every(squad, function (c) { return (c.hitsMax - c.hits) < 150; });
        var destination = Game.flags[Spawn_1.getAssignmentByName(creep.name)];
        var inPlace = creep.pos.isEqualTo(destination);
        if (!healthy) {
            var focused = this._findFocusedStructure(creep, 5);
            if (focused == null) {
                console.log("Nothing to step away from");
                return true;
            }
            var set = new CreepsSet_1.default(squad);
            BehaviorBase_1.default.Flee(set, focused, 5, CostMatrixType_1.CostMatrixType.Military);
            return true;
        }
        if (healthy && !inPlace) {
            var set = new CreepsSet_1.default(squad);
            BehaviorBase_1.default.GoToPosition(set, destination, { costMatrixType: CostMatrixType_1.CostMatrixType.Military });
            return true;
        }
        return true;
    };
    return FighterBase;
}(Role_Base_1.RoleBase));
exports.default = FighterBase;


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var TickCache_1 = __webpack_require__(1);
var Config_1 = __webpack_require__(8);
var defaultMineralsAmountInTerminal = 3000;
var rampartsLevels = [5000, 5000, 100000, 100000, 100000, 1000000, 1000000, 5000000, 10000000];
function getMineralsAmountInTerminal(roomName, mineral) {
    if (mineral == null) {
        return 0;
    }
    var room = Game.rooms[roomName];
    if (!_.isUndefined(room.memory['mineralsInTerminal'])) {
        return room.memory['mineralsInTerminal'][mineral] || defaultMineralsAmountInTerminal;
    }
    return defaultMineralsAmountInTerminal;
}
exports.getMineralsAmountInTerminal = getMineralsAmountInTerminal;
function findDiamond(room) {
    var diamondLink = _.first(TickCache_1.__find(room, FIND_STRUCTURES, {
        filter: function (s) { return (s.structureType == STRUCTURE_LINK) &&
            (TickCache_1.__findInRange(s.pos, FIND_STRUCTURES, 1, { filter: function (c) { return c.structureType == STRUCTURE_CONTAINER; } }).length == 2) &&
            (TickCache_1.__findInRange(s.pos, FIND_STRUCTURES, 5, { filter: function (c) { return c.structureType == STRUCTURE_EXTENSION; } }).length >= 30); }
    }));
    return diamondLink == null ? null : diamondLink.pos;
}
exports.findDiamond = findDiamond;
function BuildLinksConfig(room) {
    var allLinks = TickCache_1.__find(room, FIND_STRUCTURES, { filter: function (s) { return s.structureType == STRUCTURE_LINK; } });
    var headLinks = _.union(room.storage == null ? [] : TickCache_1.__findInRange(room.storage.pos, FIND_STRUCTURES, 2, { filter: function (s) { return s.structureType == STRUCTURE_LINK; } }), ((room.terminal == null) || ((room.storage != null) && (room.storage.pos.getRangeTo(room.terminal) > 2))) ? [] : TickCache_1.__findInRange(room.terminal.pos, FIND_STRUCTURES, 2, { filter: function (s) { return s.structureType == STRUCTURE_LINK; } }));
    var primaryHead = _.first(headLinks);
    if (primaryHead == null) {
        return {};
    }
    console.log(room.name + ": Head links found: " + headLinks);
    var sourceLinks = _.filter(_.without.apply(_, [allLinks].concat(headLinks)), function (l) { return _.some(TickCache_1.__findInRange(l.pos, FIND_SOURCES, 2)); });
    console.log(room.name + ": Source links found: " + sourceLinks);
    var controllerLink = _.filter(_.without.apply(_, [allLinks].concat(headLinks, sourceLinks)), function (l) { return l.pos.getRangeTo(l.room.controller) <= 4; });
    console.log(room.name + ": Controller links found: " + controllerLink);
    var chargeLinks = _.filter(_.without.apply(_, [allLinks].concat(headLinks, sourceLinks, controllerLink)), function (l) { return _.some(TickCache_1.__findInRange(l.pos, FIND_STRUCTURES, 1, { filter: function (s) { return s.structureType == STRUCTURE_EXTENSION; } })) &&
        _.some(TickCache_1.__findInRange(l.pos, FIND_STRUCTURES, 1, { filter: function (s) { return s.structureType == STRUCTURE_CONTAINER; } })); });
    console.log(room.name + ": Charge links found: " + chargeLinks);
    var otherLinks = _.without.apply(_, [allLinks].concat(headLinks, sourceLinks, controllerLink, chargeLinks));
    console.log(room.name + ": Other links: " + otherLinks);
    var result = {};
    for (var _i = 0, sourceLinks_1 = sourceLinks; _i < sourceLinks_1.length; _i++) {
        var src = sourceLinks_1[_i];
        result[src.id] = chargeLinks.map(function (l) { return l.id; }).concat(controllerLink.map(function (l) { return l.id; }), [primaryHead.id]);
    }
    for (var _a = 0, otherLinks_1 = otherLinks; _a < otherLinks_1.length; _a++) {
        var src = otherLinks_1[_a];
        result[src.id] = chargeLinks.map(function (l) { return l.id; }).concat(controllerLink.map(function (l) { return l.id; }), [primaryHead.id]);
    }
    for (var _b = 0, headLinks_1 = headLinks; _b < headLinks_1.length; _b++) {
        var head = headLinks_1[_b];
        result[head.id] = chargeLinks.map(function (l) { return l.id; }).concat(controllerLink.map(function (l) { return l.id; }));
    }
    return result;
}
exports.BuildLinksConfig = BuildLinksConfig;
function getLinksForRoom(room) {
    if (_.isUndefined(room.memory['linksConfig'])) {
        room.memory['linksConfig'] = BuildLinksConfig(room);
    }
    return room.memory['linksConfig'];
}
exports.getLinksForRoom = getLinksForRoom;
function clockwise(direction) {
    if (direction == TOP_RIGHT) {
        return "2446666882";
    }
    if (direction == BOTTOM_RIGHT) {
        return "4668888224";
    }
    if (direction == BOTTOM_LEFT) {
        return "6882222446";
    }
    if (direction == TOP_LEFT) {
        return "8224444668";
    }
}
function makeRoute(pos, path) {
    var offsetX = [0, 0, 1, 1, 1, 0, -1, -1, -1];
    var offsetY = [0, -1, -1, 0, 1, 1, 1, 0, -1];
    var firstDirection = parseInt(path[0]);
    return "" + _.padLeft((pos.x + offsetX[firstDirection]).toString(), 2, '0') + _.padLeft((pos.y + offsetY[firstDirection]).toString(), 2, '0') + path;
}
function BuildDiamondChargeRoutes(room) {
    var offsetX = [0, 0, 1, 1, 1, 0, -1, -1, -1];
    var offsetY = [0, -1, -1, 0, 1, 1, 1, 0, -1];
    var linkPosition = findDiamond(room);
    if (linkPosition == null) {
        return {};
    }
    var result = {};
    var routes = {};
    var endpoints = linkPosition.around(1, { filter: function (p) { return p.isWalkable(); } });
    for (var _i = 0, endpoints_1 = endpoints; _i < endpoints_1.length; _i++) {
        var endpoint = endpoints_1[_i];
        var direction = linkPosition.getDirectionTo(endpoint);
        var path = clockwise(direction);
        routes[endpoint.pack()] = "" + _.padLeft((endpoint.x + offsetX[direction]).toString(), 2, '0') + _.padLeft((endpoint.y + offsetY[direction]).toString(), 2, '0') + path;
    }
    result[linkPosition.pack()] = routes;
    return result;
}
function BuildBunkerAChargeRoutes(room) {
    if (room.storage == null) {
        return {};
    }
    var storagePos = room.storage.pos;
    var result = {};
    var pos1 = new RoomPosition(storagePos.x - 2, storagePos.y + 1, storagePos.roomName);
    var route1 = {};
    route1[pos1.pack()] = makeRoute(pos1, '4466888224');
    result[pos1.pack()] = route1;
    var pos2 = new RoomPosition(storagePos.x - 1, storagePos.y - 2, storagePos.roomName);
    var route2 = {};
    route2[pos2.pack()] = makeRoute(pos2, '6688222446');
    result[pos2.pack()] = route2;
    var pos3 = new RoomPosition(storagePos.x + 1, storagePos.y - 2, storagePos.roomName);
    var route3 = {};
    route3[pos3.pack()] = makeRoute(pos3, '4422888664');
    result[pos3.pack()] = route3;
    var posc1 = new RoomPosition(storagePos.x - 1, storagePos.y + 1, storagePos.roomName);
    var routec1 = {};
    routec1[posc1.pack()] = makeRoute(posc1, '54668882243');
    result[posc1.pack()] = routec1;
    var posc2 = new RoomPosition(storagePos.x - 1, storagePos.y - 1, storagePos.roomName);
    var routec2 = {};
    routec2[posc2.pack()] = makeRoute(posc2, '76882224465');
    result[posc2.pack()] = routec2;
    var posc3 = new RoomPosition(storagePos.x + 1, storagePos.y - 1, storagePos.roomName);
    var routec3 = {};
    routec3[posc3.pack()] = makeRoute(posc3, '34228886645');
    result[posc3.pack()] = routec3;
    return result;
}
function BuildBunkerBChargeRoutes(room) {
    var offsetX = [0, 0, 1, 1, 1, 0, -1, -1, -1];
    var offsetY = [0, -1, -1, 0, 1, 1, 1, 0, -1];
    if (room.storage == null) {
        return {};
    }
    var storagePos = room.storage.pos;
    var result = {};
    var pos1 = new RoomPosition(storagePos.x - 2, storagePos.y + 1, storagePos.roomName);
    var route1 = {};
    route1[pos1.pack()] = "" + _.padLeft((pos1.x + offsetX[4]).toString(), 2, '0') + _.padLeft((pos1.y + offsetY[4]).toString(), 2, '0') + "446668882224";
    result[pos1.pack()] = route1;
    var pos2 = new RoomPosition(storagePos.x - 1, storagePos.y - 2, storagePos.roomName);
    var route2 = {};
    route2[pos2.pack()] = "" + _.padLeft((pos2.x + offsetX[6]).toString(), 2, '0') + _.padLeft((pos2.y + offsetY[6]).toString(), 2, '0') + "668882224446";
    result[pos2.pack()] = route2;
    var pos3 = new RoomPosition(storagePos.x + 1, storagePos.y - 2, storagePos.roomName);
    var route3 = {};
    route3[pos3.pack()] = "" + _.padLeft((pos3.x + offsetX[4]).toString(), 2, '0') + _.padLeft((pos3.y + offsetY[4]).toString(), 2, '0') + "442228886664";
    result[pos3.pack()] = route3;
    return result;
}
function BuildBunkerCChargeRoutes(room) {
    if (room.storage == null) {
        return {};
    }
    var storagePos = room.storage.pos;
    var result = {};
    var pos1 = new RoomPosition(storagePos.x - 2, storagePos.y + 1, storagePos.roomName);
    var route1 = {};
    route1[pos1.pack()] = makeRoute(pos1, '44667881224');
    result[pos1.pack()] = route1;
    var pos2 = new RoomPosition(storagePos.x - 1, storagePos.y - 2, storagePos.roomName);
    var route2 = {};
    route2[pos2.pack()] = makeRoute(pos2, '66881223446');
    result[pos2.pack()] = route2;
    var pos3 = new RoomPosition(storagePos.x + 1, storagePos.y - 2, storagePos.roomName);
    var route3 = {};
    route3[pos3.pack()] = makeRoute(pos3, '44221887664');
    result[pos3.pack()] = route3;
    var posc1 = new RoomPosition(storagePos.x - 1, storagePos.y + 1, storagePos.roomName);
    var routec1 = {};
    routec1[posc1.pack()] = makeRoute(posc1, '546678812243');
    result[posc1.pack()] = routec1;
    var posc2 = new RoomPosition(storagePos.x - 1, storagePos.y - 1, storagePos.roomName);
    var routec2 = {};
    routec2[posc2.pack()] = makeRoute(posc2, '768812234465');
    result[posc2.pack()] = routec2;
    var posc3 = new RoomPosition(storagePos.x + 1, storagePos.y - 1, storagePos.roomName);
    var routec3 = {};
    routec3[posc3.pack()] = makeRoute(posc3, '342218876645');
    result[posc3.pack()] = routec3;
    return result;
}
function BuildChargeRoutes(room) {
    var config = Config_1.getRoomConfig(room.name);
    if (_.isUndefined(config)) {
        return {};
    }
    if (config.ChargeLayout == Config_1.ChargeLayout.Diamond) {
        return BuildDiamondChargeRoutes(room);
    }
    if (config.ChargeLayout == Config_1.ChargeLayout.BunkerA) {
        return BuildBunkerAChargeRoutes(room);
    }
    if (config.ChargeLayout == Config_1.ChargeLayout.BunkerB) {
        return BuildBunkerBChargeRoutes(room);
    }
    if (config.ChargeLayout == Config_1.ChargeLayout.BunkerC) {
        return BuildBunkerCChargeRoutes(room);
    }
    return {};
}
function getChargeRoutes(room) {
    if (_.isUndefined(room.memory['chargeRoutes'])) {
        room.memory['chargeRoutes'] = BuildChargeRoutes(room);
    }
    return room.memory['chargeRoutes'];
}
exports.getChargeRoutes = getChargeRoutes;
function getRampartToFortify(room) {
    var ignoreRamparts = room.memory['ignoreRamparts'] || [];
    var alreadyAssignedPos = _.filter(TickCache_1.__find(room, FIND_MY_CREEPS, {
        filter: function (c) { return !_.isUndefined(c.memory['taskPos']) && (c.memory['taskPos'] != null); }
    }))
        .map(function (c) { return c.memory['taskPos']; });
    var level = room.memory['rampartsLevel'] || rampartsLevels[room.controller.level];
    var allRamparts = TickCache_1.__find(room, FIND_STRUCTURES, {
        filter: function (s) { return (s.structureType == STRUCTURE_RAMPART) &&
            ((s.pos.getRangeTo(s.room.storage) < 7) ||
                (s.hits < 1000000) ||
                (s.pos.getRangeTo(s.room.controller) == 1)) &&
            ((room.controller.level == 8) || (s.hits < level)) &&
            !_.includes(ignoreRamparts, s.id) &&
            !_.includes(alreadyAssignedPos, s.pos.pack()); }
    });
    if (!_.some(allRamparts)) {
        return null;
    }
    var plannedDamage = {};
    var nukes = TickCache_1.__find(room, FIND_NUKES);
    _.forEach(nukes, function (n) {
        var key = n.pos.pack();
        plannedDamage[key] = (plannedDamage[key] || 0) + 5000000;
        _.forEach(n.pos.around(2), function (p) {
            var k = p.pack();
            plannedDamage[k] = (plannedDamage[k] || 0) + 5000000;
        });
    });
    var worst = _.min(allRamparts, function (rampart) { return rampart.hits - (plannedDamage[rampart.pos.pack()] || 0); });
    return worst;
}
exports.getRampartToFortify = getRampartToFortify;
function ignoreConstructionSite(pos) {
    var room = Game.rooms[pos.roomName];
    if (room == null) {
        return;
    }
    var ignored = room.memory['ignoredConstructions'] || [];
    ignored.push(pos.pack());
    room.memory['ignoredConstructions'] = ignored;
    console.log("adding " + pos + " to ignores");
}
exports.ignoreConstructionSite = ignoreConstructionSite;
function unignoreConstructionSite(pos) {
    var room = Game.rooms[pos.roomName];
    if (room == null) {
        return;
    }
    var packed = pos.pack();
    var ignored = room.memory['ignoredConstructions'] || [];
    var was = ignored.length;
    var newIgnores = _.filter(ignored, function (p) { return p != packed; });
    console.log("unignoring " + pos + ", was " + was + ", is " + newIgnores.length);
    room.memory['ignoredConstructions'] = newIgnores;
}
exports.unignoreConstructionSite = unignoreConstructionSite;
function getIgnoredConstructionPositions(room) {
    var ignored = room.memory['ignoredConstructions'] || [];
    return ignored.map(function (i) { return RoomPosition.unpack(i); });
}
exports.getIgnoredConstructionPositions = getIgnoredConstructionPositions;


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var CreepAnalyzer = (function () {
    function CreepAnalyzer() {
    }
    CreepAnalyzer.GetThreatNumber = function (levels) {
        return (levels.MeleeThreat + levels.MeleeThreat + levels.HealThreat + levels.DismantleThreat) * levels.EffectiveHp;
    };
    CreepAnalyzer.GetThreatLevelForMany = function (creeps, aliveOnly) {
        var totalThreat = {
            MeleeThreat: 0,
            RangedThreat: 0,
            DismantleThreat: 0,
            HealThreat: 0,
            EffectiveHp: 0,
        };
        _.forEach(creeps, function (creep) {
            var creepThreat = CreepAnalyzer.GetThreatLevel(creep, aliveOnly);
            totalThreat.MeleeThreat += creepThreat.MeleeThreat;
            totalThreat.RangedThreat += creepThreat.RangedThreat;
            totalThreat.DismantleThreat += creepThreat.DismantleThreat;
            totalThreat.HealThreat += creepThreat.HealThreat;
            totalThreat.EffectiveHp += creepThreat.EffectiveHp;
        });
        return totalThreat;
    };
    CreepAnalyzer.GetThreatLevel = function (creep, aliveOnly) {
        var totalThreat = {
            MeleeThreat: 0,
            RangedThreat: 0,
            DismantleThreat: 0,
            HealThreat: 0,
            EffectiveHp: 0,
        };
        for (var _i = 0, _a = creep.body; _i < _a.length; _i++) {
            var b = _a[_i];
            var partThreat = CreepAnalyzer.GetBodyPartThreat(b, aliveOnly);
            if (partThreat != null) {
                totalThreat.MeleeThreat += partThreat.MeleeThreat;
                totalThreat.RangedThreat += partThreat.RangedThreat;
                totalThreat.DismantleThreat += partThreat.DismantleThreat;
                totalThreat.HealThreat += partThreat.HealThreat;
                totalThreat.EffectiveHp += partThreat.EffectiveHp;
            }
        }
        return totalThreat;
    };
    CreepAnalyzer.GetBodyPartThreat = function (part, aliveOnly) {
        if (aliveOnly && (part.hits == 0)) {
            return {
                MeleeThreat: 0,
                RangedThreat: 0,
                DismantleThreat: 0,
                HealThreat: 0,
                EffectiveHp: 0,
            };
        }
        switch (part.type) {
            case ATTACK:
                return CreepAnalyzer.GetAttackThreat(part, aliveOnly);
            case RANGED_ATTACK:
                return CreepAnalyzer.GetRangedAttackThreat(part, aliveOnly);
            case WORK:
                return CreepAnalyzer.GetWorkAttackThreat(part, aliveOnly);
            case HEAL:
                return CreepAnalyzer.GetHealThreat(part, aliveOnly);
            case TOUGH:
                return CreepAnalyzer.GetToughThreat(part, aliveOnly);
            default:
                return {
                    MeleeThreat: 0,
                    RangedThreat: 0,
                    DismantleThreat: 0,
                    HealThreat: 0,
                    EffectiveHp: aliveOnly ? part.hits : 100,
                };
        }
    };
    CreepAnalyzer.GetAttackThreat = function (part, aliveOnly) {
        var base = 30;
        var threat = base;
        switch (part.boost) {
            case 'XUH2O':
                threat = 4 * base;
                break;
            case 'UH2O':
                threat = 3 * base;
                break;
            case 'UH':
                threat = 2 * base;
                break;
            default:
                break;
        }
        return {
            MeleeThreat: threat,
            RangedThreat: 0,
            DismantleThreat: 0,
            HealThreat: 0,
            EffectiveHp: aliveOnly ? part.hits : 100,
        };
    };
    CreepAnalyzer.GetRangedAttackThreat = function (part, aliveOnly) {
        var base = 10;
        var threat = base;
        switch (part.boost) {
            case 'XKHO2':
                threat = 4 * base;
                break;
            case 'KHO2':
                threat = 3 * base;
                break;
            case 'KO':
                threat = 2 * base;
                break;
            default:
                break;
        }
        return {
            MeleeThreat: 0,
            RangedThreat: threat,
            DismantleThreat: 0,
            HealThreat: 0,
            EffectiveHp: aliveOnly ? part.hits : 100,
        };
    };
    CreepAnalyzer.GetWorkAttackThreat = function (part, aliveOnly) {
        var base = 50;
        var threat = base;
        switch (part.boost) {
            case 'XZH2O':
                threat = 4 * base;
                break;
            case 'ZH2O':
                threat = 3 * base;
                break;
            case 'ZH':
                threat = 2 * base;
                break;
            default:
                break;
        }
        return {
            MeleeThreat: 0,
            RangedThreat: 0,
            DismantleThreat: threat,
            HealThreat: 0,
            EffectiveHp: aliveOnly ? part.hits : 100,
        };
    };
    CreepAnalyzer.GetToughThreat = function (part, aliveOnly) {
        var threat;
        switch (part.boost) {
            case 'XGHO2':
                threat = 3.34;
                break;
            case 'GHO2':
                threat = 2;
                break;
            case 'GO':
                threat = 1.44;
                break;
            default:
                threat = 1;
                break;
        }
        return {
            MeleeThreat: 0,
            RangedThreat: 0,
            DismantleThreat: 0,
            HealThreat: 0,
            EffectiveHp: threat * (aliveOnly ? part.hits : 100),
        };
    };
    CreepAnalyzer.GetHealThreat = function (part, aliveOnly) {
        var base = 12;
        var threat = base;
        switch (part.boost) {
            case 'XLHO2':
                threat = 4 * base;
                break;
            case 'LHO2':
                threat = 3 * base;
                break;
            case 'LO':
                threat = 2 * base;
                break;
            default:
                break;
        }
        return {
            MeleeThreat: 0,
            RangedThreat: 0,
            DismantleThreat: 0,
            HealThreat: threat,
            EffectiveHp: aliveOnly ? part.hits : 100,
        };
    };
    return CreepAnalyzer;
}());
exports.CreepAnalyzer = CreepAnalyzer;


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Traveler = (function () {
    function Traveler() {
    }
    Traveler.travelTo = function (creep, destination, options) {
        if (options === void 0) { options = {}; }
        if (!destination) {
            return ERR_INVALID_ARGS;
        }
        if (creep.fatigue > 0) {
            Traveler.circle(creep.pos, "aqua", .3);
            return ERR_BUSY;
        }
        destination = this.normalizePos(destination);
        var rangeToDestination = creep.pos.getRangeTo(destination);
        if (options.range && rangeToDestination <= options.range) {
            return OK;
        }
        else if (rangeToDestination <= 1) {
            if (rangeToDestination === 1 && !options.range) {
                var direction = creep.pos.getDirectionTo(destination);
                if (options.returnData) {
                    options.returnData.nextPos = destination;
                    options.returnData.path = direction.toString();
                }
                return creep.move(direction);
            }
            return OK;
        }
        if (!creep.memory._trav) {
            delete creep.memory._travel;
            creep.memory._trav = {};
        }
        var travelData = creep.memory._trav;
        var state = this.deserializeState(travelData, destination);
        if (this.isStuck(creep, state)) {
            state.stuckCount++;
            Traveler.circle(creep.pos, "magenta", state.stuckCount * .2);
        }
        else {
            state.stuckCount = 0;
        }
        if (!options.stuckValue) {
            options.stuckValue = DEFAULT_STUCK_VALUE;
        }
        if (state.stuckCount >= options.stuckValue && Math.random() > .5) {
            options.ignoreCreeps = false;
            options.freshMatrix = true;
            delete travelData.path;
        }
        if (!this.samePos(state.destination, destination)) {
            if (options.movingTarget && state.destination.isNearTo(destination)) {
                travelData.path += state.destination.getDirectionTo(destination);
                state.destination = destination;
            }
            else {
                delete travelData.path;
            }
        }
        if (options.repath && Math.random() < options.repath) {
            delete travelData.path;
        }
        var newPath = false;
        if (!travelData.path) {
            newPath = true;
            if (creep.spawning) {
                return ERR_BUSY;
            }
            state.destination = destination;
            var cpu = Game.cpu.getUsed();
            var ret = this.findTravelPath(creep.pos, destination, options);
            var cpuUsed = Game.cpu.getUsed() - cpu;
            state.cpu = _.round(cpuUsed + state.cpu);
            var color = "orange";
            if (ret.incomplete) {
                color = "red";
            }
            if (options.returnData) {
                options.returnData.pathfinderReturn = ret;
            }
            travelData.path = Traveler.serializePath(creep.pos, ret.path, color);
            state.stuckCount = 0;
        }
        this.serializeState(creep, destination, state, travelData);
        if (!travelData.path || travelData.path.length === 0) {
            return ERR_NO_PATH;
        }
        if (state.stuckCount === 0 && !newPath) {
            travelData.path = travelData.path.substr(1);
        }
        var nextDirection = parseInt(travelData.path[0], 10);
        if (options.returnData) {
            if (nextDirection) {
                var nextPos = Traveler.positionAtDirection(creep.pos, nextDirection);
                if (nextPos) {
                    options.returnData.nextPos = nextPos;
                }
            }
            options.returnData.state = state;
            options.returnData.path = travelData.path;
        }
        return creep.move(nextDirection);
    };
    Traveler.normalizePos = function (destination) {
        if (!(destination instanceof RoomPosition)) {
            return destination.pos;
        }
        return destination;
    };
    Traveler.checkAvoid = function (roomName) {
        return Memory.rooms[roomName] && Memory.rooms[roomName].avoid;
    };
    Traveler.isExit = function (pos) {
        return pos.x === 0 || pos.y === 0 || pos.x === 49 || pos.y === 49;
    };
    Traveler.sameCoord = function (pos1, pos2) {
        return pos1.x === pos2.x && pos1.y === pos2.y;
    };
    Traveler.samePos = function (pos1, pos2) {
        return this.sameCoord(pos1, pos2) && pos1.roomName === pos2.roomName;
    };
    Traveler.circle = function (pos, color, opacity) {
        new RoomVisual(pos.roomName).circle(pos.x, pos.y, {
            radius: .45, fill: "transparent", stroke: color, strokeWidth: .15, opacity: opacity
        });
    };
    Traveler.updateRoomStatus = function (room) {
        if (!room) {
            return;
        }
        if (room.controller) {
            if (room.controller.owner && !room.controller.my) {
                room.memory.avoid = 1;
            }
            else {
                delete room.memory.avoid;
            }
        }
    };
    Traveler.findTravelPath = function (origin, destination, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        _.defaults(options, {
            ignoreCreeps: true,
            maxOps: DEFAULT_MAXOPS,
            range: 1,
        });
        if (options.movingTarget) {
            options.range = 0;
        }
        origin = this.normalizePos(origin);
        destination = this.normalizePos(destination);
        var originRoomName = origin.roomName;
        var destRoomName = destination.roomName;
        var roomDistance = Game.map.getRoomLinearDistance(origin.roomName, destination.roomName);
        var allowedRooms = options.route;
        if (!allowedRooms && (options.useFindRoute || (options.useFindRoute === undefined && roomDistance > 2))) {
            var route = this.findRoute(origin.roomName, destination.roomName, options);
            if (route) {
                allowedRooms = route;
            }
        }
        var roomsSearched = 0;
        var callback = function (roomName) {
            if (allowedRooms) {
                if (!allowedRooms[roomName]) {
                    return false;
                }
            }
            else if (!options.allowHostile && Traveler.checkAvoid(roomName)
                && roomName !== destRoomName && roomName !== originRoomName) {
                return false;
            }
            roomsSearched++;
            var matrix;
            var room = Game.rooms[roomName];
            if (room) {
                if (options.ignoreStructures) {
                    matrix = new PathFinder.CostMatrix();
                    if (!options.ignoreCreeps) {
                        Traveler.addCreepsToMatrix(room, matrix);
                    }
                }
                else if (options.ignoreCreeps || roomName !== originRoomName) {
                    matrix = _this.getStructureMatrix(room);
                }
                else {
                    matrix = _this.getCreepMatrix(room);
                }
                if (options.obstacles) {
                    matrix = matrix.clone();
                    for (var _i = 0, _a = options.obstacles; _i < _a.length; _i++) {
                        var obstacle = _a[_i];
                        if (obstacle.pos.roomName !== roomName) {
                            continue;
                        }
                        matrix.set(obstacle.pos.x, obstacle.pos.y, 0xff);
                    }
                }
            }
            if (options.roomCallback) {
                if (!matrix) {
                    matrix = new PathFinder.CostMatrix();
                }
                var outcome = options.roomCallback(roomName, matrix.clone());
                if (outcome !== undefined) {
                    return outcome;
                }
            }
            return matrix;
        };
        var ret = PathFinder.search(origin, { pos: destination, range: options.range }, {
            maxOps: options.maxOps,
            maxRooms: options.maxRooms,
            heuristicWeight: 1.2,
            plainCost: options.offRoad ? 1 : options.ignoreRoads ? 1 : 2,
            swampCost: options.offRoad ? 1 : options.ignoreRoads ? 5 : 10,
            roomCallback: callback,
        });
        if (ret.incomplete && options.ensurePath) {
            if (options.useFindRoute === undefined) {
                if (roomDistance <= 2) {
                    console.log("TRAVELER: path failed without findroute, trying with options.useFindRoute = true");
                    console.log("from: " + origin + ", destination: " + destination);
                    options.useFindRoute = true;
                    ret = this.findTravelPath(origin, destination, options);
                    console.log("TRAVELER: second attempt was " + (ret.incomplete ? "not " : "") + "successful");
                    return ret;
                }
            }
            else {
            }
        }
        return ret;
    };
    Traveler.findRoute = function (origin, destination, options) {
        if (options === void 0) { options = {}; }
        var restrictDistance = options.restrictDistance || Game.map.getRoomLinearDistance(origin, destination) + 10;
        var allowedRooms = (_a = {}, _a[origin] = true, _a[destination] = true, _a);
        var highwayBias = 1;
        if (options.preferHighway) {
            highwayBias = 2.5;
            if (options.highwayBias) {
                highwayBias = options.highwayBias;
            }
        }
        var ret = Game.map.findRoute(origin, destination, {
            routeCallback: function (roomName) {
                if (options.routeCallback) {
                    var outcome = options.routeCallback(roomName);
                    if (outcome !== undefined) {
                        return outcome;
                    }
                }
                if (Game.map.getRoomStatus(roomName).status != Game.map.getRoomStatus(origin).status) {
                    return Number.POSITIVE_INFINITY;
                }
                var rangeToRoom = Game.map.getRoomLinearDistance(origin, roomName);
                if (rangeToRoom > restrictDistance) {
                    return Number.POSITIVE_INFINITY;
                }
                if (!options.allowHostile && Traveler.checkAvoid(roomName) &&
                    roomName !== destination && roomName !== origin) {
                    return Number.POSITIVE_INFINITY;
                }
                var parsed;
                if (options.preferHighway) {
                    parsed = /^[WE]([0-9]+)[NS]([0-9]+)$/.exec(roomName);
                    var isHighway = (parsed[1] % 10 === 0) || (parsed[2] % 10 === 0);
                    if (isHighway) {
                        return 1;
                    }
                }
                if (!options.allowSK && !Game.rooms[roomName]) {
                    if (!parsed) {
                        parsed = /^[WE]([0-9]+)[NS]([0-9]+)$/.exec(roomName);
                    }
                    var fMod = parsed[1] % 10;
                    var sMod = parsed[2] % 10;
                    var isSK = !(fMod === 5 && sMod === 5) &&
                        ((fMod >= 4) && (fMod <= 6)) &&
                        ((sMod >= 4) && (sMod <= 6));
                    if (isSK) {
                        return 10 * highwayBias;
                    }
                }
                return highwayBias;
            },
        });
        if (!_.isArray(ret)) {
            console.log("couldn't findRoute to " + destination);
            return;
        }
        for (var _i = 0, ret_1 = ret; _i < ret_1.length; _i++) {
            var value = ret_1[_i];
            allowedRooms[value.room] = true;
        }
        return allowedRooms;
        var _a;
    };
    Traveler.routeDistance = function (origin, destination) {
        var linearDistance = Game.map.getRoomLinearDistance(origin, destination);
        if (linearDistance >= 32) {
            return linearDistance;
        }
        var allowedRooms = this.findRoute(origin, destination);
        if (allowedRooms) {
            return Object.keys(allowedRooms).length;
        }
    };
    Traveler.getStructureMatrix = function (room) {
        var matrix = new PathFinder.CostMatrix();
        return Traveler.addStructuresToMatrix(room, matrix, 1);
    };
    Traveler.getCreepMatrix = function (room) {
        return Traveler.addCreepsToMatrix(room, this.getStructureMatrix(room));
    };
    Traveler.addStructuresToMatrix = function (room, matrix, roadCost) {
        var impassibleStructures = [];
        for (var _i = 0, _a = room.find(FIND_STRUCTURES); _i < _a.length; _i++) {
            var structure = _a[_i];
            if (structure instanceof StructureRampart) {
                if (!structure.my) {
                    impassibleStructures.push(structure);
                }
            }
            else if (structure instanceof StructureRoad) {
                matrix.set(structure.pos.x, structure.pos.y, roadCost);
            }
            else if (structure instanceof StructureContainer) {
                matrix.set(structure.pos.x, structure.pos.y, 1);
            }
            else {
                impassibleStructures.push(structure);
            }
        }
        for (var _b = 0, _c = room.find(FIND_MY_CONSTRUCTION_SITES); _b < _c.length; _b++) {
            var site = _c[_b];
            if (site.structureType === STRUCTURE_CONTAINER || site.structureType === STRUCTURE_ROAD
                || site.structureType === STRUCTURE_RAMPART) {
                continue;
            }
            matrix.set(site.pos.x, site.pos.y, 0xff);
        }
        for (var _d = 0, impassibleStructures_1 = impassibleStructures; _d < impassibleStructures_1.length; _d++) {
            var structure = impassibleStructures_1[_d];
            matrix.set(structure.pos.x, structure.pos.y, 0xff);
        }
        return matrix;
    };
    Traveler.addCreepsToMatrix = function (room, matrix) {
        room.find(FIND_CREEPS).forEach(function (creep) { return matrix.set(creep.pos.x, creep.pos.y, 0xff); });
        return matrix;
    };
    Traveler.serializePath = function (startPos, path, color) {
        if (color === void 0) { color = "orange"; }
        var serializedPath = "";
        var lastPosition = startPos;
        this.circle(startPos, color);
        for (var _i = 0, path_1 = path; _i < path_1.length; _i++) {
            var position = path_1[_i];
            if (position.roomName === lastPosition.roomName) {
                serializedPath += lastPosition.getDirectionTo(position);
            }
            lastPosition = position;
        }
        return serializedPath;
    };
    Traveler.positionAtDirection = function (origin, direction) {
        var offsetX = [0, 0, 1, 1, 1, 0, -1, -1, -1];
        var offsetY = [0, -1, -1, 0, 1, 1, 1, 0, -1];
        var x = origin.x + offsetX[direction];
        var y = origin.y + offsetY[direction];
        if (x > 49 || x < 0 || y > 49 || y < 0) {
            return;
        }
        return new RoomPosition(x, y, origin.roomName);
    };
    Traveler.patchMemory = function (cleanup) {
        if (cleanup === void 0) { cleanup = false; }
        if (!Memory.empire) {
            return;
        }
        if (!Memory.empire.hostileRooms) {
            return;
        }
        var count = 0;
        for (var roomName in Memory.empire.hostileRooms) {
            if (Memory.empire.hostileRooms[roomName]) {
                if (!Memory.rooms[roomName]) {
                    Memory.rooms[roomName] = {};
                }
                Memory.rooms[roomName].avoid = 1;
                count++;
            }
            if (cleanup) {
                delete Memory.empire.hostileRooms[roomName];
            }
        }
        if (cleanup) {
            delete Memory.empire.hostileRooms;
        }
        console.log("TRAVELER: room avoidance data patched for " + count + " rooms");
    };
    Traveler.deserializeState = function (travelData, destination) {
        var state = {};
        if (travelData.state) {
            state.lastCoord = { x: travelData.state[STATE_PREV_X], y: travelData.state[STATE_PREV_Y] };
            state.cpu = travelData.state[STATE_CPU];
            state.stuckCount = travelData.state[STATE_STUCK];
            state.destination = new RoomPosition(travelData.state[STATE_DEST_X], travelData.state[STATE_DEST_Y], travelData.state[STATE_DEST_ROOMNAME]);
        }
        else {
            state.cpu = 0;
            state.destination = destination;
        }
        return state;
    };
    Traveler.serializeState = function (creep, destination, state, travelData) {
        travelData.state = [creep.pos.x, creep.pos.y, state.stuckCount, state.cpu, destination.x, destination.y,
            destination.roomName];
    };
    Traveler.isStuck = function (creep, state) {
        var stuck = false;
        if (state.lastCoord !== undefined) {
            if (this.sameCoord(creep.pos, state.lastCoord)) {
                stuck = true;
            }
            else if (this.isExit(creep.pos) && this.isExit(state.lastCoord)) {
                stuck = true;
            }
        }
        return stuck;
    };
    return Traveler;
}());
exports.Traveler = Traveler;
var DEFAULT_MAXOPS = 20000;
var DEFAULT_STUCK_VALUE = 2;
var STATE_PREV_X = 0;
var STATE_PREV_Y = 1;
var STATE_STUCK = 2;
var STATE_CPU = 3;
var STATE_DEST_X = 4;
var STATE_DEST_Y = 5;
var STATE_DEST_ROOMNAME = 6;


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var BehaviorBase_1 = __webpack_require__(2);
var TaskManager_1 = __webpack_require__(7);
var CostMatrixType_1 = __webpack_require__(0);
var PowerCreepProcess_1 = __webpack_require__(129);
var OperatorProcess = (function (_super) {
    __extends(OperatorProcess, _super);
    function OperatorProcess() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(OperatorProcess.prototype, "class", {
        get: function () {
            return "operator";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OperatorProcess.prototype, "needOperateLabs", {
        get: function () {
            if (!this.room) {
                return false;
            }
            return !!TaskManager_1.default.QueryProduceTaskForRoom(this.room);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OperatorProcess.prototype, "needOperatePower", {
        get: function () {
            if (!this.room) {
                return false;
            }
            return !!this.room.terminal.store[RESOURCE_POWER] && this.room.storage.store[RESOURCE_ENERGY] > 200000;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OperatorProcess.prototype, "needOperateFactory", {
        get: function () {
            if (!this.PowerCreep.powers[PWR_OPERATE_FACTORY]) {
                return false;
            }
            if (!this.factory || this.factory.level && this.factory.level != this.PowerCreep.powers[PWR_OPERATE_FACTORY].level) {
                return false;
            }
            var factoryTask = TaskManager_1.default.QueryFactoryTaskForRoom(this.room);
            if (!factoryTask) {
                return false;
            }
            return factoryTask.commodity &&
                COMMODITIES[factoryTask.commodity] &&
                COMMODITIES[factoryTask.commodity].level &&
                COMMODITIES[factoryTask.commodity].level == this.PowerCreep.powers[PWR_OPERATE_FACTORY].level;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OperatorProcess.prototype, "factory", {
        get: function () {
            var _this = this;
            return this.GetCachedObject('factory', function () { return _.find(_this.room.find(FIND_MY_STRUCTURES), { structureType: STRUCTURE_FACTORY }); });
        },
        enumerable: true,
        configurable: true
    });
    OperatorProcess.prototype.GetOps = function () {
        var opsStore = this.room.terminal && this.room.terminal.store[RESOURCE_OPS] ? this.room.terminal : this.room.storage;
        if (!opsStore || !opsStore.store[RESOURCE_OPS]) {
            this.PowerCreep.say('ops :(');
            return false;
        }
        if (this.PowerCreep.pos.isNearTo(opsStore)) {
            this.PowerCreep.withdraw(opsStore, RESOURCE_OPS);
            return true;
        }
        BehaviorBase_1.default.GoToPosition(this.PowerCreep, opsStore, { costMatrixType: CostMatrixType_1.CostMatrixType.Offroad, range: 1 });
        return true;
    };
    OperatorProcess.prototype.OperateSources = function () {
        var _this = this;
        var sources = this.room.find(FIND_SOURCES);
        var needRegen = _(sources).filter(function (s) {
            var effect = _.find(s.effects, { power: PWR_REGEN_SOURCE });
            return (!effect || (effect.ticksRemaining <= _this.PowerCreep.pos.getRangeTo(s)));
        }).first();
        if (!needRegen) {
            return false;
        }
        if (this.PowerCreep.pos.getRangeTo(needRegen) > 3) {
            BehaviorBase_1.default.GoToPosition(this.PowerCreep, needRegen, { costMatrixType: CostMatrixType_1.CostMatrixType.Offroad, range: 3 });
            return true;
        }
        if (!this.PowerCreep.powers[PWR_REGEN_SOURCE].cooldown) {
            this.PowerCreep.usePower(PWR_REGEN_SOURCE, needRegen);
        }
        return true;
    };
    OperatorProcess.prototype.OperateLabs = function () {
        if (!this.needOperateLabs) {
            return false;
        }
        if (this.PowerCreep.room.name != this.room.name) {
            return false;
        }
        if (this.PowerCreep.powers[PWR_OPERATE_LAB].cooldown) {
            return false;
        }
        if (this.PowerCreep.carry[RESOURCE_OPS] < POWER_INFO[PWR_OPERATE_LAB].ops) {
            return this.GetOps();
        }
        var produceTask = TaskManager_1.default.QueryProduceTaskForRoom(this.room);
        var labsToOperate = _.filter(produceTask.ResultLabs(), function (s) { return !_.some(s.effects, function (e) { return e.power == PWR_OPERATE_LAB && (e.ticksRemaining > 50); }); });
        if (!_.some(labsToOperate)) {
            return false;
        }
        var toOperate = this.PowerCreep.pos.findClosestByPath(labsToOperate, { range: POWER_INFO[PWR_OPERATE_LAB].range, ignoreCreeps: true });
        if (!toOperate) {
            console.log("Failed to operate one of labs in " + this.room.name + ", shouldn't ever happen");
            return false;
        }
        if (this.PowerCreep.pos.inRangeTo(toOperate, POWER_INFO[PWR_OPERATE_LAB].range)) {
            if (!this.PowerCreep.powers[PWR_OPERATE_LAB].cooldown) {
                this.PowerCreep.usePower(PWR_OPERATE_LAB, toOperate);
            }
        }
        else {
            BehaviorBase_1.default.GoToPosition(this.PowerCreep, toOperate, { costMatrixType: CostMatrixType_1.CostMatrixType.Offroad, range: POWER_INFO[PWR_OPERATE_LAB].range });
        }
        return true;
    };
    ;
    OperatorProcess.prototype.OperateTowers = function () {
        if (!this.needOperateTowers) {
            return false;
        }
        if (this.PowerCreep.room.name != this.room.name) {
            return false;
        }
        if (this.PowerCreep.carry[RESOURCE_OPS] < POWER_INFO[PWR_OPERATE_TOWER].ops) {
            return this.GetOps();
        }
        var towersToOperate = this.room.find(FIND_STRUCTURES, {
            filter: function (s) { return s.structureType == STRUCTURE_TOWER && !_.some(s.effects, { power: PWR_OPERATE_TOWER }); }
        });
        if (!_.some(towersToOperate)) {
            return false;
        }
        var toOperate = this.PowerCreep.pos.findClosestByPath(towersToOperate, { range: POWER_INFO[PWR_OPERATE_TOWER].range, ignoreCreeps: true });
        if (!toOperate) {
            console.log("Failed to operate one of towers in " + this.room.name + ", shouldn't ever happen");
            return false;
        }
        if (this.PowerCreep.pos.inRangeTo(toOperate, POWER_INFO[PWR_OPERATE_TOWER].range)) {
            if (!this.PowerCreep.powers[PWR_OPERATE_TOWER].cooldown) {
                this.PowerCreep.usePower(PWR_OPERATE_TOWER, toOperate);
            }
        }
        else {
            BehaviorBase_1.default.GoToPosition(this.PowerCreep, toOperate, { costMatrixType: CostMatrixType_1.CostMatrixType.Offroad, range: POWER_INFO[PWR_OPERATE_TOWER].range });
        }
        return true;
    };
    OperatorProcess.prototype.OperateSpawns = function () {
        if (!this.needOperateSpawns) {
            return false;
        }
        if (this.PowerCreep.powers[PWR_OPERATE_SPAWN].cooldown) {
            return false;
        }
        if (this.PowerCreep.room.name != this.room.name) {
            return false;
        }
        if (this.PowerCreep.carry[RESOURCE_OPS] < POWER_INFO[PWR_OPERATE_SPAWN].ops) {
            return this.GetOps();
        }
        var spawns = [_.first(this.room.find(FIND_MY_SPAWNS))];
        var spawnsToOperate = _.filter(spawns, function (s) { return !_.some(s.effects, { power: PWR_OPERATE_SPAWN }); });
        if (!_.some(spawnsToOperate)) {
            return false;
        }
        var toOperate = this.PowerCreep.pos.findClosestByPath(spawnsToOperate, { range: POWER_INFO[PWR_OPERATE_SPAWN].range, ignoreCreeps: true });
        if (!toOperate) {
            console.log("Failed to operate one of towers, shouldn't ever happen");
            return false;
        }
        if (this.PowerCreep.pos.inRangeTo(toOperate, POWER_INFO[PWR_OPERATE_SPAWN].range)) {
            this.PowerCreep.usePower(PWR_OPERATE_SPAWN, toOperate);
        }
        else {
            BehaviorBase_1.default.GoToPosition(this.PowerCreep, toOperate, { costMatrixType: CostMatrixType_1.CostMatrixType.Offroad, range: POWER_INFO[PWR_OPERATE_SPAWN].range });
        }
        return true;
    };
    OperatorProcess.prototype.OperateExtensions = function () {
        if (this.PowerCreep.room.name != this.room.name) {
            return false;
        }
        if (!this.PowerCreep.powers[PWR_OPERATE_EXTENSION] || this.PowerCreep.powers[PWR_OPERATE_EXTENSION].level < 1) {
            return false;
        }
        if (this.PowerCreep.powers[PWR_OPERATE_EXTENSION].cooldown) {
            return false;
        }
        var operateEffect = POWER_INFO[PWR_OPERATE_EXTENSION].effect[this.PowerCreep.powers[PWR_OPERATE_EXTENSION].level - 1];
        if (this.room.energyCapacityAvailable * operateEffect > (this.room.energyCapacityAvailable - this.room.energyAvailable)) {
            return false;
        }
        if (this.PowerCreep.carry[RESOURCE_OPS] < POWER_INFO[PWR_OPERATE_EXTENSION].ops) {
            return this.GetOps();
        }
        var storages = [this.room.terminal, this.room.storage];
        var storage = this.PowerCreep.pos.findClosestByPath(storages, { ignoreCreeps: true });
        if (this.PowerCreep.pos.inRangeTo(storage, POWER_INFO[PWR_OPERATE_TOWER].range)) {
            this.PowerCreep.usePower(PWR_OPERATE_EXTENSION, storage);
        }
        else {
            BehaviorBase_1.default.GoToPosition(this.PowerCreep, storage, { costMatrixType: CostMatrixType_1.CostMatrixType.Offroad, range: POWER_INFO[PWR_OPERATE_EXTENSION].range });
        }
        return true;
    };
    OperatorProcess.prototype.OperatePower = function () {
        if (!this.needOperatePower) {
            return false;
        }
        if (!this.PowerCreep.powers[PWR_OPERATE_POWER]) {
            return false;
        }
        if (this.PowerCreep.powers[PWR_OPERATE_POWER].cooldown) {
            return false;
        }
        if (this.PowerCreep.room.name != this.room.name) {
            return false;
        }
        if (this.PowerCreep.carry[RESOURCE_OPS] < POWER_INFO[PWR_OPERATE_POWER].ops) {
            return this.GetOps();
        }
        if (_.some(this.powerSpawner.effects, function (e) { return e.power == PWR_OPERATE_POWER && (e.ticksRemaining > 50); })) {
            return false;
        }
        if (this.PowerCreep.pos.inRangeTo(this.powerSpawner, POWER_INFO[PWR_OPERATE_POWER].range)) {
            this.PowerCreep.usePower(PWR_OPERATE_POWER, this.powerSpawner);
        }
        else {
            BehaviorBase_1.default.GoToPosition(this.PowerCreep, this.powerSpawner, { costMatrixType: CostMatrixType_1.CostMatrixType.Offroad, range: POWER_INFO[PWR_OPERATE_POWER].range });
        }
        return true;
    };
    OperatorProcess.prototype.OperateFactory = function () {
        if (!this.needOperateFactory) {
            return false;
        }
        if (!this.PowerCreep.powers[PWR_OPERATE_FACTORY]) {
            return false;
        }
        if (this.PowerCreep.powers[PWR_OPERATE_FACTORY].cooldown) {
            return false;
        }
        if (this.PowerCreep.room.name != this.room.name) {
            return false;
        }
        if (!this.factory) {
            return false;
        }
        if (this.PowerCreep.carry[RESOURCE_OPS] < POWER_INFO[PWR_OPERATE_FACTORY].ops) {
            return this.GetOps();
        }
        if (_.some(this.factory.effects, function (e) { return e.power == PWR_OPERATE_FACTORY && (e.ticksRemaining > 50); })) {
            return false;
        }
        if (this.PowerCreep.pos.inRangeTo(this.factory, POWER_INFO[PWR_OPERATE_FACTORY].range)) {
            this.PowerCreep.usePower(PWR_OPERATE_FACTORY, this.factory);
        }
        else {
            BehaviorBase_1.default.GoToPosition(this.PowerCreep, this.factory, { costMatrixType: CostMatrixType_1.CostMatrixType.Offroad, range: POWER_INFO[PWR_OPERATE_FACTORY].range });
        }
        return true;
    };
    OperatorProcess.prototype.moveToPosition = function () {
        var flag = this.flag;
        if (!flag) {
            return;
        }
        if (flag.pos.isEqualTo(this.PowerCreep.pos)) {
            return;
        }
        BehaviorBase_1.default.GoToPosition(this.PowerCreep, flag.pos, { costMatrixType: CostMatrixType_1.CostMatrixType.Offroad });
    };
    OperatorProcess.prototype.EnablePower = function () {
        if (this.room.controller.isPowerEnabled) {
            return false;
        }
        if (this.PowerCreep.pos.isNearTo(this.room.controller)) {
            this.PowerCreep.enableRoom(this.room.controller);
        }
        else {
            BehaviorBase_1.default.GoToPosition(this.PowerCreep, this.room.controller, { costMatrixType: CostMatrixType_1.CostMatrixType.Offroad, range: 1 });
        }
        return true;
    };
    return OperatorProcess;
}(PowerCreepProcess_1.default));
exports.default = OperatorProcess;


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Setup_Reservers_1 = __webpack_require__(242);
var Setup_Workers_1 = __webpack_require__(245);
var Setup_Leecher_1 = __webpack_require__(240);
var Setup_Chargers_1 = __webpack_require__(238);
var Setup_Upgraders_1 = __webpack_require__(244);
var Setup_Transports_1 = __webpack_require__(243);
var Setup_Fighters_1 = __webpack_require__(239);
var Setup_Other_1 = __webpack_require__(241);
var costs = {
    'move': 50,
    'work': 100,
    'carry': 50,
    'attack': 80,
    'ranged_attack': 150,
    'heal': 250,
    'claim': 600,
    'tough': 10
};
function getCost(body) {
    var res = 0;
    for (var i = 0; i < body.length; i++) {
        res += costs[body[i]];
    }
    return res;
}
exports.getCost = getCost;
function GetCreepSetups() {
    var CreepSetupsDictionary = {};
    Setup_Leecher_1.SetupLeechers(CreepSetupsDictionary);
    Setup_Transports_1.SetupTransports(CreepSetupsDictionary);
    Setup_Chargers_1.SetupChargers(CreepSetupsDictionary);
    Setup_Upgraders_1.SetupUpgraders(CreepSetupsDictionary);
    Setup_Reservers_1.SetupReservers(CreepSetupsDictionary);
    Setup_Workers_1.SetupWorkers(CreepSetupsDictionary);
    Setup_Fighters_1.SetupFighters(CreepSetupsDictionary);
    Setup_Other_1.SetupOthers(CreepSetupsDictionary);
    return CreepSetupsDictionary;
}
exports.GetCreepSetups = GetCreepSetups;
function GetCreepSetup(roleName) {
    var setups = GetCreepSetups();
    return setups[roleName];
}
exports.GetCreepSetup = GetCreepSetup;


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var TickCache_1 = __webpack_require__(1);
var Spawn_1 = __webpack_require__(3);
var Config_1 = __webpack_require__(8);
exports.stationaryKeys = [
    'reserver_2',
    'leecher_2',
    'carrylessLeecher_2',
    'centralLeecher_2',
    'armedCentralLeecher_2',
    'armedCentralLeecher_3',
    'stationaryUpgrader_3',
    'doubleStationaryUpgrader_3',
    'tripleStationaryUpgrader_3',
    'reupgrader_3',
    'praiser_3',
    'mineralLeecher_3',
    'weakMineralLeecher_3',
    'stationaryCharger_2'
];
function structureIsWalkable(structure) {
    if (structure instanceof ConstructionSite) {
        return _.includes([STRUCTURE_ROAD, STRUCTURE_CONTAINER, STRUCTURE_RAMPART], structure.structureType);
    }
    if (structure.structureType == STRUCTURE_ROAD) {
        return true;
    }
    if (structure.structureType == STRUCTURE_CONTAINER) {
        return true;
    }
    if (structure.structureType == STRUCTURE_RAMPART) {
        var r = structure;
        return r.my || (r.isPublic && (_.includes(Config_1.alliedPlayers, r.owner.username) || (r.owner.username === 'Screeps')));
    }
    return false;
}
exports.structureIsWalkable = structureIsWalkable;
function getFullPathForCreep(source, destination) {
    return getFullPath(source, destination, function (r) { return getCostMatrix(r, destination, 1, 2, 10, false); });
}
exports.getFullPathForCreep = getFullPathForCreep;
function getFullPathByCosts(source, destination, roadCost, plainCost, swampCost, ignoreStationaryCreeps) {
    return getFullPath(source, destination, function (r) { return getCostMatrix(r, destination, roadCost, plainCost, swampCost, ignoreStationaryCreeps); });
}
exports.getFullPathByCosts = getFullPathByCosts;
function getPosKey(pos) {
    return pos.roomName + "_" + pos.x + "_" + pos.y;
}
function getGoalKey(goal) {
    var goalPosition = goal instanceof RoomPosition ? goal : goal.pos;
    var goalRange = goal instanceof RoomPosition ? 1 : goal.range;
    return goalPosition.roomName + "_" + goalPosition.x + "_" + goalPosition.y + ":" + goalRange;
}
function getFullPathKey(source, destination) {
    return getPosKey(source) + "->" + getGoalKey(destination);
}
function getFullPath(source, destination, costMatrix) {
    if (_.isUndefined(Memory['PathCache'])) {
        Memory['PathCache'] = {};
    }
    var pathKey = getFullPathKey(source, destination);
    if (!_.isUndefined(Memory['PathCache'][pathKey])) {
        return Memory['PathCache'][pathKey];
    }
    console.log("pathfinding: " + pathKey);
    var currentSource = source;
    var currentPath = {
        key: pathKey,
        source: getPosKey(source),
        destination: getGoalKey(destination),
        positions: [],
        segments: {},
        incomplete: true
    };
    var tries = 0;
    while (currentPath.incomplete) {
        var path = findFullPath(currentSource, destination, costMatrix);
        currentPath.positions = _.union(currentPath.positions, path.positions);
        if (!path.incomplete || (_.last(currentPath.positions).isNearTo(destination)) || (tries > 10)) {
            currentPath.key = pathKey;
            currentPath.segments = splitPath(_.union([source], currentPath.positions));
            Memory['PathCache'][pathKey] = currentPath;
            delete Memory['PathCache'][pathKey]['positions'];
            return currentPath;
        }
        tries++;
        currentSource = _.last(path.positions);
    }
}
function getCostMatrix(roomName, goal, roadSpeed, plainSpeed, swampSpeed, ignoreStationaryCreeps) {
    var matrixKey = roomName + "/" + roadSpeed + "/" + plainSpeed + "/" + swampSpeed;
    if (_.isUndefined(Memory['CostMatrixCache'])) {
        Memory['CostMatrixCache'] = {};
    }
    if (!_.isUndefined(Memory['CostMatrixCache'][matrixKey])) {
        return PathFinder.CostMatrix.deserialize(Memory['CostMatrixCache'][matrixKey]);
    }
    var costs = findCostMatrix(roomName, goal, roadSpeed, plainSpeed, swampSpeed, ignoreStationaryCreeps);
    if (!costs.terrainOnly) {
    }
    return costs.matrix;
}
function findCostMatrix(roomName, goal, roadSpeed, plainSpeed, swampSpeed, ignoreStationaryCreeps) {
    var terrainCosts = [plainSpeed, Infinity, swampSpeed];
    var costs = new PathFinder.CostMatrix();
    var raw = Game.map.getRoomTerrain(roomName).getRawBuffer();
    for (var x = 0; x < 50; x++)
        for (var y = 0; y < 50; y++)
            costs.set(x, y, terrainCosts[raw[x + y * 50]]);
    var room = Game.rooms[roomName];
    if (_.isUndefined(room)) {
        return { matrix: costs, terrainOnly: true };
    }
    TickCache_1.__find(room, FIND_STRUCTURES).forEach(function (structure) {
        if (structure instanceof StructureRampart) {
            if (!structure.my && !structure.isPublic) {
                costs.set(structure.pos.x, structure.pos.y, Infinity);
            }
        }
        else if (structure instanceof StructureRoad) {
            costs.set(structure.pos.x, structure.pos.y, roadSpeed);
        }
        else if (structure.structureType !== STRUCTURE_CONTAINER) {
            costs.set(structure.pos.x, structure.pos.y, 0xff);
        }
    });
    TickCache_1.__find(room, FIND_CONSTRUCTION_SITES).forEach(function (cSite) {
        if (cSite.structureType == STRUCTURE_RAMPART) {
            if (!cSite.my) {
                costs.set(cSite.pos.x, cSite.pos.y, Infinity);
            }
        }
        else if (cSite.structureType == STRUCTURE_ROAD) {
            costs.set(cSite.pos.x, cSite.pos.y, roadSpeed);
        }
        else if (cSite.structureType !== STRUCTURE_CONTAINER) {
            costs.set(cSite.pos.x, cSite.pos.y, 0xff);
        }
    });
    if (!ignoreStationaryCreeps) {
        TickCache_1.__find(room, FIND_CREEPS).forEach(function (creep) {
            if (!creep.owner || !creep.my) {
                costs.set(creep.pos.x, creep.pos.y, Infinity);
                return;
            }
            var key = Spawn_1.getRoleByName(creep.name) + "_" + creep.memory.state;
            if (_.includes(exports.stationaryKeys, key)) {
                costs.set(creep.pos.x, creep.pos.y, Infinity);
            }
        });
    }
    var goalPosition = goal instanceof RoomPosition ? goal : goal.pos;
    TickCache_1.__find(room, FIND_FLAGS).forEach(function (flag) {
        if (!flag.pos.isEqualTo(goalPosition)) {
            costs.set(flag.pos.x, flag.pos.y, Infinity);
        }
    });
    TickCache_1.__find(room, FIND_STRUCTURES).forEach(function (structure) {
        if (structure instanceof StructureKeeperLair) {
            var minX = Math.max(0, structure.pos.x - 3);
            var maxX = Math.min(49, structure.pos.x + 3);
            var minY = Math.max(0, structure.pos.y - 3);
            var maxY = Math.min(49, structure.pos.y + 3);
            for (var i = minX; i <= maxX; i++) {
                for (var j = minY; j <= maxY; j++) {
                    var currentCost = costs.get(i, j);
                    if (currentCost < Infinity) {
                        var pos = new RoomPosition(i, j, roomName);
                        var multiplier = 5 - structure.pos.getRangeTo(pos);
                        costs.set(i, j, currentCost * multiplier);
                    }
                }
            }
        }
    });
    return { matrix: costs, terrainOnly: false };
}
exports.findCostMatrix = findCostMatrix;
function getPathStep(pos1, pos2) {
    var directions = [
        [TOP_LEFT, LEFT, BOTTOM_LEFT],
        [TOP, 0, BOTTOM],
        [TOP_RIGHT, RIGHT, BOTTOM_RIGHT]
    ];
    var dx = pos2.x - pos1.x;
    if (dx == -49)
        dx = 1;
    if (dx == 49)
        dx = -1;
    var dy = pos2.y - pos1.y;
    if (dy == -49)
        dy = 1;
    if (dy == 49)
        dy = -1;
    var direction = directions[1 + dx][1 + dy];
    return {
        x: pos2.x,
        y: pos2.y,
        dx: dx,
        dy: dy,
        direction: direction
    };
}
function splitPath(positions) {
    var deserializedSegments = {};
    for (var i = 0; i < positions.length - 1; i++) {
        if (_.isUndefined(deserializedSegments[positions[i].roomName])) {
            deserializedSegments[positions[i].roomName] = [];
        }
        deserializedSegments[positions[i].roomName].push(getPathStep(positions[i], positions[1 + i]));
    }
    return _.mapValues(deserializedSegments, Room.serializePath);
}
exports.splitPath = splitPath;
function findFullPath(source, destination, roomCallback) {
    var dst = destination instanceof RoomPosition ? { pos: destination, range: 1 } : { pos: destination.pos, range: (destination.range - 1) };
    var path = PathFinder.search(source, dst, {
        roomCallback: roomCallback,
        maxOps: 20000,
    });
    return {
        key: getFullPathKey(source, destination),
        source: getPosKey(source),
        destination: getGoalKey(dst),
        positions: path.path,
        segments: {},
        incomplete: path.incomplete
    };
}
function getCurrentPathForCreep(creep, source, destination) {
    console.log("Pathfinding for " + creep.name);
    var fullPath = getFullPathForCreep(source, destination);
    return fullPath.positions;
}
exports.getCurrentPathForCreep = getCurrentPathForCreep;
function getFleeFromOnePath(creep, hostile, range) {
    var fleePath = PathFinder.search(creep.pos, { pos: hostile, range: range }, {
        flee: true,
        plainCost: 2,
        swampCost: 10,
        maxOps: 500,
        maxRooms: 1,
        roomCallback: function (r) { return getCostMatrix(r, hostile, 1, 2, 10, false); }
    });
    var fullPositions = _.union([creep.pos], fleePath.path);
    var segments = splitPath(fullPositions);
    return segments[creep.room.name];
}
exports.getFleeFromOnePath = getFleeFromOnePath;


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Process_1 = __webpack_require__(5);
var TaskManager_1 = __webpack_require__(7);
var Reagents_1 = __webpack_require__(56);
var TasksRepository_1 = __webpack_require__(11);
var Config_1 = __webpack_require__(8);
var defaultProduceBatch = 3000;
var BoostsManager = (function (_super) {
    __extends(BoostsManager, _super);
    function BoostsManager() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = '/usr/bin/boosts-manager';
        return _this;
    }
    BoostsManager.prototype.tick = function () {
        var myRooms = BoostsManager.MyRooms();
        var existingTasks = TaskManager_1.default.QueryProduceTasks();
        var busyAgents = existingTasks.map(function (t) { return t.roomName; });
        var availableAgents = _.filter(myRooms, function (r) {
            return !_.contains(busyAgents, r.name);
        });
        console.log("Agents busy/avail/all: " + busyAgents.length + "/" + availableAgents.length + "/" + myRooms.length);
        if (!_.some(availableAgents)) {
            console.log("No available agents");
            this.sleep(100);
            return;
        }
        TasksRepository_1.default.CleanupCompletedTasks();
        var assignedAgents = {};
        var report = '';
        for (var _i = 0, existingTasks_1 = existingTasks; _i < existingTasks_1.length; _i++) {
            var t = existingTasks_1[_i];
            assignedAgents[t.resource] = 1 + (assignedAgents[t.resource] || 0);
            report += t.roomName + ": " + t.resource + ", ";
        }
        console.log(report);
        var current = BoostsManager.GetCurrentResources(myRooms);
        var desired = BoostsManager.DesiredResources(myRooms.length);
        var missing = _.filter(_.keys(desired).map(function (r) {
            return {
                resource: r,
                missing: (desired[r] - (current[r] || 0) + defaultProduceBatch * (assignedAgents[r] || 0)) / desired[r]
            };
        }), function (i) { return i.missing > 0; });
        var idleAgents = [];
        var _loop_1 = function (a) {
            var canProduce = _.filter(missing, function (r) {
                if (_.isUndefined(r)) {
                    console.log("MissingResource object not defined, wtf");
                    return false;
                }
                if (_.isUndefined(Reagents_1.Reagents[r.resource])) {
                    return false;
                }
                var left = Reagents_1.Reagents[r.resource].left;
                var right = Reagents_1.Reagents[r.resource].right;
                return (a.terminal.store[left] >= defaultProduceBatch) && (a.terminal.store[right] >= defaultProduceBatch);
            });
            if (!_.some(canProduce)) {
                idleAgents.push(a.name);
                return "continue";
            }
            var toProduce = _.first(canProduce.sort(function (a, b) { return b.missing - a.missing; }));
            console.log("Resource for " + a.name + " selected: " + toProduce.resource + " (" + (current[toProduce.resource] || 0) + "/" + desired[toProduce.resource] + ")");
            TaskManager_1.default.AddProduceTask(toProduce.resource, defaultProduceBatch, a.name);
            return { value: void 0 };
        };
        for (var _a = 0, availableAgents_1 = availableAgents; _a < availableAgents_1.length; _a++) {
            var a = availableAgents_1[_a];
            var state_1 = _loop_1(a);
            if (typeof state_1 === "object")
                return state_1.value;
        }
        if (_.some(idleAgents)) {
            console.log("Idle agents: " + idleAgents);
            this.sleep(20);
            return;
        }
        this.sleep(100);
    };
    BoostsManager.MyRooms = function () {
        return _.filter(_.values(Game.rooms), function (r) {
            return !_.isUndefined(r.controller) &&
                r.controller.my &&
                (r.controller.level == 8) &&
                (r.terminal != null) &&
                (r.storage != null) &&
                (r.storage.pos.getRangeTo(r.terminal.pos) < 3) &&
                _.isUndefined(r.memory['evac']);
        });
    };
    BoostsManager.GetCurrentResources = function (myRooms) {
        if (!myRooms) {
            myRooms =
                _.filter(_.values(Game.rooms), function (r) {
                    return !_.isUndefined(r.controller) &&
                        r.controller.my &&
                        (r.controller.level == 8) &&
                        (r.terminal != null) &&
                        (r.storage != null) &&
                        (r.storage.pos.getRangeTo(r.terminal.pos) < 3);
                });
        }
        var resources = {};
        for (var _i = 0, myRooms_1 = myRooms; _i < myRooms_1.length; _i++) {
            var room = myRooms_1[_i];
            if (room.storage != null) {
                for (var resource in room.storage.store) {
                    resources[resource] = (resources[resource] || 0) + (room.storage.store[resource] || 0);
                }
            }
            if (room.terminal != null) {
                for (var resource in room.terminal.store) {
                    resources[resource] = (resources[resource] || 0) + (room.terminal.store[resource] || 0);
                }
            }
        }
        return resources;
    };
    BoostsManager.DesiredResources = function (roomsCount) {
        if (!roomsCount) {
            roomsCount = BoostsManager.MyRooms().length;
        }
        roomsCount = 2 * Math.ceil(roomsCount / 2);
        var result = {};
        result['U'] = Config_1.ResourcesConfiguration.baseAmount * roomsCount;
        result['L'] = Config_1.ResourcesConfiguration.baseAmount * roomsCount;
        result['Z'] = Config_1.ResourcesConfiguration.baseAmount * roomsCount;
        result['K'] = Config_1.ResourcesConfiguration.baseAmount * roomsCount;
        result['O'] = Config_1.ResourcesConfiguration.baseAmount * roomsCount;
        result['H'] = Config_1.ResourcesConfiguration.baseAmount * roomsCount;
        result['X'] = Config_1.ResourcesConfiguration.baseAmount * roomsCount;
        result['power'] = Config_1.ResourcesConfiguration.baseAmount * roomsCount;
        result['OH'] = Config_1.ResourcesConfiguration.baseAmount * Config_1.ResourcesConfiguration.HydroxideMult * roomsCount;
        result['UL'] = Config_1.ResourcesConfiguration.baseAmount * roomsCount;
        result['ZK'] = Config_1.ResourcesConfiguration.baseAmount * roomsCount;
        result['G'] = Config_1.ResourcesConfiguration.baseAmount * Config_1.ResourcesConfiguration.GhoduimMult * roomsCount;
        result['ZO'] = Config_1.ResourcesConfiguration.baseAmount * Config_1.ResourcesConfiguration.T1Mult * roomsCount * Config_1.ResourcesConfiguration.MoveMult;
        result['GO'] = Config_1.ResourcesConfiguration.baseAmount * Config_1.ResourcesConfiguration.T1Mult * roomsCount * Config_1.ResourcesConfiguration.ArmorMult;
        result['KO'] = Config_1.ResourcesConfiguration.baseAmount * Config_1.ResourcesConfiguration.T1Mult * roomsCount * Config_1.ResourcesConfiguration.RangedAttackMult;
        result['LO'] = Config_1.ResourcesConfiguration.baseAmount * Config_1.ResourcesConfiguration.T1Mult * roomsCount * Config_1.ResourcesConfiguration.HealMult;
        result['UH'] = Config_1.ResourcesConfiguration.baseAmount * Config_1.ResourcesConfiguration.T1Mult * roomsCount * Config_1.ResourcesConfiguration.AttackMult;
        result['UO'] = Config_1.ResourcesConfiguration.baseAmount * Config_1.ResourcesConfiguration.T1Mult * roomsCount * Config_1.ResourcesConfiguration.HarvestMult;
        result['LH'] = Config_1.ResourcesConfiguration.baseAmount * Config_1.ResourcesConfiguration.T1Mult * roomsCount * Config_1.ResourcesConfiguration.BuildMult;
        result['ZH'] = Config_1.ResourcesConfiguration.baseAmount * Config_1.ResourcesConfiguration.T1Mult * roomsCount * Config_1.ResourcesConfiguration.DismantleMult;
        result['KH'] = Config_1.ResourcesConfiguration.baseAmount * Config_1.ResourcesConfiguration.T1Mult * roomsCount * Config_1.ResourcesConfiguration.CarryMult;
        result['GH'] = Config_1.ResourcesConfiguration.baseAmount * Config_1.ResourcesConfiguration.T1Mult * roomsCount * Config_1.ResourcesConfiguration.UpgradeMult;
        result['UHO2'] = Config_1.ResourcesConfiguration.baseAmount * Config_1.ResourcesConfiguration.T2Mult * roomsCount * Config_1.ResourcesConfiguration.HarvestMult;
        result['UH2O'] = Config_1.ResourcesConfiguration.baseAmount * Config_1.ResourcesConfiguration.T2Mult * roomsCount * Config_1.ResourcesConfiguration.AttackMult;
        result['LHO2'] = Config_1.ResourcesConfiguration.baseAmount * Config_1.ResourcesConfiguration.T2Mult * roomsCount * Config_1.ResourcesConfiguration.HealMult;
        result['LH2O'] = Config_1.ResourcesConfiguration.baseAmount * Config_1.ResourcesConfiguration.T2Mult * roomsCount * Config_1.ResourcesConfiguration.BuildMult;
        result['ZHO2'] = Config_1.ResourcesConfiguration.baseAmount * Config_1.ResourcesConfiguration.T2Mult * roomsCount * Config_1.ResourcesConfiguration.MoveMult;
        result['ZH2O'] = Config_1.ResourcesConfiguration.baseAmount * Config_1.ResourcesConfiguration.T2Mult * roomsCount * Config_1.ResourcesConfiguration.DismantleMult;
        result['KHO2'] = Config_1.ResourcesConfiguration.baseAmount * Config_1.ResourcesConfiguration.T2Mult * roomsCount * Config_1.ResourcesConfiguration.RangedAttackMult;
        result['KH2O'] = Config_1.ResourcesConfiguration.baseAmount * Config_1.ResourcesConfiguration.T2Mult * roomsCount * Config_1.ResourcesConfiguration.CarryMult;
        result['GH2O'] = Config_1.ResourcesConfiguration.baseAmount * Config_1.ResourcesConfiguration.T2Mult * roomsCount * Config_1.ResourcesConfiguration.UpgradeMult;
        result['GHO2'] = Config_1.ResourcesConfiguration.baseAmount * Config_1.ResourcesConfiguration.T2Mult * roomsCount * Config_1.ResourcesConfiguration.ArmorMult;
        result['XUHO2'] = Config_1.ResourcesConfiguration.baseAmount * Config_1.ResourcesConfiguration.T3Mult * roomsCount * Config_1.ResourcesConfiguration.HarvestMult;
        result['XUH2O'] = Config_1.ResourcesConfiguration.baseAmount * Config_1.ResourcesConfiguration.T3Mult * roomsCount * Config_1.ResourcesConfiguration.AttackMult;
        result['XLHO2'] = Config_1.ResourcesConfiguration.baseAmount * Config_1.ResourcesConfiguration.T3Mult * roomsCount * Config_1.ResourcesConfiguration.HealMult;
        result['XLH2O'] = Config_1.ResourcesConfiguration.baseAmount * Config_1.ResourcesConfiguration.T3Mult * roomsCount * Config_1.ResourcesConfiguration.BuildMult;
        result['XZHO2'] = Config_1.ResourcesConfiguration.baseAmount * Config_1.ResourcesConfiguration.T3Mult * roomsCount * Config_1.ResourcesConfiguration.MoveMult;
        result['XZH2O'] = Config_1.ResourcesConfiguration.baseAmount * Config_1.ResourcesConfiguration.T3Mult * roomsCount * Config_1.ResourcesConfiguration.DismantleMult;
        result['XKHO2'] = Config_1.ResourcesConfiguration.baseAmount * Config_1.ResourcesConfiguration.T3Mult * roomsCount * Config_1.ResourcesConfiguration.RangedAttackMult;
        result['XKH2O'] = Config_1.ResourcesConfiguration.baseAmount * Config_1.ResourcesConfiguration.T3Mult * roomsCount * Config_1.ResourcesConfiguration.CarryMult;
        result['XGH2O'] = Config_1.ResourcesConfiguration.baseAmount * Config_1.ResourcesConfiguration.T3Mult * roomsCount * Config_1.ResourcesConfiguration.UpgradeMult;
        result['XGHO2'] = Config_1.ResourcesConfiguration.baseAmount * Config_1.ResourcesConfiguration.T3Mult * roomsCount * Config_1.ResourcesConfiguration.ArmorMult;
        return result;
    };
    return BoostsManager;
}(Process_1.Process));
exports.default = BoostsManager;


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FighterBase_1 = __webpack_require__(13);
var Spawn_1 = __webpack_require__(3);
var Config_1 = __webpack_require__(8);
var BehaviorBase_1 = __webpack_require__(2);
var CostMatrixType_1 = __webpack_require__(0);
var AssaultRanger = (function (_super) {
    __extends(AssaultRanger, _super);
    function AssaultRanger() {
        var _this = _super.call(this) || this;
        _this.name = 'assaultRanger';
        _this[1] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_ZYNTHIUM_ALKALIDE); };
        _this[2] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_GHODIUM_ALKALIDE); };
        _this[3] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_LEMERGIUM_ALKALIDE); };
        _this[4] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_KEANIUM_ALKALIDE); };
        _this[5] = _this._disableRenew;
        _this[6] = _this._fight;
        _this[7] = _this._makeFormation;
        _this[8] = _this._fightInFormation;
        return _this;
    }
    AssaultRanger.prototype._getMyHealBoostMultiplier = function () {
        return 4;
    };
    AssaultRanger.prototype._getMyDismantleBoostMultiplier = function () {
        return 1;
    };
    AssaultRanger.prototype._removeDick = function (creep) {
        if (!creep.room.controller || !creep.room.controller.sign || !creep.pos.isNearTo(creep.room.controller)) {
            return;
        }
        if (/^8=+.*=D$/.exec(creep.room.controller.sign.text)) {
            creep.signController(creep.room.controller, '');
        }
    };
    AssaultRanger.prototype._fight = function (creep) {
        this._removeDick(creep);
        var rangedAttack = this._rangedAttacks(creep) || this._attackFocusedStructure(creep, 3);
        var heal = this._healMySignificantDamage(creep) ||
            this._healSignificantDamageNearby(creep) ||
            this._healMyMinorDamage(creep) ||
            this._healOthersNearby(creep) ||
            this._overheal(creep);
        if (!rangedAttack) {
            if (!heal) {
                heal = this._healOthersAtDistance(creep);
            }
            this._defaultRMA(creep);
        }
        if (!heal) {
            this._overheal(creep);
        }
        var destination = Game.flags[Spawn_1.getAssignmentByName(creep.name)];
        if ((destination == null)) {
            return true;
        }
        if (creep.room.name == destination.pos.roomName) {
            if (_.isUndefined(creep.memory['following'])) {
                var squad = BehaviorBase_1.default.GetFollowers(creep);
                if ((squad.length > 2) && _.every(squad, function (c) { return (c.room.name == destination.pos.roomName) && !c.pos.isEdge(); })) {
                    this._nextState(creep);
                    return false;
                }
            }
            else {
                var leader = Game.creeps[creep.memory['following']];
                if (leader && creep.pos.isEdge()) {
                    var leaderStuck = leader.memory['_lastMoveTick'] &&
                        (leader.memory['_lastMoveTick'] < (Game.time - 1));
                    var leaderArrived = leader.memory['_trav'] &&
                        leader.memory['_trav'].path &&
                        (leader.memory['_trav'].path.length <= 1);
                    if (leaderArrived || leaderStuck) {
                        var pos = _.first(leader.pos.around(1, { filter: function (p) { return p.isNearTo(creep.pos) && p.isFree(); } }));
                        if (pos) {
                            creep.move(creep.pos.getDirectionTo(pos));
                            return true;
                        }
                    }
                }
            }
        }
        return this._moveInRaidToFlag(creep, CostMatrixType_1.CostMatrixType.Military, 0) ||
            this._travelToFlag(creep, destination, 0, CostMatrixType_1.CostMatrixType.Military) ||
            this._moveToFlag(creep, 0, CostMatrixType_1.CostMatrixType.Military) || true;
    };
    AssaultRanger.prototype._defaultRMA = function (creep) {
        var flag = Game.flags[Spawn_1.getAssignmentByName(creep.name)];
        if ((flag == null) || !_.includes([COLOR_RED, COLOR_ORANGE], flag.color)) {
            return false;
        }
        if (_.isUndefined(creep.room.controller) || creep.room.controller.my || _.isUndefined(creep.room.controller.owner) || _.includes(Config_1.alliedPlayers, creep.room.controller.owner.username)) {
            return false;
        }
        if ((flag.color != COLOR_RED) && !_.isUndefined(creep.room.storage) && (creep.pos.getRangeTo(creep.room.storage) <= 3)) {
            return false;
        }
        if ((flag.color != COLOR_RED) && !_.isUndefined(creep.room.terminal) && (creep.pos.getRangeTo(creep.room.terminal) <= 3)) {
            return false;
        }
        creep.rangedMassAttack();
        return true;
    };
    AssaultRanger.prototype._combatActions = function (creep) {
        var rangedAttack = this._rangedAttacks(creep) ||
            this._attackFocusedStructure(creep, 3);
        var heal = this._healMySignificantDamage(creep) ||
            this._healSignificantDamageNearby(creep) ||
            this._healMyMinorDamage(creep) ||
            this._overheal(creep);
        if (!rangedAttack) {
            if (!heal) {
                heal = this._healOthersAtDistance(creep);
            }
            this._defaultRMA(creep);
        }
        if (!heal) {
            this._overheal(creep);
        }
        return true;
    };
    return AssaultRanger;
}(FighterBase_1.default));
exports.default = AssaultRanger;


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Task_1 = __webpack_require__(6);
var AmountedTask = (function (_super) {
    __extends(AmountedTask, _super);
    function AmountedTask(data) {
        return _super.call(this, data) || this;
    }
    Object.defineProperty(AmountedTask.prototype, "amount", {
        get: function () {
            return this._data['amount'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AmountedTask.prototype, "scheduled", {
        get: function () {
            return this._data['scheduled'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AmountedTask.prototype, "completed", {
        get: function () {
            return this._data['completed'] || 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AmountedTask.prototype, "remaining", {
        get: function () {
            return this.amount - this.completed;
        },
        enumerable: true,
        configurable: true
    });
    AmountedTask.prototype.isCompleted = function () {
        return _super.prototype.isCompleted.call(this) && (this.completed >= this.amount);
    };
    AmountedTask.prototype.addCompleted = function (amount) {
        this._data['completed'] = amount + (this._data['completed'] || 0);
    };
    AmountedTask.CreateAmountedTaskObject = function (id, priority, amount) {
        var res = Task_1.Task.CreateTaskObject(id, priority);
        res['amount'] = amount;
        return res;
    };
    return AmountedTask;
}(Task_1.Task));
exports.default = AmountedTask;


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Spawn_1 = __webpack_require__(3);
var Setup_1 = __webpack_require__(18);
var ProcessList_1 = __webpack_require__(9);
var SquadRepository_1 = __webpack_require__(51);
var roomNameRegex = /^([WE])\d+([NS])\d+$/;
function squad(roomNames, flagName, squad) {
    var hub = _.first(ProcessList_1.GetChildProcesses(1, {
        filter: function (p) { return p.name == "/usr/bin/squad-hub"; }
    }));
    if (hub == null) {
        return "Hub process not found";
    }
    if (_.isArray(roomNames) && _.isString(squad)) {
        var s = SquadRepository_1.default.CreateSquad(roomNames, flagName, squad);
        if (s == null) {
            return 'Squad creating failed';
        }
        ProcessList_1.createProcess(hub.id, "/usr/bin/squad", [s.id], hub.processInfo.priority);
        return "Created squad " + s.id;
    }
    var roomName = roomNames;
    var spawnRoom = Game.rooms[roomName];
    if (_.isUndefined(spawnRoom)) {
        return "No visibility on room " + roomName;
    }
    if (_.isUndefined(spawnRoom.controller)) {
        return "No controller in room " + roomName;
    }
    if (!spawnRoom.controller.my) {
        return "Room " + roomName + " is not yours";
    }
    if (_.isUndefined(Game.flags[flagName]) && !roomNameRegex.exec(roomName)) {
        return "No flag|roomName " + flagName;
    }
    var squadMembers = squad;
    var setups = Setup_1.GetCreepSetups();
    for (var _i = 0, squadMembers_1 = squadMembers; _i < squadMembers_1.length; _i++) {
        var squadMember = squadMembers_1[_i];
        if (_.isUndefined(setups[squadMember])) {
            return "No setup " + squadMember;
        }
    }
    var creepNames = [];
    var result = "";
    for (var _a = 0, squadMembers_2 = squadMembers; _a < squadMembers_2.length; _a++) {
        var i = squadMembers_2[_a];
        var r = Spawn_1.addToSpawnQueue(roomName, i, flagName, 1);
        creepNames.push(r);
        result = result + "Added: " + r + "\r\n";
    }
    ProcessList_1.createProcess(hub.id, "/usr/bin/squad", creepNames, hub.processInfo.priority);
    return result;
}
exports.default = squad;


/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var TickCache_1 = __webpack_require__(1);
var Rooms_1 = __webpack_require__(14);
var Role_Base_1 = __webpack_require__(4);
exports.debugSay = true;
var processMinerals = true;
var mineralsLock = {};
var ChargerBase = (function (_super) {
    __extends(ChargerBase, _super);
    function ChargerBase() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._pickupEnergy = true;
        return _this;
    }
    ChargerBase.prototype._getMyLinks = function (creep) {
        if (!_.isUndefined(creep.memory['myLinksIds'])) {
            delete creep.memory['myLinksIds'];
        }
        if (!_.isUndefined(creep.memory['myLinkId'])) {
            delete creep.memory['myLinkId'];
        }
        var pos = Role_Base_1.RoleBase._getMyAssignmentPosition(creep);
        var allLinks = this._process.GetCachedObjects('links', function () { return TickCache_1.__find(creep.room, FIND_MY_STRUCTURES, { filter: { structureType: STRUCTURE_LINK } }); });
        return _.filter(allLinks, function (t) { return pos.isNearTo(t); });
    };
    ChargerBase.prototype._renewIfNecessary = function (creep, renewTtl) {
        if ((creep.ticksToLive < renewTtl) && !creep.memory['travelTime'] || (creep.ticksToLive > creep.memory['travelTime'])) {
            var spawns = this._getMySpawns(creep);
            var renewSpawn = _.first(_.filter(spawns, function (s) { return s.spawning == null; }));
            if (renewSpawn != null) {
                renewSpawn.renewCreep(creep);
            }
        }
    };
    ChargerBase.prototype._pickupMineralNear = function (creep) {
        if (this._pickupEnergy) {
            var dropped = _.last(TickCache_1.__findInRange(creep.pos, FIND_DROPPED_RESOURCES, 1, {
                filter: function (e) { return e.resourceType != RESOURCE_ENERGY; }
            }));
            if (dropped != null) {
                creep.pickup(dropped);
                return true;
            }
        }
        return false;
    };
    ChargerBase.prototype._pickupEnergyNear = function (creep) {
        if (this._pickupEnergy) {
            var dropped = _.first(TickCache_1.__findInRange(creep.pos, FIND_DROPPED_RESOURCES, 1, {
                filter: function (e) { return (e.resourceType == RESOURCE_ENERGY) && (e.amount >= 50); }
            }));
            if (dropped != null) {
                creep.pickup(dropped);
                return true;
            }
        }
        return false;
    };
    ChargerBase.prototype._lootTombstones = function (creep) {
        var tombstone = _.first(TickCache_1.__findInRange(creep.pos, FIND_TOMBSTONES, 1, {
            filter: function (t) { return _.sum(t.store) > 0; }
        }));
        if (tombstone == null) {
            return false;
        }
        creep.withdraw(tombstone, _.last(_.keys(tombstone.store)));
        return true;
    };
    ChargerBase.prototype._cleanupLink = function (creep) {
        var myLinks = this._getMyLinks(creep);
        if (myLinks == null) {
            return false;
        }
        for (var i = 0; i < myLinks.length; i++) {
            var link = myLinks[i];
            if ((link == null) || (link.energy == 0) || ChargerBase._hasAnyEmptyClientLink(link) || !this._hasAnyServerLink(link)) {
                continue;
            }
            creep.withdraw(link, RESOURCE_ENERGY);
            return true;
        }
        return false;
    };
    ChargerBase.prototype._getFromMyContainer = function (creep, minAmount) {
        var container = this._getCachedObject(creep, 'containerId', function (creep) { return _.first(TickCache_1.__findInRange(creep.pos, FIND_STRUCTURES, 1, {
            filter: function (s) { return s.structureType == STRUCTURE_CONTAINER; }
        })); }, true);
        if (container == null) {
            return false;
        }
        if (_.sum(container.store) > container.store.energy) {
            creep.withdraw(container, _.last(_.keys(container.store)));
            return true;
        }
        var excess = Math.min(creep.carryCapacity, container.store.energy - minAmount);
        if (excess >= (creep.carryCapacity / 2)) {
            creep.withdraw(container, RESOURCE_ENERGY, excess);
            return true;
        }
        return false;
    };
    ChargerBase.prototype._refillContainer = function (creep, maxAmount) {
        if (creep.carry.energy == 0) {
            return false;
        }
        var container = this._getCachedObject(creep, 'containerId', function (creep) { return _.first(TickCache_1.__findInRange(creep.pos, FIND_STRUCTURES, 1, {
            filter: function (s) { return s.structureType == STRUCTURE_CONTAINER; }
        })); }, true);
        if (container == null) {
            return false;
        }
        var missing = Math.min(creep.carry.energy, maxAmount - container.store.energy);
        if (missing > 0) {
            creep.transfer(container, RESOURCE_ENERGY, missing);
            return true;
        }
        return false;
    };
    ChargerBase.prototype._getFromTerminal = function (creep, minimalAmount) {
        var terminal = this._getMyTerminal(creep);
        var storage = this._getMyStorage(creep);
        if (terminal == null) {
            return false;
        }
        if (storage && creep.room.memory.emptyStorage) {
            return false;
        }
        var neededAmount = creep.room.memory.emptyTerminal ? 0 : minimalAmount;
        if ((terminal.store[RESOURCE_ENERGY] > neededAmount) || ((storage != null) && (storage.store[RESOURCE_ENERGY]) < terminal.store[RESOURCE_ENERGY])) {
            if (exports.debugSay)
                creep.say("\u2190T");
            creep.withdraw(terminal, RESOURCE_ENERGY);
            return true;
        }
        return false;
    };
    ChargerBase.prototype._getFromStorage = function (creep) {
        var storage = this._getMyStorage(creep);
        if (storage != null) {
            if (exports.debugSay)
                creep.say("\u2190S");
            creep.withdraw(storage, RESOURCE_ENERGY);
            return true;
        }
        return false;
    };
    ChargerBase.prototype._getMineralFromTerminal = function (creep) {
        if (!processMinerals) {
            return false;
        }
        if (this._findUnchargedSpawnOrLink(creep) != null) {
            return false;
        }
        var terminal = this._getMyTerminal(creep);
        if (terminal == null) {
            return false;
        }
        if (!_.isUndefined(mineralsLock[creep.room.name])) {
            return false;
        }
        var storage = this._getMyStorage(creep);
        if (storage == null) {
            return false;
        }
        var resource;
        for (resource in terminal.store) {
            var mineralsInTerminal = creep.room.memory.emptyTerminal ? 0 : Rooms_1.getMineralsAmountInTerminal(creep.room.name, resource);
            if ((resource != RESOURCE_ENERGY) && (terminal.store[resource] > mineralsInTerminal)) {
                var creepCapacityLeft = creep.carryCapacity - _.sum(creep.carry);
                var excessMinerals = terminal.store[resource] - mineralsInTerminal;
                var toTake = Math.min(creepCapacityLeft, excessMinerals);
                if (exports.debugSay)
                    creep.say(resource + "\u2190T");
                creep.withdraw(terminal, resource, toTake);
                return true;
            }
        }
        return false;
    };
    ChargerBase.prototype._getMineralFromStorage = function (creep) {
        if (!processMinerals) {
            return false;
        }
        if (this._findUnchargedSpawnOrLink(creep) != null) {
            return false;
        }
        var storage = this._getMyStorage(creep);
        if (storage == null) {
            return false;
        }
        if (!_.isUndefined(mineralsLock[creep.room.name])) {
            return false;
        }
        var terminal = this._getMyTerminal(creep);
        if (terminal == null) {
            return false;
        }
        var resource;
        for (resource in storage.store) {
            var mineralsInTerminal = Rooms_1.getMineralsAmountInTerminal(creep.room.name, resource);
            if ((resource != RESOURCE_ENERGY) &&
                (mineralsInTerminal > 0) &&
                !creep.room.memory.emptyTerminal &&
                (_.isUndefined(terminal.store[resource]) || (terminal.store[resource] < mineralsInTerminal))) {
                var storedInTerminal = _.isUndefined(terminal.store[resource]) ? 0 : terminal.store[resource];
                var creepCapacityLeft = creep.carryCapacity - _.sum(creep.carry);
                var missingMinerals = mineralsInTerminal - storedInTerminal;
                var toTake = Math.min(creepCapacityLeft, missingMinerals, storage.store[resource]);
                if (exports.debugSay)
                    creep.say(resource + "\u2190S");
                creep.withdraw(storage, resource, toTake);
                return true;
            }
        }
        return false;
    };
    ChargerBase.prototype._chargeTowers = function (creep, limit) {
        if (creep.carry[RESOURCE_ENERGY] == 0) {
            return false;
        }
        if (!_.isUndefined(creep.memory['towersIds'])) {
            delete creep.memory['towersIds'];
        }
        var myPosition = this._getMyInitialPosition(creep);
        var allTowers = this._process.GetCachedObjects('towers', function () { return TickCache_1.__find(creep.room, FIND_MY_STRUCTURES, {
            filter: { structureType: STRUCTURE_TOWER }
        }); });
        var towers = _.filter(allTowers, function (t) { return myPosition.isNearTo(t); });
        if (_.some(towers)) {
            var towerToCharge = _.min(towers, 'energy');
            if (towerToCharge != null) {
                if (towerToCharge.energy > limit) {
                    return false;
                }
                if (exports.debugSay)
                    creep.say("\u2192t");
                creep.transfer(towerToCharge, RESOURCE_ENERGY);
                return true;
            }
        }
        return false;
    };
    ChargerBase.prototype._chargeSpawns = function (creep, limit) {
        if (creep.carry[RESOURCE_ENERGY] == 0) {
            return false;
        }
        var unchargedSpawn = this._findUnchargedSpawn(creep, limit);
        if (unchargedSpawn == null) {
            return false;
        }
        if (exports.debugSay)
            creep.say("\u2192spawn");
        creep.transfer(unchargedSpawn, RESOURCE_ENERGY);
        return true;
    };
    ChargerBase.prototype._findUnchargedSpawnOrLink = function (creep) {
        var myLinks = this._getMyLinks(creep);
        if (myLinks != null) {
            for (var i = 0; i < myLinks.length; i++) {
                var link = myLinks[i];
                if ((link != null) && (!this._hasAnyServerLink(link) || ChargerBase._hasAnyEmptyClientLink(link)) && (link.energy < link.energyCapacity)) {
                    return link;
                }
            }
        }
        return this._findUnchargedSpawn(creep, 200);
    };
    ChargerBase.prototype._getMySpawns = function (creep) {
        if (!_.isUndefined(creep.memory['spawnsIds'])) {
            delete creep.memory['spawnsIds'];
        }
        var allSpawns = this._process.GetCachedObjects('spawnsIds', function () { return TickCache_1.__find(creep.room, FIND_MY_SPAWNS); });
        if (!allSpawns) {
            return null;
        }
        var myPosition = this._getMyInitialPosition(creep);
        return _.filter(allSpawns, function (s) { return s && s.pos.isNearTo(myPosition); });
    };
    ChargerBase.prototype._findUnchargedSpawn = function (creep, limit) {
        var spawns = this._getMySpawns(creep);
        if (spawns == null) {
            return null;
        }
        var spawnToCharge = null;
        spawns.forEach(function (spawn) {
            if (spawn.energy < limit) {
                spawnToCharge = spawn;
            }
        });
        return spawnToCharge;
    };
    ChargerBase.prototype._chargeLink = function (creep) {
        var myLinks = this._getMyLinks(creep);
        if (myLinks == null) {
            return false;
        }
        for (var i = 0; i < myLinks.length; i++) {
            var link = myLinks[i];
            if ((link != null) && (!this._hasAnyServerLink(link) || ChargerBase._hasAnyEmptyClientLink(link)) && (link.energy < link.energyCapacity)) {
                if (exports.debugSay)
                    creep.say("\u2192L" + i);
                creep.transfer(link, RESOURCE_ENERGY);
                return true;
            }
        }
        return false;
    };
    ChargerBase.prototype._fillTerminal = function (creep, terminalLimit) {
        if (creep.room.memory.emptyTerminal) {
            return false;
        }
        var terminal = this._getMyTerminal(creep);
        var storage = this._getMyStorage(creep);
        if ((terminal != null) && ((terminal.store[RESOURCE_ENERGY] || 0) < terminalLimit) && ((storage == null) || (creep.room.storage.store[RESOURCE_ENERGY] > 100000) || creep.room.memory.emptyStorage)) {
            if (exports.debugSay)
                creep.say("\u2192T");
            creep.transfer(terminal, RESOURCE_ENERGY);
            return true;
        }
        return false;
    };
    ChargerBase.prototype._fillStorage = function (creep) {
        if (creep.room.memory.emptyStorage) {
            return false;
        }
        var storage = this._getMyStorage(creep);
        if (storage != null) {
            if (exports.debugSay)
                creep.say("\u2192S");
            creep.transfer(storage, RESOURCE_ENERGY);
            return true;
        }
        return false;
    };
    ChargerBase.prototype._placeMineral = function (creep) {
        var mineral = this._carryMineral(creep);
        if (!mineral) {
            return false;
        }
        var storage = this._getMyStorage(creep);
        var terminal = this._getMyTerminal(creep);
        if (terminal != null && !creep.room.memory.emptyTerminal) {
            var mineralsInTerminal = Rooms_1.getMineralsAmountInTerminal(creep.room.name, mineral);
            var storedInTerminal = _.isUndefined(terminal.store[mineral]) ? 0 : terminal.store[mineral];
            var missingAmount = mineralsInTerminal - storedInTerminal;
            if ((missingAmount > 0)) {
                var toPlace = Math.min(creep.carry[mineral], missingAmount);
                creep.transfer(terminal, mineral, toPlace);
                if (exports.debugSay)
                    creep.say(mineral + "\u2192T");
                return true;
            }
        }
        if (storage != null) {
            if (exports.debugSay)
                creep.say(mineral + "\u2192S");
            creep.transfer(storage, mineral);
        }
        else {
            if (exports.debugSay)
                creep.say(mineral + "\u2192T");
            creep.transfer(terminal, mineral);
        }
        return true;
    };
    ChargerBase.prototype._getPowerForProcessing = function (creep) {
        var powerSpawner = this._process.GetCachedObject('powerSpawner', function () { return _.first(creep.room.find(FIND_STRUCTURES, { filter: { structureType: STRUCTURE_POWER_SPAWN } })); });
        if (!powerSpawner) {
            return false;
        }
        var powerStore = creep.room.storage && creep.room.storage.store[RESOURCE_POWER] ? creep.room.storage :
            creep.room.terminal && creep.room.terminal.store[RESOURCE_POWER] ? creep.room.terminal : null;
        if (!powerStore || !powerStore.store[RESOURCE_POWER] || (powerSpawner.power > 10)) {
            return false;
        }
        creep.withdraw(powerStore, RESOURCE_POWER, Math.min(powerSpawner.powerCapacity - powerSpawner.power, powerStore.store[RESOURCE_POWER]));
        return true;
    };
    ChargerBase.prototype._fillPowerSpawner = function (creep) {
        var powerSpawner = this._process.GetCachedObject('powerSpawner', function () { return _.first(creep.room.find(FIND_STRUCTURES, { filter: { structureType: STRUCTURE_POWER_SPAWN } })); });
        if (powerSpawner && powerSpawner.pos.isNearTo(creep) && ((powerSpawner.energy + creep.carryCapacity) < powerSpawner.energyCapacity)) {
            creep.transfer(powerSpawner, RESOURCE_ENERGY);
            return true;
        }
        return false;
    };
    ChargerBase.prototype._placePower = function (creep) {
        if (!creep.carry[RESOURCE_POWER]) {
            return false;
        }
        var powerSpawner = this._process.GetCachedObject('powerSpawner', function () { return _.first(creep.room.find(FIND_STRUCTURES, { filter: { structureType: STRUCTURE_POWER_SPAWN } })); });
        if (powerSpawner && (powerSpawner.power < (powerSpawner.powerCapacity / 2))) {
            creep.transfer(powerSpawner, RESOURCE_POWER);
            return true;
        }
        return false;
    };
    ChargerBase.prototype._getMyStorage = function (creep) {
        if (!_.isUndefined(creep.memory['storageId'])) {
            delete creep.memory['storageId'];
        }
        return ((creep.room.storage != null) && creep.room.storage.pos.isNearTo(creep)) ? creep.room.storage : null;
    };
    ChargerBase.prototype._getMyTerminal = function (creep) {
        if (!_.isUndefined(creep.memory['terminalId'])) {
            delete creep.memory['terminalId'];
        }
        return ((creep.room.terminal != null) && creep.room.terminal.pos.isNearTo(creep)) ? creep.room.terminal : null;
    };
    ChargerBase._hasAnyEmptyClientLink = function (myLink) {
        var linksConfig = Rooms_1.getLinksForRoom(myLink.room);
        var clientLinksIds = linksConfig[myLink.id];
        if (clientLinksIds == null) {
            return false;
        }
        var clientLinks = _.compact(clientLinksIds.map(function (l) { return Game.getObjectById(l); }));
        for (var i = 0; i < clientLinks.length; i++) {
            if (clientLinks[i].energy <= 26) {
                return true;
            }
        }
        return false;
    };
    ChargerBase._hasAnyClientLink = function (myLink) {
        var linksConfig = Rooms_1.getLinksForRoom(myLink.room);
        var clientLinksIds = linksConfig[myLink.id];
        if (clientLinksIds == null) {
            return false;
        }
        return _.some(clientLinksIds);
    };
    ChargerBase.prototype._hasAnyServerLink = function (myLink) {
        var linksConfig = Rooms_1.getLinksForRoom(myLink.room);
        return _.some(linksConfig, function (l) { return _.includes(l, myLink.id); });
    };
    ChargerBase.prototype._carryMineral = function (creep) {
        for (var i in creep.carry) {
            if ((i != RESOURCE_ENERGY) && creep.carry[i]) {
                return i;
            }
        }
        return null;
    };
    return ChargerBase;
}(Role_Base_1.RoleBase));
exports.ChargerBase = ChargerBase;


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FighterBase_1 = __webpack_require__(13);
var Squad_1 = __webpack_require__(23);
var CostMatrixType_1 = __webpack_require__(0);
var AssaultMelee = (function (_super) {
    __extends(AssaultMelee, _super);
    function AssaultMelee() {
        var _this = _super.call(this) || this;
        _this.name = 'assaultMelee';
        _this[1] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_ZYNTHIUM_ALKALIDE); };
        _this[2] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_GHODIUM_ALKALIDE); };
        _this[3] = function (c) { return _this._nextState(c); };
        _this[4] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_UTRIUM_ACID); };
        _this[5] = _this._disableRenew;
        _this[6] = _this._march;
        _this[7] = _this._fight;
        _this[8] = _this._travelHome;
        _this[9] = _this._recycle;
        return _this;
    }
    AssaultMelee.prototype._getMyHealBoostMultiplier = function () {
        return 4;
    };
    AssaultMelee.prototype._getMyDismantleBoostMultiplier = function () {
        return 1;
    };
    AssaultMelee.prototype._combatActions = function (creep) {
        return this._healMySignificantDamage(creep) ||
            this._meleeAttack(creep) ||
            this._attackFocusedStructure(creep, 1) ||
            this._attackHostileStructuresNear(creep) ||
            this._healMyMinorDamage(creep) ||
            this._healOthersNearby(creep) ||
            this._healOthersAtDistance(creep) ||
            this._overheal(creep);
    };
    AssaultMelee.prototype._march = function (creep) {
        this._combatActions(creep);
        if (!_.isUndefined(creep.memory['moved'])) {
            delete creep.memory['moved'];
            return true;
        }
        return this._travelToAssignment(creep, CostMatrixType_1.CostMatrixType.Military);
    };
    AssaultMelee.prototype._fight = function (creep) {
        this._combatActions(creep);
        if (!_.isUndefined(creep.memory['moved'])) {
            delete creep.memory['moved'];
            return true;
        }
        var flag = this._getMyFlag(creep);
        if (flag &&
            creep.memory['spawnedFromRoom'] &&
            !creep.memory['replacementCalled'] &&
            flag.memory['squad'] &&
            _.some(flag.memory['squad']['creeps']) &&
            flag.memory['squad']['ttl'] &&
            (creep.ticksToLive <= flag.memory['squad']['ttl'])) {
            creep.memory['replacementCalled'] = true;
            Squad_1.default(creep.memory['spawnedFromRoom'], flag.name, flag.memory['squad']['creeps']);
        }
        var rampartsPositions = _.map(creep.room.find(FIND_HOSTILE_STRUCTURES, { filter: function (s) { return (s.structureType == STRUCTURE_RAMPART) && (s.hits > 5000); } }), function (s) { return s.pos.pack(); });
        var position = (flag && _.includes([COLOR_BLUE, COLOR_GREEN], flag.color)) ? flag.pos : creep.pos;
        var towers = creep.room.find(FIND_HOSTILE_STRUCTURES, { filter: { structureType: STRUCTURE_TOWER } });
        var closestTower = creep.pos.findClosestByRange(_.filter(towers, function (t) { return t.energy >= TOWER_ENERGY_COST; }));
        var tooDangerous = function (t) { return !!closestTower && (t.pos.getRangeTo(closestTower) < 11); };
        var target = Game.getObjectById(creep.memory['focusedObject']);
        if (target) {
            if (tooDangerous(target)) {
                console.log(creep.name + " dropping target " + target + ": too dangerous");
                target = null;
                delete creep.memory['focusedObject'];
                this._setState(creep, this._getState(creep) - 1);
                return true;
            }
            var underRampart = _.includes(rampartsPositions, target.pos.pack()) && !(target instanceof StructureRampart);
            if (underRampart) {
                console.log(creep.name + " dropping target " + target + ": under rampart");
                target = null;
                delete creep.memory['focusedObject'];
            }
        }
        var chase = !closestTower || creep.pos.getRangeTo(closestTower) > 14;
        if (!target) {
            target = this._findTarget(position, chase ? 4 : 0, chase ? 5 : 0);
            if (chase && !target) {
                target = this._findTarget(position, 50, 50);
            }
        }
        if (target) {
            if (chase && target instanceof Structure && (target.hits > 10000)) {
                var newTarget = this._findTarget(position, 4, 5);
                if (newTarget && newTarget != target) {
                    target = newTarget;
                    console.log(creep.name + " switch to new target: " + target);
                }
            }
            creep.memory['focusedObject'] = target.id;
            var range = (target instanceof ConstructionSite) ? 0 : 1;
            console.log(creep.name + " target: " + target + " (CS: " + (target instanceof ConstructionSite) + "), range " + range + " (dangerous: " + tooDangerous(target) + ")");
            if ((creep.pos.getRangeTo(target) > range) && !tooDangerous(target)) {
                this._moveInRaid(creep, target.pos, {
                    costMatrixType: CostMatrixType_1.CostMatrixType.Military,
                    range: range,
                    maxRooms: 1
                });
                return true;
            }
        }
        else {
            delete creep.memory['focusedObject'];
            if (flag && flag.pos.roomName == creep.pos.roomName) {
                if (!creep.pos.isNearTo(flag)) {
                    this._moveInRaid(creep, flag.pos, {
                        costMatrixType: CostMatrixType_1.CostMatrixType.Military,
                        range: 1,
                        maxRooms: 1
                    });
                }
                return true;
            }
            this._setState(creep, this._getState(creep) - 1);
            return true;
        }
        return true;
    };
    return AssaultMelee;
}(FighterBase_1.default));
exports.default = AssaultMelee;


/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var BehaviorBase_1 = __webpack_require__(2);
var Spawn_1 = __webpack_require__(3);
var CostMatrixType_1 = __webpack_require__(0);
var FormationFactory_1 = __webpack_require__(49);
var SquadState;
(function (SquadState) {
    SquadState["Spawning"] = "spawning";
    SquadState["Gathering"] = "gathering";
    SquadState["Travelling"] = "travelling";
    SquadState["Working"] = "working";
})(SquadState = exports.SquadState || (exports.SquadState = {}));
var Squad = (function () {
    function Squad(squadData) {
        this._formation = null;
        this._data = squadData;
    }
    Squad.prototype.tick = function () {
        switch (this.state) {
            case SquadState.Spawning:
                this.SpawnSquad();
                return;
            case SquadState.Gathering:
                this.GetTogether();
                return;
            case SquadState.Travelling:
                this.Travel();
                return;
            case SquadState.Working:
                this.Work();
                return;
        }
        throw new Error("Unhandled squad state: " + this.state);
    };
    Squad.prototype.SpawnSquad = function () {
        while (this.creepsNames.length < this.CreepsSetups.length) {
            var chunkIndex = Math.floor(this.creepsNames.length / this.ChunkSize);
            var roomIndex = chunkIndex % this._data.spawnRoomNames.length;
            var spawnedCreepName = Spawn_1.addToSpawnQueueBySetup(this._data.spawnRoomNames[roomIndex], this.CreepsSetups[this._data.creepsNames.length], this._data.assign, 1, this.id + "-" + this.creepsNames.length);
            this.creepsNames.push(spawnedCreepName);
        }
        if (!this.spawning) {
            console.log(this.id + ": squad spawned");
            this.state = SquadState.Gathering;
        }
        else {
            console.log(this.id + " still spawning creeps");
        }
    };
    Squad.prototype.GetAwayFromSpawner = function () {
    };
    Squad.prototype.GetTogether = function () {
        var _this = this;
        var central = this.CentralCreep;
        if (central == null) {
            console.log("Something went wrong for squad " + this.id + ": central creep not found");
            return;
        }
        if (_.every(this.Members, function (c) { return _.isUndefined(c) || c.pos.getRangeTo(_this.gatheringPoint) <= 2 * _this.ChunkSize; })) {
            this.state = SquadState.Travelling;
            return;
        }
        if (!this.CentralCreep.pos.isEqualTo(this.gatheringPoint)) {
            BehaviorBase_1.default.GoToPosition(this.CentralCreep, this.gatheringPoint, { costMatrixType: CostMatrixType_1.CostMatrixType.Military });
        }
        var that = this;
        var positions = that.Formation.GetMembersPositions(that.gatheringPoint, that.CurrentFacing);
        var ci = that.Formation.CentralIndex();
        _.forEach(that.Members, function (c) {
            if (_.isUndefined(c)) {
                return;
            }
            var myIndex = that.Members.indexOf(c);
            if (c.pos.getRangeTo(positions[ci]) < 2 * that.ChunkSize) {
                var costs_1 = {};
                costs_1[positions[myIndex].pack()] = Infinity;
                BehaviorBase_1.default.GoToPosition(c, positions[myIndex], { costMatrixType: CostMatrixType_1.CostMatrixType.Military, addCosts: costs_1 });
                return;
            }
            if (myIndex > 0) {
                var headingCreep = that.Members[myIndex - 1];
                if (!_.isUndefined(headingCreep) && c.pos.isNearTo(headingCreep)) {
                    c.move(c.pos.getDirectionTo(headingCreep));
                    return;
                }
                else {
                    var costs_2 = {};
                    costs_2[positions[ci].pack()] = Infinity;
                    BehaviorBase_1.default.GoToPosition(c, positions[myIndex], { costMatrixType: CostMatrixType_1.CostMatrixType.Military, addCosts: costs_2 });
                    return;
                }
            }
            var costs = {};
            costs[positions[ci].pack()] = Infinity;
            BehaviorBase_1.default.GoToPosition(c, positions[0], { costMatrixType: CostMatrixType_1.CostMatrixType.Military, addCosts: costs });
        });
    };
    Object.defineProperty(Squad.prototype, "gatheringPoint", {
        get: function () {
            return Game.flags[this._data.assign].pos;
        },
        enumerable: true,
        configurable: true
    });
    Squad.prototype.positionIsGood = function (pos) {
        return _.every(this.Formation.GetMembersPositions(pos, this.CurrentFacing), function (p) { return p.isWalkable(); });
    };
    Squad.prototype.Travel = function () {
        if (this.SquadFlag != null) {
            this.TravelAsFormation(this.SquadFlag.pos);
        }
    };
    Object.defineProperty(Squad.prototype, "SquadFlag", {
        get: function () {
            return Game.flags[this._data.assign];
        },
        enumerable: true,
        configurable: true
    });
    Squad.prototype.TravelAsFormation = function (dst) {
        if (_.some(this.Members, function (c) { return (c != null) && c.pos.isEdge(); }) || this.IsCorrectPlacement()) {
            this.EnsureFacing();
            BehaviorBase_1.default.GoToPosition(this, dst, { costMatrixType: CostMatrixType_1.CostMatrixType.Military });
            console.log(this.id + ": The are in formation, actual facing " + this.GetActualFacing());
        }
        else {
            this.EnsureFormation();
            console.log(this.id + ": The are not in formation");
        }
    };
    Squad.prototype.IsCorrectPlacement = function () {
        var _this = this;
        var result = true;
        var positions = this.Formation.GetMembersPositions(this.SquadPosition, this.CurrentFacing);
        for (var i in this.Members) {
            if (!_.isUndefined(this.Members[i]) && !_.some(positions, function (p) { return p.isEqualTo(_this.Members[i].pos); })) {
                result = false;
            }
        }
        return result;
    };
    Squad.prototype.GetActualFacing = function () {
        var keyCreep = _.first(_.without(_.compact(this.Members), this.CentralCreep));
        var keyIndex = this.Members.indexOf(keyCreep);
        var actualKeyDirection = this.CentralCreep.pos.getDirectionTo(keyCreep);
        var positions = this.Formation.GetMembersPositions(this.CentralCreep.pos, 1);
        var expectedKeyDirection = positions[this.Formation.CentralIndex()].getDirectionTo(positions[keyIndex]);
        return 1 + (actualKeyDirection - expectedKeyDirection) % 8;
    };
    Squad.prototype.EnsureFormation = function () {
        var result = true;
        var positions = this.Formation.GetMembersPositions(this.SquadPosition, this.CurrentFacing);
        for (var i in this.Members) {
            if (!_.isUndefined(this.Members[i]) && !this.Members[i].pos.isEqualTo(positions[i])) {
                BehaviorBase_1.default.GoToPosition(this.Members[i], positions[i], { costMatrixType: CostMatrixType_1.CostMatrixType.Military });
                result = false;
            }
        }
        return result;
    };
    Squad.prototype.EnsureFacing = function () {
        var actualFacing = this.GetActualFacing();
        var expectedFacing = this.CurrentFacing;
        if (actualFacing != expectedFacing) {
            return !this.Rotate(expectedFacing);
        }
    };
    Object.defineProperty(Squad.prototype, "Spawners", {
        get: function () {
            if (_.isUndefined(this._data['spawners'])) {
                var spawners = _.flatten(this.SpawnRooms.map(function (r) { return r.find(FIND_MY_SPAWNS, { filter: function (s) { return s.isActive(); } }); }));
                this._data['spawners'] = spawners.map(function (s) { return s.id; });
                return spawners;
            }
            return this._data['spawners'].map(function (i) { return Game.getObjectById(i); });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Squad.prototype, "id", {
        get: function () {
            return this._data.squadId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Squad.prototype, "SquadPosition", {
        get: function () {
            return this.CentralCreep.pos;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Squad.prototype, "Members", {
        get: function () {
            if (this._data.creepsNames == null) {
                return [];
            }
            return this._data.creepsNames.map(function (n) { return Game.creeps[n]; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Squad.prototype, "CentralCreep", {
        get: function () {
            if (_.isUndefined(this._data['centralCreep'])) {
                var creep = this.Members[this.Formation.CentralIndex()];
                this._data['centralCreep'] = creep.name;
                return creep;
            }
            return Game.creeps[this._data['centralCreep']];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Squad.prototype, "SpawnRooms", {
        get: function () {
            return this._data.spawnRoomNames.map(function (r) { return Game.rooms[r]; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Squad.prototype, "memory", {
        get: function () {
            return this._data;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Squad.prototype, "spawning", {
        get: function () {
            return _.some(this.Members, function (m) { return (m == null) || m.spawning; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Squad.prototype, "fatigue", {
        get: function () {
            return _.max(_.map(_.compact(this.Members), function (c) { return c.fatigue; }));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Squad.prototype, "pos", {
        get: function () {
            return this.SquadPosition;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Squad.prototype, "CurrentFacing", {
        get: function () {
            if (_.isUndefined(this._data.currentFacing)) {
                this._data.currentFacing = 1;
            }
            return this._data.currentFacing;
        },
        enumerable: true,
        configurable: true
    });
    Squad.prototype.move = function (direction) {
        _.forEach(_.compact(this.Members), function (m) { return m.move(direction); });
        return OK;
    };
    Object.defineProperty(Squad.prototype, "Formation", {
        get: function () {
            if (_.isUndefined(this._formation) || this._formation == null) {
                this._formation = FormationFactory_1.default.GetFormation(this.formationId);
            }
            return this._formation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Squad.prototype, "State", {
        get: function () {
            return this.state;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Squad.prototype, "state", {
        get: function () {
            if (_.isUndefined(this._data['state'])) {
                this._data['state'] = SquadState.Spawning;
            }
            return this._data['state'];
        },
        set: function (value) {
            this._data['state'] = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Squad.prototype, "creepsNames", {
        get: function () {
            if (_.isUndefined(this._data.creepsNames)) {
                this._data.creepsNames = [];
            }
            return this._data.creepsNames;
        },
        enumerable: true,
        configurable: true
    });
    return Squad;
}());
exports.Squad = Squad;


/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var MarketTaskType;
(function (MarketTaskType) {
    MarketTaskType[MarketTaskType["Sell"] = 0] = "Sell";
    MarketTaskType[MarketTaskType["Buy"] = 1] = "Buy";
})(MarketTaskType = exports.MarketTaskType || (exports.MarketTaskType = {}));


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var RoadStatus;
(function (RoadStatus) {
    RoadStatus["Healthy"] = "healthy";
    RoadStatus["WornOut"] = "wornout";
    RoadStatus["Broken"] = "broken";
})(RoadStatus = exports.RoadStatus || (exports.RoadStatus = {}));


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Config_1 = __webpack_require__(8);
var ProcessList_1 = __webpack_require__(9);
var main_1 = __webpack_require__(48);
var la1000 = [];
var la100 = [];
var la10 = [];
var counter = 0;
function formatCpu(cpu) {
    return Math.floor(100 * (cpu)) / 100;
}
function argumentsString(p) {
    var result = p.name;
    if (p.processInfo.args) {
        p.processInfo.args.forEach(function (arg) { return result = result + " " + arg; });
    }
    return result;
}
exports.argumentsString = argumentsString;
function formatProcessInfoLine(p) {
    var pid = _.padRight("" + p.id.toFixed(0), 10);
    var args = _.padRight("" + argumentsString(p), 70);
    var cpuE = _.padRight("" + (p.processInfo.cpuSpent / p.processInfo.executionTicks).toFixed(2), 10);
    var cpuT = _.padRight("" + (p.processInfo.cpuSpent / (Game.time - p.processInfo.launchLick)).toFixed(2), 10);
    var pri = _.padRight(p.processInfo.priority + "-" + (p.processInfo.priorityBonus || 0), 5);
    return "" + pid + args + cpuE + cpuT + pri;
}
exports.formatProcessInfoLine = formatProcessInfoLine;
function execlp(parentId, name, args) {
    return ProcessList_1.createProcess(parentId, name, args);
}
exports.execlp = execlp;
function execl(name, args) {
    return ProcessList_1.createProcess(0, name, args, 10);
}
exports.execl = execl;
function reboot() {
    delete Memory['proc'];
    delete Memory['processTable'];
    delete Memory['lastPid'];
}
exports.reboot = reboot;
function tick() {
    var reportingEnabled = Game.cpu.bucket < 4400;
    var useBomb = Game.cpu.bucket < 3000;
    var init = Game.cpu.getUsed();
    if (_.isUndefined(Memory['CodeRevision']) || (Memory['CodeRevision'] != main_1.CodeRevision)) {
        Memory['CodeRevision'] = main_1.CodeRevision;
        reboot();
    }
    if (_.isUndefined(Memory['proc'])) {
        Memory['proc'] = {};
    }
    var beforeGc = Game.cpu.getUsed();
    var gcTime = Game.cpu.getUsed();
    var kernelCpuStart = Game.cpu.getUsed();
    var bucketState = (Game.cpu.bucket - Config_1.targetBucket) / 1000;
    var thisTickLimit = Game.cpu.limit * (1 + 0.15 * bucketState);
    var criticalLimit = Game.cpu.limit * (1 + 0.15 * bucketState) + 100;
    var processList = ProcessList_1.GetProcessList();
    if (!_.some(processList)) {
        execlp(0, '/sbin/init', []);
    }
    var processesCpu = 0;
    var lastPri = 0;
    var lastBonus = 0;
    var lastProc = null;
    var monitor = [];
    var kernelStats = {
        runned: 0,
        sleeping: 0,
        blocked: 0,
        min: 0,
        max: 0,
        critical_blocked: 0
    };
    for (var i = 0; i < processList.length; i++) {
        var process_1 = processList[i];
        var running = true;
        switch (process_1.state) {
            case ProcessList_1.ProcessState.Created:
                process_1.processInfo.state = ProcessList_1.ProcessState.Running;
                console.log("Launched process " + process_1.id + ":" + argumentsString(process_1));
            case ProcessList_1.ProcessState.Running:
                if (!process_1.processInfo || !process_1.processInfo.args) {
                    process_1.processInfo.state = ProcessList_1.ProcessState.Killed;
                    continue;
                }
                if (!_.isUndefined(process_1.processInfo.awakeAtTick) && (process_1.processInfo.awakeAtTick > Game.time)) {
                    kernelStats.sleeping++;
                    continue;
                }
                delete process_1.processInfo.awakeAtTick;
                var thisProcessAvg = process_1 && process_1.processInfo.executionTicks ? process_1.processInfo.cpuSpent / process_1.processInfo.executionTicks : 0;
                var currentLimit = (process_1.priority - process_1.processInfo.priorityBonus) <= Config_1.criticalPriority ? criticalLimit : thisTickLimit;
                if (Game.cpu.getUsed() > (2 * thisProcessAvg + currentLimit)) {
                    running = false;
                }
                if (!running) {
                    kernelStats.blocked++;
                    if (process_1.priority <= Config_1.criticalPriority) {
                        kernelStats.critical_blocked++;
                    }
                    process_1.processInfo.priorityBonus = 1 + (process_1.processInfo.priorityBonus || 0);
                }
                else {
                    try {
                        lastProc = process_1;
                        lastBonus = process_1.processInfo.priorityBonus;
                        lastPri = process_1.priority - process_1.processInfo.priorityBonus;
                        process_1.processInfo.priorityBonus = 0;
                        var before = Game.cpu.getUsed();
                        process_1.beginTick();
                        process_1.tick();
                        process_1.endTick();
                        var after = Game.cpu.getUsed();
                        var time = after - before;
                        if (kernelStats.min == 0 || (time < kernelStats.min))
                            kernelStats.min = time;
                        if (kernelStats.max == 0 || (time > kernelStats.max))
                            kernelStats.max = time;
                        var detectedGC = false;
                        var processAvg = process_1.processInfo.cpuSpent / process_1.processInfo.executionTicks;
                        if (time > Math.max(1, processAvg * 10)) {
                            monitor.push({
                                process: formatProcessInfoLine(process_1),
                                time: time,
                                detectedGC: detectedGC
                            });
                        }
                        kernelStats.runned++;
                        processesCpu += time;
                    }
                    catch (e) {
                        if (e != null) {
                            console.log("<font color=\"red\">Process.tick() (" + process_1.id + ":" + process_1.name + ") exception: " + e.message + "\r\n" + e.stack + "</font>");
                        }
                        else {
                            console.log("<font color=\"red\">Process.tick() (" + process_1.id + ":" + process_1.name + ") no exception</font>");
                        }
                        continue;
                    }
                }
                break;
            case ProcessList_1.ProcessState.Killed:
                delete Memory['proc'][process_1.id];
                delete Memory['processTable'][process_1.id];
                console.log("Killed process " + process_1.id + ":" + argumentsString(process_1));
                break;
            default:
                console.log("process " + process_1.id + " (" + process_1.name + ") state " + process_1.state);
                break;
        }
    }
    var kernelCpuEnd = Game.cpu.getUsed();
    if (reportingEnabled) {
        var avg = processesCpu / kernelStats.runned;
        la1000.push(avg);
        while (la1000.length > 1000) {
            la1000.shift();
        }
        ;
        var avg1000 = _.sum(la1000) / la1000.length;
        la100.push(avg);
        while (la100.length > 100) {
            la100.shift();
        }
        ;
        var avg100 = _.sum(la100) / la100.length;
        la10.push(avg);
        while (la10.length > 10) {
            la10.shift();
        }
        ;
        var avg10 = _.sum(la10) / la10.length;
        console.log("CNT: " + counter++ + " BCT: " + Game.cpu.bucket + "; INIT: " + formatCpu(init) + "; GC " + formatCpu(gcTime - beforeGc) + " | RUN: " + kernelStats.runned + ", SLP: " + kernelStats.sleeping + ", BLK: " + kernelStats.blocked + " (last: " + lastPri + "/" + lastProc.processInfo.priority + "-" + lastBonus + ") | KERN:" + formatCpu(kernelCpuEnd - kernelCpuStart - processesCpu) + " | PROC: " + formatCpu(processesCpu) + "/" + formatCpu(thisTickLimit) + " (" + formatCpu(kernelStats.min) + "/" + formatCpu(kernelStats.max) + "/" + formatCpu(avg) + "), LA " + formatCpu(avg10) + "/" + formatCpu(avg100) + "/" + formatCpu(avg1000));
        var lastExplosive = Memory['lastExplosionTick'] || 0;
        if (useBomb && (Game.cpu.bucket < 2000) && (Game.time > (1000 + lastExplosive)) && (avg10 > avg100)) {
            Memory['lastExplosionTick'] = 1 + Game.time;
        }
    }
}
exports.tick = tick;


/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Config_1 = __webpack_require__(8);
var FighterBase_1 = __webpack_require__(13);
var Spawn_1 = __webpack_require__(3);
var TickCache_1 = __webpack_require__(1);
var BehaviorBase_1 = __webpack_require__(2);
var CostMatrixType_1 = __webpack_require__(0);
var RoomProvider_1 = __webpack_require__(12);
var Suppressor = (function (_super) {
    __extends(Suppressor, _super);
    function Suppressor() {
        var _this = _super.call(this) || this;
        _this.name = 'suppressor';
        _this[1] = _this._fight;
        _this[2] = _this._bulldoze;
        return _this;
    }
    Suppressor.prototype._getMyHealBoostMultiplier = function () {
        return 1;
    };
    Suppressor.prototype._getMyDismantleBoostMultiplier = function () {
        return 1;
    };
    Suppressor.prototype._fight = function (creep) {
        this._combatActions(creep);
        if (creep.room.controller != null) {
            var toBulldoze = this._findConstructionSite(creep);
            if (toBulldoze != null) {
                creep.memory['bulldozePos'] = toBulldoze.pos.pack();
                this._nextState(creep);
                return false;
            }
        }
        if (this._escort(creep)) {
            return true;
        }
        var currentAssignment = creep.memory['current'] || Spawn_1.getAssignmentByName(creep.name);
        var flag = Game.flags[currentAssignment];
        var target = Game.getObjectById(creep.memory['targetId']);
        if (!target) {
            if (creep.memory['targetId']) {
                delete creep.memory['targetId'];
                RoomProvider_1.default.UpdateRoom(creep.room);
            }
            if (flag.pos.roomName == creep.pos.roomName) {
                target = this._findTarget(creep.pos, 25, 25);
            }
        }
        if (target) {
            creep.memory['targetId'] = target.id;
            if (!creep.pos.isNearTo(target.pos)) {
                BehaviorBase_1.default.GoToPosition(creep, target.pos, {
                    costMatrixType: CostMatrixType_1.CostMatrixType.Military,
                    range: (target instanceof Structure) ? 1 : 2,
                    maxRooms: 1
                });
            }
            return true;
        }
        else {
            if (flag && (creep.pos.roomName == flag.pos.roomName) && flag.memory['next']) {
                creep.memory['current'] = flag.memory['next'];
                return true;
            }
        }
        if ((flag == null)) {
            return true;
        }
        return this._moveInRaidToFlag(creep, CostMatrixType_1.CostMatrixType.Military, 0) ||
            this._travelToFlag(creep, flag, 0, CostMatrixType_1.CostMatrixType.Military) ||
            this._moveToFlag(creep, 0, CostMatrixType_1.CostMatrixType.Military) || true;
    };
    Suppressor.prototype._escort = function (creep) {
        var myFlag = this._getMyFlag(creep);
        if ((myFlag == null) || (myFlag.secondaryColor != COLOR_PURPLE)) {
            return false;
        }
        var enemyTroops = TickCache_1.__find(creep.room, FIND_HOSTILE_CREEPS, {
            filter: function (c) { return (!_.includes(Config_1.alliedPlayers, c.owner.username) &&
                ((c.getActiveBodyparts(ATTACK) > 0) || (c.getActiveBodyparts(RANGED_ATTACK) > 0))); }
        });
        if (!_.some(enemyTroops)) {
            return false;
        }
        var myCivils = TickCache_1.__find(creep.room, FIND_CREEPS, {
            filter: function (c) { return (c.my || _.includes(Config_1.alliedPlayers, c.owner.username)) &&
                (c.getActiveBodyparts(ATTACK) == 0) &&
                (c.getActiveBodyparts(RANGED_ATTACK) == 0) &&
                (c.getActiveBodyparts(HEAL) == 0); }
        });
        if (!_.some(myCivils)) {
            return false;
        }
        var civilsRanges = myCivils.map(function (civil) {
            return {
                civil: civil,
                range: civil.pos.getRangeTo(civil.pos.findClosestByRange(enemyTroops))
            };
        });
        var minRange = _.min(civilsRanges.map(function (cr) { return cr.range; }));
        var civsAtMostDanger = _.filter(civilsRanges, function (cr) { return cr.range == minRange; });
        var civilianToProtect = creep.pos.findClosestByRange(civsAtMostDanger.map(function (c) { return c.civil; }));
        if (civilianToProtect == null) {
            return false;
        }
        if (!creep.pos.isNearTo(civilianToProtect)) {
            BehaviorBase_1.default.GoToPosition(creep, civilianToProtect.pos, { costMatrixType: CostMatrixType_1.CostMatrixType.Military });
        }
        else {
            creep.move(creep.pos.getDirectionTo(civilianToProtect.pos));
        }
        return true;
    };
    Suppressor.prototype._chase = function (creep) {
        var myFlag = Game.flags[Spawn_1.getAssignmentByName(creep.name)];
        var target = null;
        var hostiles = TickCache_1.__findInRange(creep.pos, FIND_HOSTILE_CREEPS, 3, { filter: function (c) { return !_.contains(Config_1.alliedPlayers, c.owner.username); } });
        var melees = _.filter(hostiles, function (h) { return h.getActiveBodyparts(ATTACK) > 0; });
        if (_.some(melees)) {
            target = creep.pos.findClosestByRange(melees);
        }
        if (target == null) {
            target = Game.getObjectById(creep.memory['targetId']);
        }
        if (target == null) {
            target = creep.pos.findClosestByRange(hostiles);
        }
        if (target == null) {
            delete creep.memory['targetId'];
            return false;
        }
        if (_.some(target.pos.findInRange(FIND_STRUCTURES, 0, { filter: { structureType: STRUCTURE_RAMPART } }))) {
            delete creep.memory['targetId'];
            return false;
        }
        if (!(target instanceof Creep)) {
            return false;
        }
        creep.memory['targetId'] = target.id;
        if ((target.pos.getRangeTo(myFlag) > 5) && (target.pos.getRangeTo(creep) >= 3) && (target.hits == target.hitsMax)) {
            delete creep.memory['targetId'];
            return false;
        }
        var meleeTarget = (target.getActiveBodyparts(ATTACK) * target.getActiveBodyparts(MOVE)) > 0;
        this._keepDistance(creep, target, meleeTarget ? 3 : 1, meleeTarget ? 3 : 2);
        return true;
    };
    Suppressor.prototype._keepDistance = function (creep, hostile, minRange, maxRange) {
        if (hostile.pos.getRangeTo(creep) < minRange) {
            BehaviorBase_1.default.Flee(creep, hostile, minRange + 10, CostMatrixType_1.CostMatrixType.FullSpeed);
            return;
        }
        if ((hostile.pos.getRangeTo(creep)) > maxRange && (hostile.hits < hostile.hitsMax)) {
            BehaviorBase_1.default.GoToPosition(creep, hostile.pos, { costMatrixType: CostMatrixType_1.CostMatrixType.Military, range: 2 });
        }
    };
    Suppressor.prototype._bulldoze = function (creep) {
        this._combatActions(creep);
        if (!_.isUndefined(creep.memory['bulldozePos'])) {
            var pos = RoomPosition.unpack(creep.memory['bulldozePos']);
            if (creep.pos.isEqualTo(pos)) {
                delete creep.memory['bulldozePos'];
                creep.say('ouch', true);
                this._prevState(creep);
                return false;
            }
            BehaviorBase_1.default.GoToPosition(creep, pos, { costMatrixType: CostMatrixType_1.CostMatrixType.Military });
            return true;
        }
        var toBulldoze = this._findConstructionSite(creep);
        if (toBulldoze == null) {
            this._prevState(creep);
            return false;
        }
        creep.memory['bulldozePos'] = toBulldoze.pos.pack();
        BehaviorBase_1.default.GoToPosition(creep, toBulldoze.pos, { costMatrixType: CostMatrixType_1.CostMatrixType.Military });
        return true;
    };
    Suppressor.prototype._combatActions = function (creep) {
        var rangedAttack = this._rangedAttacks(creep) || this._attackFocusedStructure(creep, 3);
        var heal = this._healMySignificantDamage(creep) ||
            this._healOthersNearby(creep) ||
            this._healMyMinorDamage(creep) ||
            this._healOthersAtDistance(creep);
        if (!rangedAttack) {
            if (!heal) {
                heal = this._healOthersAtDistance(creep);
            }
            this._defaultRMA(creep);
        }
        if (!heal) {
            this._overheal(creep);
        }
        return true;
    };
    Suppressor.prototype._defaultRMA = function (creep) {
        var flag = Game.flags[creep.memory['current'] || Spawn_1.getAssignmentByName(creep.name)];
        if ((flag == null) || (flag.color != COLOR_RED)) {
            return false;
        }
        if (creep.room.controller && (creep.room.controller.my || _.isUndefined(creep.room.controller.owner) || _.includes(Config_1.alliedPlayers, creep.room.controller.owner.username))) {
            return false;
        }
        var rampartsPositions = _.map(creep.room.find(FIND_HOSTILE_STRUCTURES, { filter: { structureType: STRUCTURE_RAMPART } }), function (s) { return s.pos.pack(); });
        var storage = creep.room.storage;
        if (storage && (creep.pos.getRangeTo(storage) <= 3) && !_.includes(rampartsPositions, storage.pos.pack())) {
            return false;
        }
        var terminal = creep.room.terminal;
        if (terminal && (creep.pos.getRangeTo(terminal) <= 3) && !_.includes(rampartsPositions, terminal.pos.pack())) {
            return false;
        }
        creep.rangedMassAttack();
        return true;
    };
    Suppressor.prototype._findConstructionSite = function (creep) {
        var opts = BehaviorBase_1.default.FormOptions(creep, { costMatrixType: CostMatrixType_1.CostMatrixType.Military });
        return creep.pos.findClosestByPath(FIND_CONSTRUCTION_SITES, {
            costCallback: opts.roomCallback,
            filter: function (cs) {
                return !_.includes([STRUCTURE_EXTRACTOR, STRUCTURE_ROAD], cs.structureType) &&
                    (cs.progress >= (cs.progressTotal / 4)) &&
                    !cs.my &&
                    !_.contains(Config_1.alliedPlayers, cs.owner.username);
            }
        });
    };
    return Suppressor;
}(FighterBase_1.default));
exports.default = Suppressor;


/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var TickCache_1 = __webpack_require__(1);
var BehaviorBase_1 = __webpack_require__(2);
var CostMatrixType_1 = __webpack_require__(0);
var Worker_1 = __webpack_require__(42);
var Nomad = (function (_super) {
    __extends(Nomad, _super);
    function Nomad() {
        var _this = _super.call(this) || this;
        _this.name = 'nomad';
        _this._findEnergySource = function (creep) {
            var res = creep.pos.findClosestByPath(FIND_DROPPED_RESOURCES, { filter: function (r) { return (r.resourceType == RESOURCE_ENERGY) && (r.amount >= 100); } });
            if (res) {
                return res;
            }
            var tombstone = creep.pos.findClosestByPath(FIND_TOMBSTONES, { filter: function (t) { return t.store[RESOURCE_ENERGY] >= 100; } });
            if (tombstone) {
                return tombstone;
            }
            var ruin = creep.pos.findClosestByPath(FIND_RUINS, { filter: function (r) { return r.store[RESOURCE_ENERGY] > 0; } });
            if (ruin) {
                return ruin;
            }
            if (creep.room.memory['emptyTerminal'] && (creep.room.terminal != null) && (creep.room.terminal.store[RESOURCE_ENERGY] > 0)) {
                return creep.room.terminal;
            }
            var enemyStructures = TickCache_1.__find(creep.room, FIND_HOSTILE_STRUCTURES, {
                filter: function (s) { return !_.isUndefined(s.owner) && (s.structureType != STRUCTURE_NUKER); }
            });
            var enemyEnergyStructures = _.filter(enemyStructures, function (s) { return !_.isUndefined(s['energy']); });
            if (_.some(enemyEnergyStructures)) {
                var empty = _.filter(enemyEnergyStructures, function (s) { return s['energy'] == 0; });
                if (_.some(empty)) {
                    _.forEach(empty, function (s) { return s.destroy(); });
                }
                var withEnergy = _.filter(enemyEnergyStructures, function (s) { return s['energy'] > 0; });
                if (_.some(withEnergy)) {
                    return creep.pos.findClosestByPath(withEnergy, {
                        ignoreCreeps: true
                    });
                }
            }
            var structs = TickCache_1.__find(creep.room, FIND_STRUCTURES, {
                filter: function (s) {
                    return _.includes([STRUCTURE_CONTAINER, STRUCTURE_TERMINAL], s.structureType) && (s.store.energy >= (creep.carryCapacity - _.sum(creep.carry))) ||
                        ((s.structureType == STRUCTURE_STORAGE) && ((s.store[RESOURCE_ENERGY] > 15000) || (!s.my && (s.store.energy > 0)) || (s.pos.getRangeTo(s.room.controller.pos) <= 5) && (s.store[RESOURCE_ENERGY] > 0))) ||
                        ((s.structureType == STRUCTURE_LINK) && (s.energy >= (creep.carryCapacity - _.sum(creep.carry))));
                }
            });
            if (_.some(structs) && !_.isUndefined(creep.room.storage) && ((creep.room.storage.store[RESOURCE_ENERGY] > 15000) || (!creep.room.storage.my && creep.room.storage.store.energy > 0) || (creep.room.storage.pos.getRangeTo(creep.room.controller.pos) <= 5))) {
                return creep.pos.findClosestByPath(structs, {
                    ignoreCreeps: true
                });
            }
            if (!_.isUndefined(creep.room.terminal) && (creep.room.terminal.store[RESOURCE_ENERGY] > 0)) {
                return creep.room.terminal;
            }
            if (creep.memory['mySourceId']) {
                return Game.getObjectById(creep.memory['mySourceId']);
            }
            var source = _.first(TickCache_1.__find(creep.room, FIND_SOURCES).sort(function (a, b) { return (b.energy - a.energy) || (a.ticksToRegeneration - b.ticksToRegeneration); }));
            if ((source.energy == 0) && (creep.carry[RESOURCE_ENERGY] > 0)) {
                creep.memory['state'] = 1 + creep.memory['state'];
            }
            return source;
        };
        _this._myInitialPositionRange = 1;
        _this[1] = _this._charge;
        _this[2] = _this._travelToAssignment;
        _this[3] = _this._charge;
        _this[4] = _this._work;
        _this[5] = _this._chargeExtensions;
        _this[6] = _this._renew;
        return _this;
    }
    Nomad.prototype._travelToAssignment = function (creep) {
        if (!_.isUndefined(creep.memory['energyStorageId'])) {
            delete creep.memory['energyStorageId'];
        }
        if (!_.isUndefined(creep.memory['csId']) && (creep.carry[RESOURCE_ENERGY] > 0)) {
            var cs = Game.getObjectById(creep.memory['csId']);
            if (cs == null) {
                delete creep.memory['csId'];
            }
            else {
                creep.build(cs);
                return true;
            }
        }
        if (creep.fatigue > 0) {
            var cs = _.first(TickCache_1.__findInRange(creep.pos, FIND_MY_CONSTRUCTION_SITES, 0));
            if (cs == null) {
                creep.room.createConstructionSite(creep.pos, STRUCTURE_ROAD);
                return true;
            }
            else {
                creep.memory['csId'] = cs.id;
            }
            creep.build(cs);
            return true;
        }
        return _super.prototype._travelToAssignment.call(this, creep);
    };
    Nomad.prototype._findTaskPosition = function (creep) {
        var struct = this._findChargeStructure(creep);
        if (struct != null) {
            creep.memory['extId'] = struct.id;
            this._nextState(creep);
            return null;
        }
        return _super.prototype._findTaskPosition.call(this, creep) || creep.room.controller.pos.pack();
    };
    Nomad.prototype._storageLimit = function () {
        return 150000;
    };
    Nomad.prototype._chargeExtensions = function (creep) {
        if (creep.carry[RESOURCE_ENERGY] == 0) {
            this._prevState(creep);
            return false;
        }
        var chargeTarget;
        if (_.isUndefined(creep.memory['extId'])) {
            var ext = this._findChargeStructure(creep);
            if (ext == null) {
                this._prevState(creep);
                return false;
            }
            creep.memory['extId'] = ext.id;
            chargeTarget = ext;
        }
        else {
            chargeTarget = Game.getObjectById(creep.memory['extId']);
        }
        if (chargeTarget == null) {
            this._prevState(creep);
            return true;
        }
        if (chargeTarget instanceof StructureSpawn || chargeTarget instanceof StructureExtension) {
            if (chargeTarget.energy == chargeTarget.energyCapacity) {
                delete creep.memory['extId'];
                return false;
            }
        }
        if (!creep.pos.isNearTo(chargeTarget)) {
            BehaviorBase_1.default.GoToPosition(creep, chargeTarget.pos, { costMatrixType: CostMatrixType_1.CostMatrixType.FullSpeed, range: 1 });
            return true;
        }
        creep.transfer(chargeTarget, RESOURCE_ENERGY);
        delete creep.memory['extId'];
        return true;
    };
    Nomad.prototype._findChargeStructure = function (creep) {
        if (!_.isUndefined(creep.room.storage) && creep.room.storage.my && (creep.room.storage.pos.getRangeTo(creep.room.controller.pos) > 5)) {
            var storage = creep.room.storage;
            var currentEnergySource = Game.getObjectById(creep.memory['energyStorageId']);
            if ((currentEnergySource != null) &&
                ((currentEnergySource instanceof Resource) || (currentEnergySource instanceof Tombstone) || currentEnergySource instanceof Ruin)) {
                return storage;
            }
            if (!_.isUndefined(creep.room.terminal) &&
                (storage.store[RESOURCE_ENERGY] < 2000) &&
                (creep.room.terminal.store[RESOURCE_ENERGY] > 0)) {
                return storage;
            }
            if (storage.store[RESOURCE_ENERGY] < 2000) {
                return storage;
            }
        }
        var exts = creep.room.find(FIND_MY_STRUCTURES, {
            filter: function (s) {
                return (s.structureType == STRUCTURE_TOWER) &&
                    ((s.energy < 10) ||
                        ((s.energyCapacity - s.energy) >= creep.carry[RESOURCE_ENERGY]));
            }
        });
        var flag = this._getMyFlag(creep);
        if (!_.some(exts) && (flag != null) && _.includes([COLOR_ORANGE], flag.secondaryColor)) {
            exts =
                creep.room.find(FIND_MY_STRUCTURES, {
                    filter: function (s) {
                        return _.includes([STRUCTURE_EXTENSION, STRUCTURE_SPAWN], s.structureType) &&
                            (s.energy < s.energyCapacity);
                    }
                });
        }
        if (!_.some(exts)) {
            return null;
        }
        return creep.pos.findClosestByPath(exts);
    };
    Nomad.prototype._work = function (creep) {
        var flag = this._getMyFlag(creep);
        if ((flag != null) &&
            (_.includes([COLOR_GREEN], flag.secondaryColor)) &&
            (creep.ticksToLive < 750) &&
            (creep.carry[RESOURCE_ENERGY] > 0)) {
            var spawner = this._getSpawner(creep);
            if ((spawner != null) &&
                (spawner.spawning == null)) {
                delete creep.memory['energyStorageId'];
                this._setState(creep, 6);
                return false;
            }
        }
        return _super.prototype._work.call(this, creep);
    };
    Nomad.prototype._renew = function (creep) {
        var spawner = this._getSpawner(creep);
        if (spawner == null) {
            creep.say('?');
            this._setState(creep, 3);
            return true;
        }
        if (!creep.pos.isNearTo(spawner)) {
            BehaviorBase_1.default.GoToPosition(creep, spawner, { costMatrixType: CostMatrixType_1.CostMatrixType.FullSpeed, range: 1 });
            return true;
        }
        if (spawner.spawning != null) {
            return this._idle(creep);
        }
        if (creep.ticksToLive > 1400) {
            this._setState(creep, 4);
            return false;
        }
        spawner.renewCreep(creep);
        if (creep.carry[RESOURCE_ENERGY] == 0) {
            creep.say('energy');
            this._setState(creep, 3);
            return false;
        }
        creep.transfer(spawner, RESOURCE_ENERGY);
        return true;
    };
    Nomad.prototype._getSpawner = function (creep) {
        return this._getCachedObject(creep, 'spawnerId', this._findSpawner);
    };
    Nomad.prototype._findSpawner = function (creep) {
        return _.first(TickCache_1.__find(creep.room, FIND_MY_SPAWNS));
    };
    return Nomad;
}(Worker_1.Worker));
exports.default = Nomad;


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Task_1 = __webpack_require__(6);
var AmountedTask_1 = __webpack_require__(22);
var TasksRepository_1 = __webpack_require__(11);
var LabTask = (function (_super) {
    __extends(LabTask, _super);
    function LabTask() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LabTask.prototype.getBusyLabs = function () {
        var roomName = this.roomName;
        var labs = this.getLabs();
        var boostTasks = TasksRepository_1.default.QueryTasks(function (task) { return (task.Type == Task_1.TaskType.LoadBoost) && (task.roomName == roomName) && !task.isCompleted(); })
            .filter(function (t) { return t.lab != null; });
        return _.filter(labs, function (l) { return (l.energy > 0) || _.some(boostTasks, function (t) { return t.lab == l; }); });
    };
    LabTask.prototype.getLabs = function () {
        if (!_.isUndefined(this._data['labsIds'])) {
            return this._data['labsIds'].map(function (i) { return Game.getObjectById(i); });
        }
        var labs = this.room.find(FIND_MY_STRUCTURES, {
            filter: function (s) { return (s.structureType == STRUCTURE_LAB) && s.isActive(); }
        });
        this._data['labsIds'] = labs.map(function (l) { return l.id; });
        return labs;
    };
    LabTask.prototype.sourceLabs = function () {
        if (!_.isUndefined(this._data['srcLabsIds'])) {
            return this._data['srcLabsIds'].map(function (i) { return Game.getObjectById(i); });
        }
        var allLabs = this.getLabs();
        if (allLabs.length < 10) {
            return [];
        }
        var srcLabs = _.filter(allLabs, function (l) { return l.pos.findInRange(allLabs, 2).length == allLabs.length; });
        this._data['srcLabsIds'] = srcLabs.map(function (l) { return l.id; });
        return srcLabs;
    };
    LabTask.prototype.ResultLabs = function () {
        return _.without.apply(_, [this.getLabs()].concat(this.sourceLabs()));
    };
    Object.defineProperty(LabTask.prototype, "roomName", {
        get: function () {
            return this._data['roomName'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LabTask.prototype, "room", {
        get: function () {
            return Game.rooms[this.roomName];
        },
        enumerable: true,
        configurable: true
    });
    LabTask.CreateLabTaskObject = function (id, priority, amount, roomName) {
        var res = AmountedTask_1.default.CreateAmountedTaskObject(id, priority, amount);
        res['roomName'] = roomName;
        return res;
    };
    return LabTask;
}(AmountedTask_1.default));
exports.default = LabTask;


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var PositionUtils_1 = __webpack_require__(88);
var Formation = (function () {
    function Formation() {
    }
    Formation.prototype.CentralIndex = function () {
        return _.findIndex(this.TemplatedPositions, function (p) { return (p.dx == 0) && (p.dy == 0); });
    };
    Formation.prototype.GetMembersXY = function (centerPosition, direction) {
        var t = [
            undefined,
            { XtoX: 1, XtoY: 0, YtoX: 0, YtoY: 1 },
            undefined,
            { XtoX: 0, XtoY: -1, YtoX: 1, YtoY: 0 },
            undefined,
            { XtoX: -1, XtoY: 0, YtoX: 0, YtoY: -1 },
            undefined,
            { XtoX: 0, XtoY: 1, YtoX: -1, YtoY: 0 },
        ];
        var d = 1 + 2 * Math.floor((direction - 1) / 2);
        return _.map(this.TemplatedPositions, function (p) {
            var x = centerPosition[0], y = centerPosition[1];
            return [x + t[d].XtoX * p.dx + t[d].XtoY * p.dy, y + t[d].YtoY * p.dy + t[d].YtoX * p.dx];
        });
    };
    Formation.prototype.GetMembersPositions = function (centerPosition, direction) {
        var positions = this.GetMembersXY(PositionUtils_1.default.ToWorldXY(centerPosition), direction);
        return _.map(positions, function (p) {
            return PositionUtils_1.default.FromWorldXY(p);
        });
    };
    Formation.prototype.TransformCostMatrix = function (matrix) {
        var result = matrix.clone();
        for (var x = 0; x < 50; x++)
            for (var y = 0; y < 50; y++) {
                var pairs = this.GetMembersXY([x, y], 1);
                var costs = pairs.map(function (p) { return matrix.get(p[0], p[1]); });
                result.set(x, y, _.max(costs));
            }
        return result;
    };
    return Formation;
}());
exports.Formation = Formation;


/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Process_1 = __webpack_require__(5);
var TaskManager_1 = __webpack_require__(7);
var ProduceBoostTask_1 = __webpack_require__(44);
var Task_1 = __webpack_require__(6);
var TasksRepository_1 = __webpack_require__(11);
function GetResourcesToBalance() {
    return [
        'ops',
        'power',
        'battery',
        'XLH2O',
        'XUHO2',
        'XUH2O',
        'XLHO2',
        'XZHO2',
        'XZH2O',
        'XKHO2',
        'XKH2O',
        'XGH2O',
        'XGHO2',
        'U',
        'L',
        'Z',
        'K',
        'O',
        'H',
        'X',
        'G',
        'OH',
        'UL',
        'ZK',
        'UO',
        'UH',
        'LO',
        'LH',
        'ZO',
        'ZH',
        'KO',
        'KH',
        'GH',
        'GO',
        'UHO2',
        'UH2O',
        'LHO2',
        'LH2O',
        'ZHO2',
        'ZH2O',
        'KHO2',
        'KH2O',
        'GH2O',
        'GHO2',
    ];
}
var ResourceBalancer = (function (_super) {
    __extends(ResourceBalancer, _super);
    function ResourceBalancer() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = '/usr/bin/resource-balancer';
        return _this;
    }
    ResourceBalancer.prototype.tick = function () {
        var resourcesToBalance = GetResourcesToBalance();
        var myRooms = _.filter(_.values(Game.rooms), function (r) {
            return !_.isUndefined(r.controller) &&
                r.controller.my &&
                (r.controller.level == 8) &&
                (r.terminal != null) &&
                (r.storage != null) &&
                (r.storage.pos.getRangeTo(r.terminal.pos) < 3) &&
                (r.terminal.cooldown == 0) &&
                ((r.terminal.storeCapacity - _.sum(r.terminal.store)) > 20000) &&
                _.isUndefined(r.memory['evac']) &&
                _.isUndefined(r.memory['evacTo'] &&
                    !_.some(Game.rooms, function (i) { return i.memory['evacTo'] == r.name; }));
        });
        console.log("resource-balancer tick (" + myRooms.length + " rooms, " + resourcesToBalance.length + " to balance)");
        var evacuateTasks = _.reject(TaskManager_1.default.QueryEvacuateTasks(), function (t) { return t.isPostponed(); });
        var _loop_1 = function (task) {
            var result = task.Execute(task.room.terminal);
            if (result.Type == Task_1.TaskExecutionResultType.Continue) {
                _.remove(myRooms, function (r) { return r.name == task.roomName; });
                console.log("Evacuating resources from " + task.roomName);
            }
        };
        for (var _i = 0, evacuateTasks_1 = evacuateTasks; _i < evacuateTasks_1.length; _i++) {
            var task = evacuateTasks_1[_i];
            _loop_1(task);
        }
        var deliverTasks = TaskManager_1.default.QueryDeliverTasks();
        if (_.some(deliverTasks)) {
            var factoryTasks_1 = TasksRepository_1.default.QueryTasks(function (t) {
                return (t.Type == Task_1.TaskType.ProduceCommodity) &&
                    !t.isCompleted();
            });
            var _loop_2 = function (task) {
                var res = task.resource;
                var availableRooms = _.filter(myRooms, function (r) { return r.name != task.roomName &&
                    res == RESOURCE_ENERGY || !_.some(factoryTasks_1, function (ft) {
                    return ft.roomName == r.name &&
                        _.includes(_.keys(COMMODITIES[ft.commodity].components), res);
                }); });
                if (!_.some(availableRooms)) {
                    console.log("No source rooms for " + res);
                    return "continue";
                }
                var sortedRoom = availableRooms
                    .sort(function (a, b) { return ResourceBalancer.ResourceInRoom(a, res) - ResourceBalancer.ResourceInRoom(b, res); });
                var mostRoom = _.last(sortedRoom);
                if ((task.resource == RESOURCE_ENERGY) && ResourceBalancer.ResourceInRoom(mostRoom, RESOURCE_ENERGY) < 260000) {
                    this_1.ConvertDeliverToBuy(task);
                    return "continue";
                }
                if (mostRoom == null) {
                    return "continue";
                }
                var taskResult = task.Execute(mostRoom.terminal);
                if (_.includes([Task_1.TaskExecutionResultType.Completed, Task_1.TaskExecutionResultType.Continue], taskResult.Type)) {
                    console.log("Delivering " + task.resource + " to " + task.roomName);
                    _.remove(myRooms, function (r) { return r.name == mostRoom.name; });
                    if (taskResult.Type == Task_1.TaskExecutionResultType.Completed) {
                        TasksRepository_1.default.CleanupCompletedTasks();
                    }
                    return { value: void 0 };
                }
            };
            var this_1 = this;
            for (var _a = 0, deliverTasks_1 = deliverTasks; _a < deliverTasks_1.length; _a++) {
                var task = deliverTasks_1[_a];
                var state_1 = _loop_2(task);
                if (typeof state_1 === "object")
                    return state_1.value;
            }
        }
        if (_.some(myRooms)) {
            var _loop_3 = function (res) {
                var sortedRoom = myRooms.sort(function (a, b) { return ResourceBalancer.ResourceInRoom(a, res) - ResourceBalancer.ResourceInRoom(b, res); });
                var leastRoom = _.first(sortedRoom);
                var mostRoom = _.last(sortedRoom);
                var least = ResourceBalancer.ResourceInRoom(leastRoom, res);
                var most = ResourceBalancer.ResourceInRoom(mostRoom, res);
                if ((most - least) < 1000) {
                    return "continue";
                }
                var task = TaskManager_1.default.QueryProduceTaskForRoom(mostRoom);
                if ((task != null) &&
                    _.includes([ProduceBoostTask_1.ProduceStep.InitialCleanup, ProduceBoostTask_1.ProduceStep.Load], task.Step) &&
                    _.includes(task.reagents, res)) {
                    return "continue";
                }
                var amount = Math.round(Math.min((most - least) / 2, mostRoom.terminal.store[res] || 0));
                if ((most - amount) < 3000) {
                    return "continue";
                }
                if (amount >= 100) {
                    console.log("Rebalancing " + amount + " of " + res + " from " + mostRoom.name + " (" + most + ") to " + leastRoom + " (" + least + ")");
                    mostRoom.terminal.send(res, amount, leastRoom.name);
                    _.remove(myRooms, function (r) { return r.name == mostRoom.name; });
                }
            };
            for (var _b = 0, resourcesToBalance_1 = resourcesToBalance; _b < resourcesToBalance_1.length; _b++) {
                var res = resourcesToBalance_1[_b];
                _loop_3(res);
            }
        }
        if (Memory.overflowAttack && Memory.overflowAttack.junk && Memory.overflowAttack.room) {
            var _c = Memory.overflowAttack, junk_1 = _c.junk, room_1 = _c.room;
            var attackedRoom = Game.rooms[room_1];
            if (attackedRoom) {
                if (!attackedRoom.terminal || (!attackedRoom.terminal.store.getFreeCapacity() && !attackedRoom.terminal.store[RESOURCE_ENERGY])) {
                    console.log(room_1 + ": Overflow successful");
                    this.sleep(10);
                }
            }
            if (room_1) {
                var myRoomsNearby = _.filter(_.values(Game.rooms), function (r) { return r.controller && r.controller.my && Game.map.getRoomLinearDistance(room_1, r.name) <= 10; });
                if (_.some(myRoomsNearby)) {
                    var scoutRoom = _.sample(myRoomsNearby);
                    var observer = _.first(scoutRoom.find(FIND_MY_STRUCTURES, { filter: { structureType: STRUCTURE_OBSERVER } }));
                    if (observer) {
                        observer.observeRoom(room_1);
                        console.log("Room observer: " + observer.pos.roomName + " observing " + room_1);
                    }
                }
            }
            myRooms.forEach(function (r) {
                if (!r.terminal || r.terminal.cooldown) {
                    return;
                }
                var amount = r.terminal.store[junk_1];
                if (amount) {
                    r.terminal.send(junk_1, amount, room_1);
                }
            });
            return;
        }
        this.sleep(10);
    };
    ResourceBalancer.prototype.ConvertDeliverToBuy = function (task) {
        var amountLeft = task.amount - task.completed;
        console.log("Converting " + task.id + " from deliver to buy (WIP)");
        var buyTask = TaskManager_1.default.AddBuyTask(task.resource, amountLeft, task.roomName, task.priority);
        TasksRepository_1.default.CleanupTask(task);
        buyTask.Execute(buyTask.room.terminal);
        return buyTask;
    };
    ResourceBalancer.ResourceInRoom = function (room, resource) {
        var storageRes = (room.storage == null) ? 0 : (room.storage.store[resource] || 0);
        var terminalRes = (room.terminal == null) ? 0 : (room.terminal.store[resource] || 0);
        return storageRes + terminalRes;
    };
    return ResourceBalancer;
}(Process_1.Process));
exports.default = ResourceBalancer;


/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var TickCache_1 = __webpack_require__(1);
var Config_1 = __webpack_require__(8);
var CreepAnalyzer_1 = __webpack_require__(15);
var Process_1 = __webpack_require__(5);
var ProcessList_1 = __webpack_require__(9);
var ProcessRoom = (function (_super) {
    __extends(ProcessRoom, _super);
    function ProcessRoom() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ProcessRoom.prototype._checkInvasion = function () {
        if (this._room == null) {
            return;
        }
        var hostiles = TickCache_1.__find(this._room, FIND_HOSTILE_CREEPS, {
            filter: function (c) { return !_.isUndefined(c.owner) && !_.isUndefined(c.owner.username) && !_.includes(Config_1.alliedPlayers, c.owner.username) && !c.pos.isEdge(); }
        });
        var threat = 0;
        if (_.some(hostiles, function (c) { return _.some(c.body, function (t) { return t.type == ATTACK || t.type == RANGED_ATTACK; }); })) {
            for (var _i = 0, hostiles_1 = hostiles; _i < hostiles_1.length; _i++) {
                var creep = hostiles_1[_i];
                var t = CreepAnalyzer_1.CreepAnalyzer.GetThreatNumber(CreepAnalyzer_1.CreepAnalyzer.GetThreatLevel(creep, false));
                threat += t;
            }
        }
        if (threat > 100000) {
            this.memory['invaders'] = hostiles.map(function (h) { return h.id; });
            this.memory['threatLevel'] = threat;
            this.invaded = true;
        }
        else {
            delete this.memory['invaders'];
            delete this.memory['threatLevel'];
            this.invaded = false;
        }
    };
    Object.defineProperty(ProcessRoom.prototype, "threatLevel", {
        get: function () {
            if (this._room && this._room.controller && this._room.controller.my && this._room.controller.safeMode) {
                return 0;
            }
            return this.memory['threatLevel'] || 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProcessRoom.prototype, "invaded", {
        get: function () {
            if (this._room && this._room.controller && this._room.controller.my && this._room.controller.safeMode) {
                return false;
            }
            return !_.isUndefined(this.memory['invaded-till']) && (this.memory['invaded-till'] > Game.time);
        },
        set: function (value) {
            var invasionStarted = value && ((_.isUndefined(this.memory['invaded-till']) || (this.memory['invaded-till'] < Game.time)));
            var invasionEnded = !value && !_.isUndefined(this.memory['invaded-till']) && (this.memory['invaded-till'] > Game.time);
            if (value) {
                this.memory['invaded-till'] = 1500 + Game.time;
            }
            else {
                delete this.memory['invaded-till'];
            }
            if (invasionStarted) {
                this._onInvasionStarted(0);
            }
            if (invasionEnded) {
                this._onInvasionEnded();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProcessRoom.prototype, "_room", {
        get: function () {
            return Game.rooms[this._roomName];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProcessRoom.prototype, "_roomName", {
        get: function () {
            return this.processInfo.args[0];
        },
        enumerable: true,
        configurable: true
    });
    ProcessRoom.prototype.GetRootRoomProcess = function () {
        if (!_.isUndefined(this.memory['prpId'])) {
            return ProcessList_1.GetProcessById(this.memory['prpId']);
        }
        var rootRoomProcess = this.GetProcessInParentChain("/usr/bin/permanent-room");
        if (rootRoomProcess != null) {
            this.memory['prpId'] = rootRoomProcess.id;
        }
        return rootRoomProcess;
    };
    return ProcessRoom;
}(Process_1.Process));
exports.ProcessRoom = ProcessRoom;


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var RoomProvider_1 = __webpack_require__(12);
var CostMatrixType_1 = __webpack_require__(0);
var CostMatrixFactory_1 = __webpack_require__(45);
var InfrastructurePlanner = (function () {
    function InfrastructurePlanner() {
    }
    InfrastructurePlanner.SourcePosition = function (route) {
        return RoomPosition.sunpack("" + route[0] + route[1]);
    };
    InfrastructurePlanner.HarvestPosition = function (route) {
        return RoomPosition.sunpack("" + route[2] + route[3]);
    };
    InfrastructurePlanner.UnloadPosition = function (route) {
        var l = route.length;
        return RoomPosition.sunpack("" + route[l - 2] + route[l - 1]);
    };
    InfrastructurePlanner.PlanRoutes = function (rootRoomName, remoteRoomName, costs) {
        console.log("Planning routes from " + rootRoomName + " to " + remoteRoomName);
        var c = costs || {
            Plain: 20,
            Swamp: 21,
            Wall: 200,
            RoadOverPlain: 15,
            RoadOverSwamp: 15,
            RoadOverWall: 25
        };
        var rootRoom = Game.rooms[rootRoomName];
        if (rootRoom == null || rootRoom.storage == null) {
            console.log("No vis or storage in " + rootRoomName);
            return null;
        }
        var remoteRoomInfo = RoomProvider_1.default.GetRoomData(remoteRoomName);
        if (remoteRoomInfo == null) {
            console.log("No info for " + remoteRoomName);
            return null;
        }
        if (!_.some(remoteRoomInfo.SourcesPositions)) {
            console.log("No sources in " + remoteRoomName);
            return null;
        }
        if (remoteRoomInfo.SourcesPositions.length > 2) {
            throw new Error("Unsupported case for room " + remoteRoomName);
        }
        var unloads = [rootRoom.storage.pos];
        if (rootRoom.terminal != null) {
            unloads.push(rootRoom.terminal.pos);
        }
        var result = [];
        if (remoteRoomInfo.SourcesPositions.length == 1) {
            var path = InfrastructurePlanner.PlanRoute(remoteRoomInfo.SourcesPositions[0], unloads, [], c);
            if (path == null) {
                console.log("No path (" + remoteRoomName + ")");
                return null;
            }
            result.push(RoomPosition.packPath(path));
            return result;
        }
        var option1 = InfrastructurePlanner.PlanRoutesPair(remoteRoomInfo.SourcesPositions[0], remoteRoomInfo.SourcesPositions[1], unloads, c);
        var option2 = InfrastructurePlanner.PlanRoutesPair(remoteRoomInfo.SourcesPositions[1], remoteRoomInfo.SourcesPositions[0], unloads, c);
        if (option1 == null || option1.length != 2) {
            return option2;
        }
        if (option2 == null || option2.length != 2) {
            return option1;
        }
        return (_.sum(option1, function (r) { return r.length; }) < _.sum(option2, function (r) { return r.length; })) ? option1 : option2;
    };
    InfrastructurePlanner.PlanRoutesPair = function (source1, source2, destinations, costs) {
        var primary = InfrastructurePlanner.PlanRoute(source1, destinations, [], costs);
        var secondary = InfrastructurePlanner.PlanRoute(source2, destinations, primary, costs);
        if (primary == null || secondary == null) {
            return null;
        }
        return [RoomPosition.packPath(primary), RoomPosition.packPath(secondary)];
    };
    InfrastructurePlanner.PlanRoute = function (source, destinations, plannedRoads, costs) {
        var terrain = Game.map.getRoomTerrain(source.roomName);
        var possiblePositions = source.around(1, { filter: function (p) { return p.isWalkable() && (terrain.get(p.x, p.y) != TERRAIN_MASK_WALL); } });
        if (!_.some(possiblePositions)) {
            console.log("No possible positions around " + source);
            return null;
        }
        var roadCosts = [costs.RoadOverPlain, costs.RoadOverWall, costs.RoadOverSwamp];
        var callbackWithPlanned = function (roomName) {
            var m = CostMatrixFactory_1.default.GetCostMatrix(roomName, costs || CostMatrixType_1.CostMatrixType.TransportRoute);
            if (_.isBoolean(m)) {
                return m;
            }
            var raw = Game.map.getRoomTerrain(roomName).getRawBuffer();
            for (var _i = 0, _a = _.filter(plannedRoads, function (r) { return r.roomName == roomName; }); _i < _a.length; _i++) {
                var p = _a[_i];
                var terrain_1 = raw[p.x + p.y * 50];
                if ((terrain_1 == TERRAIN_MASK_WALL) && (p.x == 0 || p.x == 49 || p.y == 0 || p.y == 49)) {
                    m.set(p.x, p.y, Infinity);
                }
                else {
                    m.set(p.x, p.y, roadCosts[terrain_1]);
                }
            }
            if (Game.rooms[roomName] && Game.rooms[roomName].controller) {
                var controllerPositions = Game.rooms[roomName].controller.pos.around(1, { filter: function (p) { return p.isFree(); } });
                for (var _b = 0, controllerPositions_1 = controllerPositions; _b < controllerPositions_1.length; _b++) {
                    var p = controllerPositions_1[_b];
                    m.set(p.x, p.y, 15 + m.get(p.x, p.y));
                }
            }
            return m;
        };
        var paths = [];
        var goals = destinations.map(function (p) {
            return {
                pos: p,
                range: 1
            };
        });
        possiblePositions.forEach(function (p) {
            var res = PathFinder.search(p, goals, {
                heuristicWeight: 1.2,
                maxOps: 100000,
                maxCost: 10000,
                maxRooms: 20,
                roomCallback: callbackWithPlanned
            });
            if (!res.incomplete) {
                paths.push([p].concat(res.path));
            }
            else {
                console.log("Incomplete path from " + p + " to " + JSON.stringify(goals) + " (cost " + res.cost + ", ops " + res.ops + ", length " + res.path.length + ", last " + _.last(res.path) + ") (" + plannedRoads.length + ")");
            }
        });
        if (!_.some(paths)) {
            return null;
        }
        return [source].concat(_.first(paths.sort(function (a, b) { return a.length - b.length; })));
    };
    return InfrastructurePlanner;
}());
exports.default = InfrastructurePlanner;


/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Process_1 = __webpack_require__(5);
var Supply_1 = __webpack_require__(74);
var TributeTracker = (function (_super) {
    __extends(TributeTracker, _super);
    function TributeTracker() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = "/usr/bin/tribute-tracker";
        return _this;
    }
    TributeTracker.prototype.tick = function () {
        var recevied = _.filter(Game.market.incomingTransactions, function (t) { return (t.sender != null) && (t.sender.username != "o4kapuk"); });
        var newTributes = [];
        for (var i = 0; i < recevied.length; i++) {
            var lastTransactionId = _.isUndefined(this.memory) ? "" : this.memory["lastTransactionId"];
            if (recevied[i].transactionId == lastTransactionId) {
                break;
            }
            newTributes.push(recevied[i]);
        }
        if (_.some(newTributes)) {
            this.memory = { lastTransactionId: _.first(newTributes).transactionId };
            var notification_1 = "";
            newTributes.forEach(function (t) {
                if ((t.resourceType == RESOURCE_ENERGY) && (t.amount == 101)) {
                    Supply_1.ProcessSupply.ScheduleResponse(t.to, t.from);
                }
                else {
                    notification_1 = notification_1 + "Received " + t.amount + " of " + t.resourceType + " from " + t.sender.username + " (" + t.from + "->" + t.to + "), comment was \"" + t.description + "\"\n";
                    TributeTracker.CountReceived(t.from, t.amount);
                }
            });
            Game.notify(notification_1);
            console.log("<font color=\"green\">" + notification_1 + "</font>");
        }
        else {
        }
        this.sleep(50);
    };
    TributeTracker.CountHarvested = function (roomName, amount) {
        if (_.isUndefined(Memory['tribute'])) {
            Memory['tribute'] = {};
        }
        var stats = Memory['tribute'];
        var roomStats = stats[roomName] || { harvested: 0, received: 0 };
        roomStats.harvested += amount;
        stats[roomName] = roomStats;
    };
    TributeTracker.CountReceived = function (roomName, amount) {
        if (_.isUndefined(Memory['tribute'])) {
            Memory['tribute'] = {};
        }
        var stats = Memory['tribute'];
        var roomStats = stats[roomName] || { harvested: 0, received: 0 };
        roomStats.received += amount;
        stats[roomName] = roomStats;
    };
    TributeTracker.GetStats = function (roomName) {
        var stats = Memory['tribute'] || {};
        if (!_.isUndefined(stats[roomName])) {
            return stats[roomName];
        }
        return null;
    };
    return TributeTracker;
}(Process_1.Process));
exports.default = TributeTracker;


/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var TickCache_1 = __webpack_require__(1);
var ChargerBase_1 = __webpack_require__(24);
var Spawn_1 = __webpack_require__(3);
var Rooms_1 = __webpack_require__(14);
var Role_Transport_1 = __webpack_require__(70);
exports.STATE_ROUTEDCHARGER_INIT = 1;
exports.STATE_ROUTEDCHARGER_GET = 2;
exports.STATE_ROUTEDCHARGER_PUT = 3;
exports.STATE_ROUTEDCHARGER_WALK = 4;
exports.STATE_ROUTEDCHARGER_WAIT = 5;
var RoutedCharger = (function (_super) {
    __extends(RoutedCharger, _super);
    function RoutedCharger() {
        var _this = _super.call(this) || this;
        _this[exports.STATE_ROUTEDCHARGER_INIT] = _this._moveToInitialPosition;
        _this[exports.STATE_ROUTEDCHARGER_GET] = _this._get;
        _this[exports.STATE_ROUTEDCHARGER_PUT] = _this._put;
        _this[exports.STATE_ROUTEDCHARGER_WALK] = _this._walk;
        _this[exports.STATE_ROUTEDCHARGER_WAIT] = _this._wait;
        return _this;
    }
    RoutedCharger.prototype._getMyInitialPosition = function (creep) {
        var assign = Spawn_1.getAssignmentByName(creep.name);
        if (!_.isUndefined(Game.flags[assign])) {
            return Game.flags[assign].pos;
        }
        return RoomPosition.unpack(parseInt(assign));
    };
    RoutedCharger.prototype._get = function (creep) {
        if (creep.carry.energy == creep.carryCapacity) {
            this._nextState(creep);
            return false;
        }
        var myLink = _.first(this._getMyLinks(creep));
        var cache = this._getCachedObject(creep, 'currentContainerId', this._findMyCurrentContainer, false);
        if (cache != null) {
            var excess = cache.store[RESOURCE_ENERGY] + creep.carryCapacity - cache.storeCapacity;
            if (excess > 0) {
                var toTake = Math.min(creep.carryCapacity - _.sum(creep.carry), excess);
                if (toTake > 0) {
                    creep.withdraw(cache, RESOURCE_ENERGY, toTake);
                    return true;
                }
            }
        }
        if ((myLink != null) && (myLink.energy > 0)) {
            creep.withdraw(myLink, RESOURCE_ENERGY);
            return true;
        }
        if ((myLink == null) || !this._allCharged(creep)) {
            creep.withdraw(cache, RESOURCE_ENERGY);
        }
        return true;
    };
    RoutedCharger.prototype._put = function (creep) {
        var myLink = _.first(this._getMyLinks(creep));
        if (!this._allCharged(creep)) {
            this._nextState(creep);
            return false;
        }
        if (myLink != null) {
            var cache = this._getCachedObject(creep, 'currentContainerId', this._findMyCurrentContainer, false);
            var missingInCache = cache.storeCapacity - creep.carryCapacity - _.sum(cache.store);
            var toStore = Math.min(missingInCache, creep.carry[RESOURCE_ENERGY]);
            if (toStore > 0) {
                creep.transfer(cache, RESOURCE_ENERGY, toStore);
                return true;
            }
        }
        var nextState = (creep.carry[RESOURCE_ENERGY] < creep.carryCapacity) ? exports.STATE_ROUTEDCHARGER_GET : exports.STATE_ROUTEDCHARGER_WAIT;
        this._setState(creep, nextState);
        return false;
    };
    RoutedCharger.prototype._walk = function (creep) {
        var myPosition = this._getMyInitialPosition(creep);
        var myLink = _.first(this._getMyLinks(creep));
        var cache = this._getCachedObject(creep, 'currentContainerId', this._findMyCurrentContainer, false);
        if (_.sum(creep.carry) > 0) {
            var chargeStructures = _.compact(this._getMyExtensions(creep).concat([this._getNuker(creep)]));
            var unchargedNear = chargeStructures.filter(function (e) { return (creep.pos.isNearTo(e) && (e.energy < e.energyCapacity)); });
            if (unchargedNear.length > 0) {
                creep.transfer(_.first(unchargedNear), RESOURCE_ENERGY);
                if (unchargedNear.length > 1) {
                    return true;
                }
            }
        }
        if (_.sum(creep.carry) < creep.carryCapacity) {
            if ((myLink != null) && creep.pos.isNearTo(myLink) && (myLink.energy > 0)) {
                creep.withdraw(myLink, RESOURCE_ENERGY);
            }
            else {
                if (creep.pos.isNearTo(cache) && (cache.store[RESOURCE_ENERGY] > 0) && (myPosition.getRangeTo(creep) > 1)) {
                    creep.withdraw(cache, RESOURCE_ENERGY);
                }
            }
        }
        var currentPath;
        if (_.isUndefined(creep.memory['currentPath'])) {
            currentPath = this._findMyCurrentPath(creep, creep.pos);
            creep.memory['currentPath'] = currentPath;
        }
        else {
            currentPath = creep.memory['currentPath'];
        }
        var routeEnd = RoutedCharger._findCurrentRouteEnd(creep);
        if (routeEnd == null) {
            this._setState(creep, 1);
            return false;
        }
        if ((creep.pos.getRangeTo(routeEnd) == 1) && _.some(TickCache_1.__findInRange(routeEnd, FIND_CREEPS, 0, {
            filter: function (c) {
                return (c.id != creep.id) &&
                    (Spawn_1.getRoleByName(creep.name) == Spawn_1.getRoleByName(c.name)) &&
                    ((c.carry.energy < c.carryCapacity) || (c.memory.state == exports.STATE_ROUTEDCHARGER_WAIT));
            }
        }))) {
            creep.room.visual.circle(routeEnd.x, routeEnd.y, { fill: 'orange' });
            this._nextRoute(creep, routeEnd);
            return true;
        }
        if (this._allCharged(creep) && (creep.pos.isEqualTo(routeEnd))) {
            creep.say('nextRoute');
            this._nextRoute(creep, creep.pos);
            this._setState(creep, exports.STATE_ROUTEDCHARGER_GET);
            creep.room.visual.circle(routeEnd.x, routeEnd.y, { fill: 'white' });
            return true;
        }
        var this_ = this;
        var result = Role_Transport_1.customMoveByPath2(creep, currentPath, function (ticks) {
            this_._destuck(creep, ticks);
        });
        if (result == ERR_NOT_FOUND) {
            this._nextRoute(creep, creep.pos);
            this._setState(creep, exports.STATE_ROUTEDCHARGER_GET);
            return false;
        }
        return true;
    };
    RoutedCharger.prototype._destuck = function (creep, ticks) {
        if (ticks >= 1) {
            var creepAhead = this._creepAhead(creep);
            if (creepAhead != null) {
                var lastMove = creepAhead.memory['_lastMoveTick'];
                if (_.isUndefined(lastMove) || ((lastMove > 0) && ((lastMove + 1) < Game.time))) {
                    creepAhead.move(creepAhead.pos.getDirectionTo(creep));
                    creepAhead.memory['_lastMoveTick'] = Game.time;
                    delete creepAhead.memory['_trav'];
                }
            }
        }
    };
    RoutedCharger.prototype._wait = function (creep) {
        if (!this._allCharged(creep)) {
            this._setState(creep, exports.STATE_ROUTEDCHARGER_WALK);
            return false;
        }
        var myLink = _.first(this._getMyLinks(creep));
        var cache = this._getCachedObject(creep, 'currentContainerId', this._findMyCurrentContainer, false);
        if ((myLink != null) && ((_.sum(cache.store) + _.sum(creep.carry)) < cache.storeCapacity)) {
            this._setState(creep, exports.STATE_ROUTEDCHARGER_PUT);
            return false;
        }
        this._renewIfNecessary(creep, 1400);
        creep.say('🚬', true);
        return true;
    };
    RoutedCharger.prototype._nextRoute = function (creep, startPos) {
        creep.memory['currentPath'] = this._findMyCurrentPath(creep, startPos);
        var currentContainer = _.first(TickCache_1.__findInRange(startPos, FIND_STRUCTURES, 1, { filter: function (s) { return s.structureType == STRUCTURE_CONTAINER; } }));
        creep.memory['currentContainerId'] = currentContainer == null ? null : currentContainer.id;
    };
    RoutedCharger.prototype._findMyCurrentPath = function (creep, startPos) {
        var myPosition = this._getMyInitialPosition(creep);
        var roomRoutes = Rooms_1.getChargeRoutes(Game.rooms[myPosition.roomName]);
        if (_.isUndefined(roomRoutes)) {
            return null;
        }
        var myRoutes = roomRoutes[myPosition.pack()];
        if (_.isUndefined(myRoutes)) {
            return null;
        }
        return myRoutes[startPos.pack()];
    };
    RoutedCharger.prototype._creepAhead = function (creep) {
        if (_.isUndefined(creep.memory['currentPath'])) {
            return null;
        }
        var positions = Room.deserializePath(creep.memory['currentPath']).map(function (ps) { return new RoomPosition(ps.x, ps.y, creep.room.name); });
        var pairs = _.filter(positions, function (s) { return s.roomName == creep.room.name; }).map(function (s) { return [s.x, s.y]; });
        creep.room.visual.poly(pairs, {
            fill: 'transparent',
            stroke: '#f88',
            lineStyle: 'dashed',
            strokeWidth: .15,
            opacity: .5
        });
        var route = positions.map(function (p) { return p.pack(); });
        var next = route.indexOf(creep.pos.pack()) + 1;
        if (next == route.length) {
            next = 0;
        }
        if (next > route.length) {
            creep.say(next.toString());
            return null;
        }
        var nextPos = RoomPosition.unpack(route[next]);
        creep.room.visual.circle(creep.pos.x, creep.pos.y, {
            fill: 'green'
        });
        creep.room.visual.circle(nextPos.x, nextPos.y, {
            fill: 'red'
        });
        var objects = nextPos.look();
        var c = _.first(_.filter(objects, function (o) { return o.creep || o.powerCreep; }));
        return c ? c.creep || c.powerCreep : null;
    };
    RoutedCharger._findCurrentRouteEnd = function (creep) {
        var currentPath = creep.memory['currentPath'];
        if (!_.isString(currentPath)) {
            return null;
        }
        var lastStep = _.last(Room.deserializePath(currentPath));
        return new RoomPosition(lastStep.x, lastStep.y, creep.room.name);
    };
    RoutedCharger.prototype._allCharged = function (creep) {
        if (creep.room.energyAvailable == creep.room.energyCapacityAvailable) {
            return true;
        }
        var extensions = this._getMyExtensions(creep);
        return _.every(extensions, function (e) { return e.energy >= e.energyCapacity; });
    };
    RoutedCharger.prototype._findMyCurrentContainer = function (creep) {
        return _.first(TickCache_1.__findInRange(creep.pos, FIND_STRUCTURES, 1, {
            filter: function (s) { return s.structureType == STRUCTURE_CONTAINER; }
        }));
    };
    RoutedCharger.prototype._getMyRoutes = function (creep) {
        var myPosition = this._getMyInitialPosition(creep);
        var routes = Rooms_1.getChargeRoutes(Game.rooms[myPosition.roomName]);
        return routes[myPosition.pack()];
    };
    RoutedCharger.prototype._getMyPositions = function (creep) {
        var myRoutes = this._getMyRoutes(creep);
        var result = [];
        for (var route in _.values(myRoutes)) {
            _.forEach(Room.deserializePath(route), function (ps) {
                result.push(new RoomPosition(ps.x, ps.y, creep.room.name));
            });
        }
        return result;
    };
    RoutedCharger.prototype._getMyExtensions = function (creep) {
        var _this = this;
        if (!_.isUndefined(creep.memory['extensionsIds'])) {
            delete creep.memory['extensionsIds'];
        }
        var myPosition = this._getMyInitialPosition(creep);
        return _.compact(this._process.GetCachedObjects("extensions_" + myPosition.pack(), function () { return _this._findExtensions(myPosition); }));
    };
    RoutedCharger.prototype._getNuker = function (creep) {
        var nuker = this._process.GetCachedObject('nuker', function () { return _.first(creep.room.find(FIND_STRUCTURES, { filter: { structureType: STRUCTURE_NUKER } })); });
        return (nuker && (nuker.ghodium > 0)) ? nuker : null;
    };
    RoutedCharger.prototype._findExtensions = function (myPosition) {
        var roomRoutes = Rooms_1.getChargeRoutes(Game.rooms[myPosition.roomName]);
        var myRoutes = roomRoutes[myPosition.pack()];
        var roomName = myPosition.roomName;
        var room = Game.rooms[roomName];
        var positions = [];
        for (var routeI in myRoutes) {
            var route = myRoutes[routeI];
            _.forEach(Room.deserializePath(route), function (ps) {
                positions.push(new RoomPosition(ps.x, ps.y, roomName));
            });
        }
        var result = [];
        _.forEach(TickCache_1.__find(room, FIND_STRUCTURES, { filter: function (s) { return s.structureType == STRUCTURE_EXTENSION; } }), function (ext) {
            if (_.some(positions, function (p) { return p.isNearTo(ext); })) {
                result.push(ext);
            }
        });
        return result;
    };
    return RoutedCharger;
}(ChargerBase_1.ChargerBase));
exports.RoutedCharger = RoutedCharger;


/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var CostMatrixType_1 = __webpack_require__(0);
var Role_Base_1 = __webpack_require__(4);
var Spawn_1 = __webpack_require__(3);
var BehaviorBase_1 = __webpack_require__(2);
var RoomProvider_1 = __webpack_require__(12);
var BaseClaimer = (function (_super) {
    __extends(BaseClaimer, _super);
    function BaseClaimer() {
        var _this = _super.call(this) || this;
        _this._myInitialPositionRange = 1;
        _this._myInitialPositionRange = 1;
        _this[1] = _this._moveToInitialPosition;
        _this[2] = _this._work;
        _this[254] = _this._travelHome;
        _this[255] = _this._recycle;
        return _this;
    }
    BaseClaimer.prototype._getMyInitialPosition = function (creep) {
        var assignString = Spawn_1.getAssignmentByName(creep.name);
        if (!_.isUndefined(Game.flags[assignString])) {
            return Game.flags[assignString].pos;
        }
        var roomData = RoomProvider_1.default.GetRoomData(assignString);
        if (roomData != null) {
            return roomData.ControllerPosition;
        }
        if (!_.isUndefined(Game.rooms[assignString])) {
            return Game.rooms[assignString].controller.pos;
        }
        return new RoomPosition(25, 25, assignString);
    };
    BaseClaimer.prototype._moveToInitialPosition = function (creep) {
        var pos = this._getMyInitialPosition(creep);
        if (creep.pos.getRangeTo(pos) > this._myInitialPositionRange) {
            BehaviorBase_1.default.GoToPosition(creep, this._getMyInitialPosition(creep), { costMatrixType: CostMatrixType_1.CostMatrixType.FullSpeed, range: this._myInitialPositionRange });
            return true;
        }
        this._nextState(creep);
        return false;
    };
    BaseClaimer.prototype._work = function (creep) {
        if (!creep.pos.isNearTo(creep.room.controller)) {
            BehaviorBase_1.default.GoToPosition(creep, creep.room.controller.pos, { costMatrixType: CostMatrixType_1.CostMatrixType.FullSpeed, range: 1 });
        }
        var controller = creep.room.controller;
        if (!controller.reservation || (controller.reservation.username == creep.owner.username)) {
            creep.reserveController(controller);
            return true;
        }
        creep.attackController(controller);
        return true;
    };
    return BaseClaimer;
}(Role_Base_1.RoleBase));
exports.BaseClaimer = BaseClaimer;


/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FighterBase_1 = __webpack_require__(13);
var Spawn_1 = __webpack_require__(3);
var CostMatrixType_1 = __webpack_require__(0);
var AssaultHealer = (function (_super) {
    __extends(AssaultHealer, _super);
    function AssaultHealer() {
        var _this = _super.call(this) || this;
        _this.name = 'assaultHealer';
        _this[1] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_ZYNTHIUM_ALKALIDE); };
        _this[2] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_GHODIUM_ALKALIDE); };
        _this[3] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_LEMERGIUM_ALKALIDE); };
        _this[4] = _this._disableRenew;
        _this[5] = _this._work;
        return _this;
    }
    AssaultHealer.prototype._getMyHealBoostMultiplier = function () {
        return 4;
    };
    AssaultHealer.prototype._getMyDismantleBoostMultiplier = function () {
        return 1;
    };
    AssaultHealer.prototype._combatActions = function (creep) {
        return this._healMySignificantDamage(creep) ||
            this._healOthersNearby(creep) ||
            this._healOthersAtDistance(creep) ||
            this._healMyMinorDamage(creep) ||
            this._overheal(creep);
    };
    AssaultHealer.prototype._work = function (creep) {
        this._combatActions(creep);
        var destination = Game.flags[Spawn_1.getAssignmentByName(creep.name)];
        return this._moveInRaidToFlag(creep, CostMatrixType_1.CostMatrixType.Military, 0) ||
            this._travelToFlag(creep, destination, 0, CostMatrixType_1.CostMatrixType.Military) ||
            this._moveToFlag(creep, 0, CostMatrixType_1.CostMatrixType.Military) || true;
    };
    return AssaultHealer;
}(FighterBase_1.default));
exports.default = AssaultHealer;


/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Spawn_1 = __webpack_require__(3);
var BehaviorBase_1 = __webpack_require__(2);
var Config_1 = __webpack_require__(8);
var TickCache_1 = __webpack_require__(1);
var CostMatrixType_1 = __webpack_require__(0);
var Role_Base_1 = __webpack_require__(4);
var StationaryUpgrader = (function (_super) {
    __extends(StationaryUpgrader, _super);
    function StationaryUpgrader() {
        var _this = _super.call(this) || this;
        _this.name = 'stationaryUpgrader';
        _this[1] = function (c) { return _this._boost(c, c.room.memory['praiseMineral'] || Config_1.boosts.defaultPraiseMineral); };
        _this[2] = _this._moveToInitialPosition;
        _this[3] = _this._work;
        _this[255] = _this._recycle;
        return _this;
    }
    StationaryUpgrader.prototype._getMyInitialPosition = function (creep) {
        var flag = StationaryUpgrader._assignedTo(creep);
        var pos = (flag == null) ?
            RoomPosition.unpack(parseInt(Spawn_1.getAssignmentByName(creep.name))) :
            flag.pos;
        return pos;
    };
    StationaryUpgrader.prototype._work = function (creep) {
        var upgradeProcess = this._process;
        var myPost = Role_Base_1.RoleBase._getMyAssignmentPosition(creep);
        if (!creep.pos.isEqualTo(myPost)) {
            BehaviorBase_1.default.GoToPosition(creep, myPost, { costMatrixType: CostMatrixType_1.CostMatrixType.HalfSpeed });
        }
        var container = creep.room.terminal && creep.room.terminal.pos.isNearTo(creep) ?
            creep.room.terminal :
            _.isFunction(upgradeProcess.EnergySources) ?
                _.first(_.filter(upgradeProcess.EnergySources(), function (s) { return s.pos.isNearTo(creep); })) :
                null;
        var link = this._getCachedObject(creep, 'myLinkId', this._findMyLink);
        var energyExpense = creep.getActiveBodyparts(WORK);
        if (creep.carry[RESOURCE_ENERGY] > 0) {
            var ramparts = [];
            if (!_.isUndefined(creep.room.terminal)) {
                ramparts = upgradeProcess.Ramparts;
            }
            var weakest = _.some(ramparts) ? _.min(ramparts, 'hits') : null;
            var toRepair = ((weakest != null) && (weakest.hits < 1000000)) ? weakest : null;
            if ((toRepair != null) && (creep.pos.getRangeTo(toRepair.pos) <= 3)) {
                creep.repair(toRepair);
            }
            else {
                creep.upgradeController(creep.room.controller);
            }
            if (container && link) {
                var energyLeft = creep.carry[RESOURCE_ENERGY] - energyExpense;
                var toCache = energyLeft - energyExpense;
                if (toCache > 0) {
                    creep.transfer(container, RESOURCE_ENERGY, toCache);
                    return true;
                }
            }
        }
        if (creep.ticksToLive > 1) {
            if ((link != null) && (link.energy > 0) && ((container == null) || (container.store.energy < 1000))) {
                creep.withdraw(link, RESOURCE_ENERGY);
            }
            else {
                creep.withdraw(container, RESOURCE_ENERGY, energyExpense);
            }
        }
        return true;
    };
    StationaryUpgrader.prototype._findMyContainer = function (creep) {
        return _.first(TickCache_1.__findInRange(creep.pos, FIND_STRUCTURES, 1, {
            filter: function (s) { return s.structureType == STRUCTURE_STORAGE; }
        })) ||
            _.first(TickCache_1.__findInRange(creep.pos, FIND_STRUCTURES, 1, {
                filter: function (s) { return s.structureType == STRUCTURE_TERMINAL; }
            })) ||
            _.first(TickCache_1.__findInRange(creep.pos, FIND_STRUCTURES, 1, {
                filter: function (s) { return s.structureType == STRUCTURE_CONTAINER; }
            }));
    };
    StationaryUpgrader.prototype._findMyLink = function (creep) {
        return _.first(TickCache_1.__findInRange(creep.pos, FIND_STRUCTURES, 1, {
            filter: function (s) { return s.structureType == STRUCTURE_LINK; }
        }));
    };
    return StationaryUpgrader;
}(Role_Base_1.RoleBase));
exports.StationaryUpgrader = StationaryUpgrader;


/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var BaseWorker_1 = __webpack_require__(71);
var Role_Base_1 = __webpack_require__(4);
var BehaviorBase_1 = __webpack_require__(2);
var CostMatrixType_1 = __webpack_require__(0);
exports.WORKER_TASK_BUILD = 'build';
exports.WORKER_TASK_FORTIFY = 'fortify';
exports.WORKER_TASK_UPGRADE = 'upgrade';
exports.WORKER_TASK_RECHARGE = 'recharge';
exports.WORKER_TASK_STORE = 'store';
var Worker = (function (_super) {
    __extends(Worker, _super);
    function Worker() {
        var _this = _super.call(this) || this;
        _this.name = 'worker';
        _this._myInitialPositionRange = 1;
        _this[1] = function (c) { return _this._nextState(c); };
        _this[2] = _this._travelToAssignment;
        _this[3] = _this._charge;
        _this[4] = _this._work;
        return _this;
    }
    Worker.prototype._travelToFlag = function (creep, flag, rng) {
        if (creep.fatigue > 0) {
            return true;
        }
        var currentCheckpoint = this._getCurrentCheckpoint(creep, flag);
        if (currentCheckpoint == null) {
            return false;
        }
        var range = creep.pos.getRangeTo(currentCheckpoint);
        if (range == 1) {
            creep.move(creep.pos.getDirectionTo(currentCheckpoint));
            if (currentCheckpoint.pos.isEqualTo(Role_Base_1.RoleBase._getMyAssignmentPosition(creep))) {
                this._setTravelTime(creep);
            }
            return true;
        }
        BehaviorBase_1.default.GoToPosition(creep, currentCheckpoint.pos, { costMatrixType: CostMatrixType_1.CostMatrixType.FullSpeed, range: rng });
        return true;
    };
    return Worker;
}(BaseWorker_1.BaseWorker));
exports.Worker = Worker;


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var BehaviorBase_1 = __webpack_require__(2);
var CostMatrixType_1 = __webpack_require__(0);
var AmountedTask_1 = __webpack_require__(22);
var Task_1 = __webpack_require__(6);
var CarryTask = (function (_super) {
    __extends(CarryTask, _super);
    function CarryTask(data) {
        return _super.call(this, data) || this;
    }
    CarryTask.prototype.Execute = function (agent) {
        if (!(agent instanceof Creep)) {
            throw new Error("Task " + this.id + " (" + this.Type + ") error: agent is not creep");
        }
        if (this.completed >= this.amount) {
            return {
                Type: Task_1.TaskExecutionResultType.Completed
            };
        }
        var creep = Game.getObjectById(agent.id);
        if (creep.carryCapacity < this.amount) {
            throw new Error("Task " + this.id + " (" + this.Type + ") error: not enough capacity (" + creep.carryCapacity + "/" + this.amount + ")");
        }
        if (_.isUndefined(creep.carry[this.resource]) || (creep.carry[this.resource] < this.amount)) {
            return this.takeFromRoomObject(creep, this.from);
        }
        if (!creep.pos.isNearTo(this.to.pos)) {
            BehaviorBase_1.default.GoToPosition(creep, this.to.pos, { costMatrixType: CostMatrixType_1.CostMatrixType.FullSpeed, range: 1 });
            return this.Continue();
        }
        var amount = Math.min(creep.carry[this.resource] || 0, this.amount);
        var res = creep.transfer(this.to, this.resource, amount);
        if (res != OK) {
            if (res == ERR_FULL) {
                creep.transfer(this.to, this.resource);
                this._data['completed'] = this._data['amount'];
                return {
                    Type: Task_1.TaskExecutionResultType.Completed
                };
            }
            throw new Error("Transfer to " + this.to + " failed (return code " + res + ")");
        }
        this.addCompleted(amount);
        var result = {
            Type: this.amount == this.completed ? Task_1.TaskExecutionResultType.Completed : Task_1.TaskExecutionResultType.Continue
        };
        return result;
    };
    CarryTask.prototype.takeFromRoomObject = function (creep, target) {
        if (!creep.pos.isNearTo(target.pos)) {
            BehaviorBase_1.default.GoToPosition(creep, target.pos, { costMatrixType: CostMatrixType_1.CostMatrixType.FullSpeed, range: 1 });
            return this.Continue();
        }
        if (target instanceof Resource) {
            var res = creep.pickup(target);
            if (res != OK) {
                console.log("Withdraw " + this.amount + " of " + this.resource + " from " + target + " (" + target.pos.roomName + ") failed (return code " + res + ", task id " + this.id + ")");
                return this.Postpone(10);
            }
        }
        else {
            var res = creep.withdraw(target, this.resource, this.amount);
            if (res != OK) {
                console.log("Withdraw " + this.amount + " of " + this.resource + " from " + target + " (" + target.pos.roomName + ") failed (return code " + res + ", task id " + this.id + ")");
                return this.Postpone(10);
            }
        }
        var carry = _.clone(creep.carry);
        carry[this.resource] = (carry[this.resource] || 0) + this.amount;
        var costMatrixType = BehaviorBase_1.default._speedType(creep, carry);
        BehaviorBase_1.default.GoToPosition(creep, this.to.pos, { costMatrixType: costMatrixType, range: 1 });
        return this.Continue();
    };
    Object.defineProperty(CarryTask.prototype, "Type", {
        get: function () {
            return Task_1.TaskType.CarryResources;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CarryTask.prototype, "resource", {
        get: function () {
            return this._data['resource'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CarryTask.prototype, "fromId", {
        get: function () {
            return this._data['from'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CarryTask.prototype, "toId", {
        get: function () {
            return this._data['to'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CarryTask.prototype, "from", {
        get: function () {
            return Game.getObjectById(this.fromId);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CarryTask.prototype, "to", {
        get: function () {
            return Game.getObjectById(this.toId);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CarryTask.prototype, "isLocal", {
        get: function () {
            if (!this.from) {
                throw new Error("No 'from': " + this._data['from']);
            }
            if (!this.to) {
                throw new Error("No 'to: " + this._data['to']);
            }
            var fromPosition = this.from.pos;
            return fromPosition.roomName == this.to.pos.roomName;
        },
        enumerable: true,
        configurable: true
    });
    CarryTask.CreateCarryTaskObject = function (id, priority, amount, resource, fromId, toId) {
        var res = AmountedTask_1.default.CreateAmountedTaskObject(id, priority, amount);
        res['resource'] = resource;
        res['from'] = fromId;
        res['to'] = toId;
        return res;
    };
    return CarryTask;
}(AmountedTask_1.default));
exports.default = CarryTask;


/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Task_1 = __webpack_require__(6);
var Reagents_1 = __webpack_require__(56);
var TaskManager_1 = __webpack_require__(7);
var TasksRepository_1 = __webpack_require__(11);
var LabTask_1 = __webpack_require__(32);
var ProduceStep;
(function (ProduceStep) {
    ProduceStep["InitialCleanup"] = "cleanup";
    ProduceStep["Load"] = "load";
    ProduceStep["Reactions"] = "reactions";
    ProduceStep["Unload"] = "unload";
})(ProduceStep = exports.ProduceStep || (exports.ProduceStep = {}));
var ProduceBoostTask = (function (_super) {
    __extends(ProduceBoostTask, _super);
    function ProduceBoostTask(data) {
        return _super.call(this, data) || this;
    }
    ProduceBoostTask.prototype.Execute = function (agent) {
        if (!(agent instanceof StructureTerminal)) {
            throw new Error("Agent " + agent + " is not terminal");
        }
        var reagents = Reagents_1.Reagents[this.resource];
        if (_.isUndefined(reagents)) {
            throw new Error("Reagents not defined for " + this.resource + " in " + this.roomName + " (" + this.id + ")");
        }
        var resultLabs = this.ResultLabs();
        if (resultLabs.length != 8) {
            console.log("ERR: Incomplete labs in " + this.roomName);
            return this.Postpone(100);
        }
        if (_.some(this.subtasks)) {
            return this.Postpone(10);
        }
        var srcLabs = this.sourceLabs();
        if (srcLabs.length != 2) {
            throw new Error("Source labs error in " + this.roomName);
        }
        switch (this.step) {
            case ProduceStep.InitialCleanup: return this.InitialCleanup();
            case ProduceStep.Load: return this.Load();
            case ProduceStep.Reactions: return this.Reactions();
            case ProduceStep.Unload: return this.Unload();
        }
        return this.Postpone(10);
    };
    ProduceBoostTask.prototype.InitialCleanup = function () {
        var _this = this;
        var labs = this.getLabs();
        var busyLabs = this.getBusyLabs();
        var lansToUnload = _.without.apply(_, [labs].concat(busyLabs)).filter(function (l) { return l.mineralAmount > 0; });
        console.log(lansToUnload.length + " labs to cleanup in " + this.roomName);
        if (_.some(lansToUnload)) {
            var unloadTasks = TasksRepository_1.default.QueryTasks(function (task) { return task.Type == Task_1.TaskType.UnloadLab && task.roomName == _this.roomName && !task.isCompleted(); });
            if (!_.some(unloadTasks)) {
                var unloadTask = TaskManager_1.default.AddUnloadLabTask(this.roomName, false);
                this.subtasks.push(unloadTask.id);
            }
            return this.Postpone(10);
        }
        this.step = ProduceStep.Load;
        return this.Continue();
    };
    ProduceBoostTask.prototype.Load = function () {
        var _this = this;
        var srcLabs = this.sourceLabs();
        var reagents = Reagents_1.Reagents[this.resource];
        var left = srcLabs[0];
        var right = srcLabs[1];
        if ((left.mineralType == reagents.left) &&
            (left.mineralAmount == this.amount) &&
            (right.mineralType == reagents.right) &&
            (right.mineralAmount == this.amount)) {
            this.step = ProduceStep.Reactions;
            return this.Continue();
        }
        var loadTasks = TasksRepository_1.default.QueryTasks(function (task) { return (task.Type == Task_1.TaskType.LoadLab) && (task.roomName == _this.roomName) && !task.isCompleted(); });
        if (!_.some(loadTasks)) {
            var loadTask = TaskManager_1.default.AddLoadLabTask(this.roomName, this.amount, reagents.left, reagents.right);
            this.subtasks.push(loadTask.id);
        }
        return this.Postpone(10);
    };
    ProduceBoostTask.prototype.Reactions = function () {
        var srcLabs = this.sourceLabs();
        if (!srcLabs[0].mineralAmount && !srcLabs[1].mineralAmount) {
            console.log("Reactions for " + this.resource + " completed in " + this.roomName);
            this.step = ProduceStep.Unload;
            return this.Continue();
        }
        var resultLabs = this.ResultLabs();
        var busyLabs = this.getBusyLabs();
        var labsForReactions = _.without.apply(_, [resultLabs].concat(busyLabs));
        if (!_.some(labsForReactions)) {
            console.log("No labs in " + this.roomName + " for reactions, sleeping");
            return this.Postpone(10);
        }
        var success = false;
        for (var _i = 0, labsForReactions_1 = labsForReactions; _i < labsForReactions_1.length; _i++) {
            var lab = labsForReactions_1[_i];
            success = (OK == lab.runReaction(srcLabs[0], srcLabs[1])) || success;
        }
        if (!success) {
            this.step = ProduceStep.Unload;
            return this.Continue();
        }
        return {
            Type: Task_1.TaskExecutionResultType.Continue,
            Postpone: REACTION_TIME[this.resource]
        };
    };
    ProduceBoostTask.prototype.Unload = function () {
        var _this = this;
        var resultLabs = this.getLabs();
        var busyLabs = this.getBusyLabs();
        var labsToUnload = _.without.apply(_, [resultLabs].concat(busyLabs));
        if (!_.some(labsToUnload, function (l) { return l.mineralAmount > 0; })) {
            console.log(this.resource + " is created and unloaded in " + this.roomName);
            this._data['completed'] = this.amount;
            return {
                Type: Task_1.TaskExecutionResultType.Completed
            };
        }
        var unloadTasks = TasksRepository_1.default.QueryTasks(function (task) { return task.Type == Task_1.TaskType.UnloadLab && task.roomName == _this.roomName && !task.isCompleted(); });
        if (!_.some(unloadTasks)) {
            var unloadTask = TaskManager_1.default.AddUnloadLabTask(this.roomName, false);
            this.subtasks.push(unloadTask.id);
        }
        return this.Postpone(10);
    };
    Object.defineProperty(ProduceBoostTask.prototype, "Type", {
        get: function () {
            return Task_1.TaskType.ProduceBoost;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProduceBoostTask.prototype, "resource", {
        get: function () {
            return this._data['resource'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProduceBoostTask.prototype, "roomName", {
        get: function () {
            return this._data['roomName'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProduceBoostTask.prototype, "room", {
        get: function () {
            return Game.rooms[this.roomName];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProduceBoostTask.prototype, "reagents", {
        get: function () {
            return [Reagents_1.Reagents[this.resource].left, Reagents_1.Reagents[this.resource].right];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProduceBoostTask.prototype, "Step", {
        get: function () {
            return this.step;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProduceBoostTask.prototype, "step", {
        get: function () {
            if (_.isUndefined(this._data['step'])) {
                this._data['step'] = ProduceStep.InitialCleanup;
            }
            return this._data['step'];
        },
        set: function (value) {
            this._data['step'] = value;
        },
        enumerable: true,
        configurable: true
    });
    ProduceBoostTask.CreateProduceTaskObject = function (id, priority, amount, resource, roomName) {
        var res = LabTask_1.default.CreateLabTaskObject(id, priority, amount, roomName);
        res['resource'] = resource;
        return res;
    };
    return ProduceBoostTask;
}(LabTask_1.default));
exports.default = ProduceBoostTask;


/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var CostMatrixType_1 = __webpack_require__(0);
var RoomProvider_1 = __webpack_require__(12);
var Config_1 = __webpack_require__(8);
var CostMatrixFactory = (function () {
    function CostMatrixFactory() {
    }
    CostMatrixFactory.GetCostMatrix = function (roomName, type) {
        var roomData = RoomProvider_1.default.GetRoomData(roomName);
        var matrix = CostMatrixFactory.GenerateBaseMatrix(roomName, type);
        if (roomData == null) {
            return matrix;
        }
        if (_.some(roomData.RoadsPositions) && (type != CostMatrixType_1.CostMatrixType.TransportRoute)) {
            matrix = CostMatrixFactory.AddRoads(roomName, matrix, roomData.RoadsPositions, type);
        }
        if (_.some(roomData.ObstaclesPositions)) {
            matrix = CostMatrixFactory.AddObstacles(matrix, roomData.ObstaclesPositions);
        }
        if (_.some(roomData.PortalsPositions)) {
            matrix = CostMatrixFactory.AddObstacles(matrix, roomData.PortalsPositions);
        }
        if (type != CostMatrixType_1.CostMatrixType.Military) {
            if (_.some(roomData.LairsPositions)) {
                matrix = CostMatrixFactory.AddSourceKeeperSafety(matrix, roomData.LairsPositions, [roomData.MineralPosition].concat(roomData.SourcesPositions));
            }
        }
        matrix = this.AddHostileCreeps(matrix, roomName, type);
        var room = Game.rooms[roomName];
        if (type == CostMatrixType_1.CostMatrixType.TransportRoute) {
            if (!_.isUndefined(room) && !_.isUndefined(room.controller) && (room.controller.my)) {
                _.forEach(roomData.MineralPosition.around(1, { filter: function (p) { return p.isWalkable(); } }), function (pos) {
                    matrix.set(pos.x, pos.y, Math.max(128, matrix.get(pos.x, pos.y)));
                });
                matrix = CostMatrixFactory.AddObstacles(matrix, roomData.SourcesPositions);
            }
        }
        return matrix;
    };
    CostMatrixFactory.AddRoads = function (roomName, matrix, roadsPositions, type) {
        var costs = _.isObject(type) ? type : {
            Plain: 2,
            Swamp: 10,
            Wall: Infinity,
            RoadOverPlain: type == CostMatrixType_1.CostMatrixType.TransportRoute ? 19 : 1,
            RoadOverSwamp: type == CostMatrixType_1.CostMatrixType.TransportRoute ? 19 : 1,
            RoadOverWall: type == CostMatrixType_1.CostMatrixType.TransportRoute ? 19 : 1
        };
        var roadCosts = [costs.RoadOverPlain, costs.RoadOverWall, costs.RoadOverSwamp];
        var raw = Game.map.getRoomTerrain(roomName).getRawBuffer();
        for (var _i = 0, roadsPositions_1 = roadsPositions; _i < roadsPositions_1.length; _i++) {
            var p = roadsPositions_1[_i];
            var terrain = raw[p.x + p.y * 50];
            if ((terrain == TERRAIN_MASK_WALL) && (p.x == 0 || p.x == 49 || p.y == 0 || p.y == 49)) {
                matrix.set(p.x, p.y, Infinity);
            }
            else {
                matrix.set(p.x, p.y, roadCosts[terrain]);
            }
        }
        return matrix;
    };
    CostMatrixFactory.AddObstacles = function (matrix, obstaclesPositions) {
        for (var _i = 0, obstaclesPositions_1 = obstaclesPositions; _i < obstaclesPositions_1.length; _i++) {
            var p = obstaclesPositions_1[_i];
            matrix.set(p.x, p.y, Infinity);
        }
        return matrix;
    };
    CostMatrixFactory.AddHostileCreeps = function (matrix, roomName, type) {
        if (_.isUndefined(Game.rooms[roomName])) {
            return matrix;
        }
        var hostiles = Game.rooms[roomName].find(FIND_HOSTILE_CREEPS);
        for (var _i = 0, hostiles_1 = hostiles; _i < hostiles_1.length; _i++) {
            var c = hostiles_1[_i];
            if ((type != CostMatrixType_1.CostMatrixType.Military) || _.includes(Config_1.alliedPlayers, c.owner.username)) {
                matrix.set(c.pos.x, c.pos.y, Infinity);
            }
        }
        return matrix;
    };
    CostMatrixFactory.AddSourceKeeperSafety = function (matrix, lairsPositions, resourceDeposits) {
        for (var _i = 0, _a = lairsPositions.concat(resourceDeposits); _i < _a.length; _i++) {
            var p = _a[_i];
            if (p) {
                for (var _b = 0, _c = p.around(4); _b < _c.length; _b++) {
                    var t = _c[_b];
                    matrix.set(t.x, t.y, 80 + matrix.get(t.x, t.y));
                }
            }
        }
        return matrix;
    };
    CostMatrixFactory.GenerateBaseMatrix = function (roomName, type) {
        if (_.isObject(type)) {
            return CostMatrixFactory.GenerateTerrianCosts(roomName, type);
        }
        var costs = {
            Plain: 1,
            Swamp: 5,
            Wall: Infinity,
            RoadOverWall: 1,
            RoadOverSwamp: 1,
            RoadOverPlain: 1
        };
        switch (type) {
            case CostMatrixType_1.CostMatrixType.HalfSpeed:
                costs.Plain = 2;
                costs.Swamp = 10;
                break;
            case CostMatrixType_1.CostMatrixType.Offroad:
                costs.Swamp = 1;
                break;
            case CostMatrixType_1.CostMatrixType.TransportRoute:
                costs.Plain = 20;
                costs.Swamp = 21;
                break;
        }
        return CostMatrixFactory.GenerateTerrianCosts(roomName, costs);
    };
    CostMatrixFactory.GenerateTerrianCosts = function (roomName, costs) {
        var terrainCosts = [costs.Plain, costs.Wall, costs.Swamp];
        var matrix = new PathFinder.CostMatrix();
        var raw = Game.map.getRoomTerrain(roomName).getRawBuffer();
        for (var x = 0; x < 50; x++) {
            for (var y = 0; y < 50; y++) {
                var terrain = raw[x + y * 50];
                if ((terrain == TERRAIN_MASK_WALL) && (x == 0 || x == 49 || y == 0 || y == 49)) {
                    matrix.set(x, y, Infinity);
                }
                else {
                    matrix.set(x, y, terrainCosts[terrain]);
                }
            }
        }
        return matrix;
    };
    return CostMatrixFactory;
}());
exports.default = CostMatrixFactory;


/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var baseEffectiveness = (_a = {},
    _a[WORK] = {
        harvest: 1,
        build: BUILD_POWER,
        repair: REPAIR_POWER,
        dismantle: DISMANTLE_POWER,
        upgradeController: UPGRADE_CONTROLLER_POWER
    },
    _a[ATTACK] = {
        attack: ATTACK_POWER,
    },
    _a[RANGED_ATTACK] = {
        rangedAttack: RANGED_ATTACK_POWER,
        rangedMassAttack: RANGED_ATTACK_POWER
    },
    _a[HEAL] = {
        heal: HEAL_POWER,
        rangedHeal: RANGED_HEAL_POWER
    },
    _a[CARRY] = {
        capacity: CARRY_CAPACITY
    },
    _a[MOVE] = {
        fatigue: 2
    },
    _a[CLAIM] = {
        attackController: CONTROLLER_CLAIM_DOWNGRADE
    },
    _a);
var CreepAnalyzer = (function () {
    function CreepAnalyzer() {
    }
    CreepAnalyzer.CalcBodyEffectiveness = function (body) {
        var result = {
            harvest: 0,
            build: 0,
            repair: 0,
            dismantle: 0,
            upgradeController: 0,
            attack: 0,
            rangedAttack: 0,
            rangedMassAttack: 0,
            heal: 0,
            rangedHeal: 0,
            capacity: 0,
            fatigue: 0,
            attackController: 0
        };
        _.forEach(body, function (part) {
            if (!baseEffectiveness[part.type]) {
                return;
            }
            for (var method in baseEffectiveness[part.type]) {
                result[method] += baseEffectiveness[part.type][method] * (part.boost ? BOOSTS[part.type][part.boost][method] : 1);
            }
        });
        return result;
    };
    return CreepAnalyzer;
}());
exports.default = CreepAnalyzer;
var _a;


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Guid = (function () {
    function Guid() {
    }
    Guid.newGuid = function () {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
    };
    return Guid;
}());
exports.default = Guid;


/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var MemHack_1 = __webpack_require__(122);
var GameLoop_1 = __webpack_require__(121);
exports.CodeRevision = '0.4';
MemHack_1.default.register();
var cpuSpam = '-';
function mloop() {
    var beforeAnything = Game.cpu.getUsed();
    MemHack_1.default.pretick();
    var afterMemHack = Game.cpu.getUsed();
    RawMemory.setPublicSegments([80]);
    var selected = Memory['selectedId'];
    var afterMemory = Game.cpu.getUsed();
    if (_.isDate(selected)) {
        console.log(selected);
    }
    if (Memory.stop) {
        return;
    }
    if (_.isUndefined(Memory.rooms)) {
        Memory.rooms = {};
    }
    if (_.isUndefined(Memory.creeps)) {
        Memory.rooms = {};
    }
    var beforeNew = Game.cpu.getUsed();
    if (beforeNew > 150) {
    }
    if (Memory['lastExplosionTick'] == Game.time) {
        Game.cpu.halt();
        return;
    }
    GameLoop_1.tick();
    var afterTick = Game.cpu.getUsed();
    if (cpuSpam == Game.shard.name) {
        console.log("SYS " + beforeAnything + "|MH " + (afterMemHack - beforeAnything) + "|MEM " + (afterMemory - afterMemHack) + "|TICK " + (afterTick - afterMemory));
    }
}
exports.loop = mloop;


/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Square2Formation_1 = __webpack_require__(93);
var Square3Formation_1 = __webpack_require__(50);
var FormationFactory = (function () {
    function FormationFactory() {
    }
    FormationFactory.GetFormation = function (id) {
        return FormationFactory.RegisteredFormations[id];
    };
    FormationFactory.RegisteredFormations = {
        'square2': new Square2Formation_1.default(),
        'square3': new Square3Formation_1.default()
    };
    return FormationFactory;
}());
exports.default = FormationFactory;


/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Formation_1 = __webpack_require__(33);
var Square3Formation = (function (_super) {
    __extends(Square3Formation, _super);
    function Square3Formation() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(Square3Formation.prototype, "Size", {
        get: function () {
            return 3;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Square3Formation.prototype, "TemplatedPositions", {
        get: function () {
            return [
                { dx: 0, dy: -1 },
                { dx: 0, dy: 0 },
                { dx: 0, dy: 1 },
                { dx: -1, dy: -1 },
                { dx: -1, dy: 0 },
                { dx: -1, dy: 1 },
                { dx: 1, dy: -1 },
                { dx: 1, dy: 0 },
                { dx: 1, dy: 1 },
            ];
        },
        enumerable: true,
        configurable: true
    });
    Square3Formation.ClockwiseDirection = function (facingFromCenter) {
        return (3 + 2 * Math.floor(facingFromCenter / 2)) % 8;
    };
    Square3Formation.CounterClockwiseDirection = function (facingFromCenter) {
        return (5 + 2 * Math.floor((facingFromCenter + 1) / 2)) % 8;
    };
    return Square3Formation;
}(Formation_1.Formation));
exports.default = Square3Formation;


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Squad_1 = __webpack_require__(26);
var SquadFactory_1 = __webpack_require__(94);
var Guid_1 = __webpack_require__(47);
var SquadRepository = (function () {
    function SquadRepository() {
    }
    SquadRepository.GetById = function (id) {
        SquadRepository.UpdateCacheIfNecessary();
        return SquadRepository.SquadCache[id];
    };
    SquadRepository.CreateSquad = function (spawnFrom, assign, squadType) {
        if (_.isUndefined(Memory['Squads'])) {
            Memory['Squads'] = [];
        }
        var squadData = {
            squadId: Guid_1.default.newGuid(),
            squadType: squadType,
            spawnRoomNames: spawnFrom,
            assign: assign,
        };
        var squad = SquadFactory_1.default.CreateSquad(squadData);
        SquadRepository.SquadCache[squad.id] = squad;
        Memory['Squads'].push(squadData);
        return squad;
    };
    SquadRepository.CleanupSquads = function () {
        var deadSquads = _.filter(_.values(SquadRepository.SquadCache), function (sq) { return (sq.State != Squad_1.SquadState.Spawning) && !_.some(_.compact(sq.Members)); });
        var _loop_1 = function (sq) {
            _.remove(Memory['Squads'], function (s) { return s['squadId'] == sq.id; });
            delete SquadRepository.SquadCache[sq.id];
        };
        for (var _i = 0, deadSquads_1 = deadSquads; _i < deadSquads_1.length; _i++) {
            var sq = deadSquads_1[_i];
            _loop_1(sq);
        }
    };
    SquadRepository.UpdateCacheIfNecessary = function () {
        if (_.isUndefined(Memory['Squads'])) {
            Memory['Squads'] = [];
        }
        if (_.isUndefined(SquadRepository.SquadCache) ||
            (SquadRepository.SquadCache == null) ||
            (_.size(SquadRepository.SquadCache) != Memory['Squads'].length)) {
            SquadRepository.SquadCache = {};
            var squads = Memory['Squads'];
            _.forEach(squads, function (data) {
                var squad = SquadFactory_1.default.CreateSquad(data);
                SquadRepository.SquadCache[squad.id] = squad;
            });
        }
    };
    SquadRepository.SquadCache = {};
    return SquadRepository;
}());
exports.default = SquadRepository;


/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var BunkerC_1 = __webpack_require__(97);
var BunkerA_1 = __webpack_require__(96);
exports.templateFactory = {
    'BunkerA': BunkerA_1.default,
    'BunkerC': BunkerC_1.default
};


/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.headRamparts = [
    { level: 7, structureType: STRUCTURE_RAMPART, dx: 0, dy: 0 },
    { level: 7, structureType: STRUCTURE_RAMPART, dx: 0, dy: 1 },
    { level: 7, structureType: STRUCTURE_RAMPART, dx: 0, dy: 2 },
    { level: 7, structureType: STRUCTURE_RAMPART, dx: 0, dy: -1 },
    { level: 7, structureType: STRUCTURE_RAMPART, dx: 0, dy: -2 },
    { level: 7, structureType: STRUCTURE_RAMPART, dx: 1, dy: 0 },
    { level: 7, structureType: STRUCTURE_RAMPART, dx: 2, dy: 0 },
    { level: 7, structureType: STRUCTURE_RAMPART, dx: -1, dy: 0 },
    { level: 7, structureType: STRUCTURE_RAMPART, dx: -2, dy: 0 },
    { level: 7, structureType: STRUCTURE_RAMPART, dx: 2, dy: 2 },
    { level: 7, structureType: STRUCTURE_RAMPART, dx: 2, dy: -2 },
    { level: 7, structureType: STRUCTURE_RAMPART, dx: -2, dy: -2 },
    { level: 7, structureType: STRUCTURE_RAMPART, dx: -2, dy: 2 },
    { level: 7, structureType: STRUCTURE_RAMPART, dx: 1, dy: 1 },
    { level: 7, structureType: STRUCTURE_RAMPART, dx: 1, dy: -1 },
    { level: 7, structureType: STRUCTURE_RAMPART, dx: -1, dy: -1 },
    { level: 7, structureType: STRUCTURE_RAMPART, dx: -1, dy: 1 },
];
exports.layer1 = [
    { level: 6, structureType: STRUCTURE_RAMPART, dx: -6, dy: 5 },
    { level: 6, structureType: STRUCTURE_RAMPART, dx: -6, dy: 4 },
    { level: 6, structureType: STRUCTURE_RAMPART, dx: -6, dy: 3 },
    { level: 6, structureType: STRUCTURE_RAMPART, dx: -6, dy: 2 },
    { level: 6, structureType: STRUCTURE_RAMPART, dx: -6, dy: 1 },
    { level: 6, structureType: STRUCTURE_RAMPART, dx: -6, dy: 0 },
    { level: 6, structureType: STRUCTURE_RAMPART, dx: -6, dy: -1 },
    { level: 6, structureType: STRUCTURE_RAMPART, dx: -6, dy: -2 },
    { level: 6, structureType: STRUCTURE_RAMPART, dx: -6, dy: -3 },
    { level: 6, structureType: STRUCTURE_RAMPART, dx: -6, dy: -4 },
    { level: 6, structureType: STRUCTURE_RAMPART, dx: -6, dy: -5 },
    { level: 6, structureType: STRUCTURE_RAMPART, dx: -5, dy: -5 },
    { level: 6, structureType: STRUCTURE_RAMPART, dx: -5, dy: -6 },
    { level: 6, structureType: STRUCTURE_RAMPART, dx: -4, dy: -6 },
    { level: 6, structureType: STRUCTURE_RAMPART, dx: -3, dy: -6 },
    { level: 6, structureType: STRUCTURE_RAMPART, dx: -2, dy: -6 },
    { level: 6, structureType: STRUCTURE_RAMPART, dx: -1, dy: -6 },
    { level: 6, structureType: STRUCTURE_RAMPART, dx: -0, dy: -6 },
    { level: 6, structureType: STRUCTURE_RAMPART, dx: 1, dy: -6 },
    { level: 6, structureType: STRUCTURE_RAMPART, dx: 2, dy: -6 },
    { level: 6, structureType: STRUCTURE_RAMPART, dx: 3, dy: -6 },
    { level: 6, structureType: STRUCTURE_RAMPART, dx: 4, dy: -6 },
    { level: 6, structureType: STRUCTURE_RAMPART, dx: 5, dy: -6 },
    { level: 6, structureType: STRUCTURE_RAMPART, dx: 5, dy: -5 },
    { level: 6, structureType: STRUCTURE_RAMPART, dx: 6, dy: -5 },
    { level: 6, structureType: STRUCTURE_RAMPART, dx: 6, dy: -4 },
    { level: 6, structureType: STRUCTURE_RAMPART, dx: 6, dy: -3 },
    { level: 6, structureType: STRUCTURE_RAMPART, dx: 6, dy: -2 },
    { level: 6, structureType: STRUCTURE_RAMPART, dx: 6, dy: -1 },
    { level: 6, structureType: STRUCTURE_RAMPART, dx: 6, dy: 0 },
    { level: 6, structureType: STRUCTURE_RAMPART, dx: 6, dy: 1 },
    { level: 6, structureType: STRUCTURE_RAMPART, dx: 6, dy: 2 },
    { level: 6, structureType: STRUCTURE_RAMPART, dx: 6, dy: 3 },
    { level: 6, structureType: STRUCTURE_RAMPART, dx: 6, dy: 4 },
    { level: 6, structureType: STRUCTURE_RAMPART, dx: 6, dy: 5 },
    { level: 6, structureType: STRUCTURE_RAMPART, dx: 5, dy: 5 },
    { level: 6, structureType: STRUCTURE_RAMPART, dx: 5, dy: 6 },
    { level: 6, structureType: STRUCTURE_RAMPART, dx: 4, dy: 6 },
    { level: 6, structureType: STRUCTURE_RAMPART, dx: 3, dy: 6 },
    { level: 6, structureType: STRUCTURE_RAMPART, dx: 2, dy: 6 },
    { level: 6, structureType: STRUCTURE_RAMPART, dx: 1, dy: 6 },
    { level: 6, structureType: STRUCTURE_RAMPART, dx: 0, dy: 6 },
    { level: 6, structureType: STRUCTURE_RAMPART, dx: -1, dy: 6 },
    { level: 6, structureType: STRUCTURE_RAMPART, dx: -2, dy: 6 },
    { level: 6, structureType: STRUCTURE_RAMPART, dx: -3, dy: 6 },
    { level: 6, structureType: STRUCTURE_RAMPART, dx: -4, dy: 6 },
    { level: 6, structureType: STRUCTURE_RAMPART, dx: -5, dy: 6 },
    { level: 6, structureType: STRUCTURE_RAMPART, dx: -5, dy: 5 },
];
exports.layer2 = [
    { level: 8, structureType: STRUCTURE_RAMPART, dx: -5, dy: 4 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: -5, dy: 3 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: -5, dy: 2 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: -5, dy: 1 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: -5, dy: 0 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: -5, dy: -1 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: -5, dy: -2 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: -5, dy: -3 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: -5, dy: -4 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: -4, dy: -4 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: -4, dy: -5 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: -3, dy: -5 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: -2, dy: -5 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: -1, dy: -5 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: -0, dy: -5 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: 1, dy: -5 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: 2, dy: -5 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: 3, dy: -5 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: 4, dy: -5 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: 4, dy: -4 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: 5, dy: -4 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: 5, dy: -3 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: 5, dy: -2 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: 5, dy: -1 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: 5, dy: 0 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: 5, dy: 1 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: 5, dy: 2 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: 5, dy: 3 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: 5, dy: 4 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: 4, dy: 4 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: 4, dy: 5 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: 3, dy: 5 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: 2, dy: 5 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: 1, dy: 5 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: 0, dy: 5 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: -1, dy: 5 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: -2, dy: 5 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: -3, dy: 5 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: -4, dy: 5 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: -4, dy: 4 },
];
exports.layer3 = [
    { level: 8, structureType: STRUCTURE_RAMPART, dx: -4, dy: 3 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: -4, dy: 2 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: -4, dy: 1 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: -4, dy: 0 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: -4, dy: -1 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: -4, dy: -2 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: -4, dy: -3 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: -3, dy: -3 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: -3, dy: -4 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: -2, dy: -4 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: -1, dy: -4 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: -0, dy: -4 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: 1, dy: -4 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: 2, dy: -4 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: 3, dy: -4 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: 3, dy: -3 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: 4, dy: -3 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: 4, dy: -2 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: 4, dy: -1 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: 4, dy: 0 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: 4, dy: 1 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: 4, dy: 2 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: 4, dy: 3 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: 3, dy: 3 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: 3, dy: 4 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: 2, dy: 4 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: 1, dy: 4 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: 0, dy: 4 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: -1, dy: 4 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: -2, dy: 4 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: -3, dy: 4 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: -3, dy: 3 },
];
exports.innerRamparts = [
    { level: 8, structureType: STRUCTURE_RAMPART, dx: -3, dy: 2 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: -3, dy: 1 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: -3, dy: 0 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: -3, dy: -1 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: -3, dy: -2 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: -2, dy: -3 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: -1, dy: -3 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: -0, dy: -3 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: 1, dy: -3 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: 2, dy: -3 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: 3, dy: -2 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: 3, dy: -1 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: 3, dy: 0 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: 3, dy: 1 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: 3, dy: 2 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: 2, dy: 3 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: 1, dy: 3 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: 0, dy: 3 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: -1, dy: 3 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: -2, dy: 3 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: -2, dy: -1 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: -1, dy: -2 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: 1, dy: -2 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: 2, dy: -1 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: -2, dy: 1 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: -1, dy: 2 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: 2, dy: 1 },
    { level: 8, structureType: STRUCTURE_RAMPART, dx: 1, dy: 2 },
];


/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var TaskManager_1 = __webpack_require__(7);
var TasksRepository_1 = __webpack_require__(11);
var Task_1 = __webpack_require__(6);
function default_1(roomName, cancel) {
    var room = Game.rooms[roomName];
    if (_.isUndefined(room)) {
        return "No visibility on room " + roomName;
    }
    if (_.isUndefined(room.controller)) {
        return "No controller in room " + roomName;
    }
    if (!room.controller.my) {
        return "Room " + roomName + " is not yours";
    }
    var created = 0;
    var unloadTasks = TasksRepository_1.default.QueryTasks(function (task) { return task.Type == Task_1.TaskType.UnloadLab && task.roomName == roomName && !task.isCompleted(); });
    if (!_.some(unloadTasks)) {
        TaskManager_1.default.AddUnloadLabTask(roomName, true);
        created++;
    }
    var report = created + " tasks created\n";
    if (_.isUndefined(cancel) || cancel) {
        var produceTasks = TasksRepository_1.default.QueryTasks(function (t) {
            return (t.Type == Task_1.TaskType.ProduceBoost) &&
                (t.roomName == roomName) &&
                !t.isCompleted();
        });
        if (_.some(produceTasks)) {
            for (var _i = 0, produceTasks_1 = produceTasks; _i < produceTasks_1.length; _i++) {
                var t = produceTasks_1[_i];
                report += t.resource + " production dropped";
                TasksRepository_1.default.CleanupTask(t);
            }
        }
    }
    return report;
}
exports.default = default_1;


/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.Locks = {};
function flushLocks() {
    exports.Locks = {};
}
exports.flushLocks = flushLocks;


/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.Reagents = {
    UL: { left: 'U', right: 'L' },
    ZK: { left: 'Z', right: 'K' },
    G: { left: 'UL', right: 'ZK' },
    OH: { left: 'O', right: 'H' },
    KO: { left: 'K', right: 'O' },
    LO: { left: 'L', right: 'O' },
    UO: { left: 'U', right: 'O' },
    ZO: { left: 'Z', right: 'O' },
    GO: { left: 'G', right: 'O' },
    KH: { left: 'K', right: 'H' },
    LH: { left: 'L', right: 'H' },
    UH: { left: 'U', right: 'H' },
    ZH: { left: 'Z', right: 'H' },
    GH: { left: 'G', right: 'H' },
    GH2O: { left: 'GH', right: 'OH' },
    UHO2: { left: 'UO', right: 'OH' },
    ZHO2: { left: 'ZO', right: 'OH' },
    LHO2: { left: 'LO', right: 'OH' },
    KHO2: { left: 'KO', right: 'OH' },
    GHO2: { left: 'GO', right: 'OH' },
    UH2O: { left: 'UH', right: 'OH' },
    LH2O: { left: 'LH', right: 'OH' },
    ZH2O: { left: 'ZH', right: 'OH' },
    KH2O: { left: 'KH', right: 'OH' },
    XGH2O: { left: 'GH2O', right: 'X' },
    XUHO2: { left: 'UHO2', right: 'X' },
    XZHO2: { left: 'ZHO2', right: 'X' },
    XLHO2: { left: 'LHO2', right: 'X' },
    XKHO2: { left: 'KHO2', right: 'X' },
    XGHO2: { left: 'GHO2', right: 'X' },
    XUH2O: { left: 'UH2O', right: 'X' },
    XLH2O: { left: 'LH2O', right: 'X' },
    XZH2O: { left: 'ZH2O', right: 'X' },
    XKH2O: { left: 'KH2O', right: 'X' },
};


/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Process_1 = __webpack_require__(5);
var TickCache_1 = __webpack_require__(1);
var Repair_1 = __webpack_require__(181);
var Config_1 = __webpack_require__(8);
var Rooms_1 = __webpack_require__(14);
function getTowers(room) {
    return TickCache_1.__find(room, FIND_MY_STRUCTURES, {
        filter: function (s) { return s.structureType === STRUCTURE_TOWER; }
    });
}
var targetLocks = {};
function flushTargetLocks() {
    targetLocks = {};
}
exports.flushTargetLocks = flushTargetLocks;
var BasicTowers = (function (_super) {
    __extends(BasicTowers, _super);
    function BasicTowers() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(BasicTowers.prototype, "name", {
        get: function () {
            return "/usr/bin/basic-towers";
        },
        enumerable: true,
        configurable: true
    });
    BasicTowers.prototype.tick = function () {
        if (!_.isUndefined(this._room.memory['towersProcessed'])) {
            return;
        }
        flushTargetLocks();
        var towers = getTowers(this._room);
        _.each(towers, BasicTowers.processTower);
    };
    Object.defineProperty(BasicTowers.prototype, "_room", {
        get: function () {
            return Game.rooms[this._roomName];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BasicTowers.prototype, "_roomName", {
        get: function () {
            return this.processInfo.args[0];
        },
        enumerable: true,
        configurable: true
    });
    BasicTowers.processTower = function (tower) {
        if (tower.energy < 10) {
            return;
        }
        if (tower.room.memory['stopTowers']) {
            return;
        }
        BasicTowers.healAllies(tower) ||
            BasicTowers.spreadFire(tower) ||
            BasicTowers.attackEnemies(tower, 50) ||
            BasicTowers.repairStructures(tower) ||
            BasicTowers.fortify(tower);
    };
    BasicTowers.healDefenders = function (tower) {
        var damagedCreep = tower.pos.findClosestByRange(FIND_CREEPS, {
            filter: function (c) {
                return (c.hits < c.hitsMax) &&
                    (c.my || _.includes(Config_1.alliedPlayers, c.owner.username)) &&
                    (c.getActiveBodyparts(RANGED_ATTACK) > 0);
            }
        });
        if (damagedCreep != null) {
            tower.heal(damagedCreep);
            return true;
        }
        var ally = Game.getObjectById(tower.room.memory['focusHeal']);
        if (ally != null) {
            tower.heal(ally);
            return true;
        }
        return false;
    };
    BasicTowers.healAllies = function (tower) {
        var creepsToHeal = tower.room.find(FIND_CREEPS, {
            filter: function (c) {
                return (c.hits < c.hitsMax) &&
                    (c.my || _.includes(Config_1.alliedPlayers, c.owner.username));
            }
        }).concat(tower.room.find(FIND_POWER_CREEPS, {
            filter: function (c) {
                return (c.hits < c.hitsMax) &&
                    (c.my || _.includes(Config_1.alliedPlayers, c.owner.username));
            }
        }));
        var damagedCreep = tower.pos.findClosestByRange(creepsToHeal);
        if (damagedCreep != null) {
            tower.heal(damagedCreep);
            return true;
        }
        var ally = Game.getObjectById(tower.room.memory['focusHeal']);
        if (ally != null) {
            tower.heal(ally);
            return true;
        }
        return false;
    };
    BasicTowers.spreadFire = function (tower) {
        if (Game.time % 4 != 0) {
            return false;
        }
        var focusedCreep = Game.getObjectById(tower.room.memory['focusFire']);
        var target = focusedCreep == null ?
            tower.pos.findClosestByRange(FIND_HOSTILE_CREEPS, {
                filter: function (c) { return !_.includes(Config_1.alliedPlayers, c.owner.username) && !_.includes(_.keys(targetLocks), c.id) && ((tower.room.storage || tower).pos.getRangeTo(c) < 10); }
            }) :
            tower.pos.findClosestByRange(TickCache_1.__findInRange(focusedCreep.pos, FIND_HOSTILE_CREEPS, 1, {
                filter: function (c) { return !_.includes(Config_1.alliedPlayers, c.owner.username) && !_.includes(_.keys(targetLocks), c.id) && ((tower.room.storage || tower).pos.getRangeTo(c) < 10); }
            }));
        if (target == null) {
            return false;
        }
        targetLocks[target.id] = tower.id;
        tower.attack(target);
        return true;
    };
    BasicTowers.attackEnemies = function (tower, maxDistance) {
        var target = Game.getObjectById(tower.room.memory['focusFire']) ||
            tower.pos.findClosestByRange(FIND_HOSTILE_CREEPS, {
                filter: function (c) {
                    return !_.includes(Config_1.alliedPlayers, c.owner.username) &&
                        (((tower.room.storage || tower).pos.getRangeTo(c) <= maxDistance) || (c.hits < c.hitsMax) || (c.getActiveBodyparts(TOUGH) == 0)) &&
                        !c.pos.isEdge();
                }
            });
        if (target != null) {
            tower.attack(target);
            return true;
        }
        return false;
    };
    BasicTowers.fortify = function (tower) {
        if (tower.room.storage == null) {
            return false;
        }
        var focusRaise = Game.getObjectById(tower.room.memory['focusRaiseId']);
        if ((_.sum(tower.room.storage.store) < Config_1.fortifyStorageLimit) && (focusRaise == null)) {
            return false;
        }
        var worstRampart = focusRaise || Rooms_1.getRampartToFortify(tower.room);
        if (worstRampart == null) {
            return false;
        }
        tower.repair(worstRampart);
        return true;
    };
    BasicTowers.repairStructures = function (tower) {
        if (tower.room.memory.disableRepair) {
            return false;
        }
        var currentRapair = _.first(Repair_1.getRepairQueue(tower.room));
        if (currentRapair != null) {
            tower.repair(currentRapair);
            return true;
        }
        return false;
    };
    return BasicTowers;
}(Process_1.Process));
exports.BasicTowers = BasicTowers;


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Process_1 = __webpack_require__(5);
var ProcessList_1 = __webpack_require__(9);
var Task_1 = __webpack_require__(6);
var TasksRepository_1 = __webpack_require__(11);
var SimpleTaskProcessor = (function (_super) {
    __extends(SimpleTaskProcessor, _super);
    function SimpleTaskProcessor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SimpleTaskProcessor.prototype.tick = function () {
        if (!this.task) {
            console.log("No task " + this.id);
            ProcessList_1.KillProcess(this.id);
            return;
        }
        if (this.task.isPostponed()) {
            return;
        }
        var result = this.task.Execute(this.agent);
        if (result.Type == Task_1.TaskExecutionResultType.Postpone) {
            this.sleep(result.Postpone || 10);
            return;
        }
        if (result.Type == Task_1.TaskExecutionResultType.Continue) {
            if (result.Postpone != null) {
                this.sleep(result.Postpone);
            }
            return;
        }
        if (result.Type == Task_1.TaskExecutionResultType.Completed) {
            TasksRepository_1.default.CleanupCompletedTasks();
            ProcessList_1.KillProcess(this.id);
            return;
        }
        console.log("Unexpected result of task " + this.task.Type + "#" + this.task.id + ": " + JSON.stringify(result));
    };
    Object.defineProperty(SimpleTaskProcessor.prototype, "task", {
        get: function () {
            return TasksRepository_1.default.GetById(this.processInfo.args[0]);
        },
        enumerable: true,
        configurable: true
    });
    return SimpleTaskProcessor;
}(Process_1.Process));
exports.SimpleTaskProcessor = SimpleTaskProcessor;


/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var PopulatedProcess_1 = __webpack_require__(10);
var Rooms_1 = __webpack_require__(14);
var excludeChargeRoutes = true;
var UpgradeBase = (function (_super) {
    __extends(UpgradeBase, _super);
    function UpgradeBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UpgradeBase.prototype._getPositions = function () {
        var positions = this._getAllPositions();
        if (excludeChargeRoutes) {
            positions = _.without.apply(_, [positions].concat(this._getChargeRoutesPositions()));
        }
        return positions;
    };
    UpgradeBase.prototype._getChargeRoutesPositions = function () {
        var _this = this;
        var result = [];
        var roomRoutes = Rooms_1.getChargeRoutes(this._room);
        for (var _i = 0, _a = _.values(roomRoutes); _i < _a.length; _i++) {
            var route = _a[_i];
            for (var _b = 0, _c = _.values(route); _b < _c.length; _b++) {
                var path = _c[_b];
                var steps = Room.deserializePath(path);
                var positions = steps.map(function (step) { return new RoomPosition(step.x, step.y, _this._roomName); });
                for (var _d = 0, positions_1 = positions; _d < positions_1.length; _d++) {
                    var p = positions_1[_d];
                    result.push(p.pack());
                }
            }
        }
        return result;
    };
    Object.defineProperty(UpgradeBase.prototype, "ParentRoomName", {
        get: function () {
            return this._roomName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UpgradeBase.prototype, "ParentRoom", {
        get: function () {
            return this._room;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UpgradeBase.prototype, "_room", {
        get: function () {
            return Game.rooms[this._roomName];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UpgradeBase.prototype, "_roomName", {
        get: function () {
            return this.processInfo.args[0];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UpgradeBase.prototype, "Ramparts", {
        get: function () {
            var sources = this.EnergySources();
            var room = this._room;
            return this.GetCachedObjects('ramparts', function () { return room.find(FIND_STRUCTURES, {
                filter: function (s) {
                    return (s.structureType == STRUCTURE_RAMPART) &&
                        _.some(sources, function (c) { return s.pos.getRangeTo(c) <= 1; });
                }
            }); });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UpgradeBase.prototype, "_maxHaulerSegments", {
        get: function () {
            return Math.min(Math.floor(this.ParentRoom.energyCapacityAvailable / 150), 16);
        },
        enumerable: true,
        configurable: true
    });
    UpgradeBase.prototype._maxHaulerSetup = function () {
        var segments = this._maxHaulerSegments;
        return "hauler/" + 2 * segments + "c" + segments + "m";
    };
    return UpgradeBase;
}(PopulatedProcess_1.PopulatedProcess));
exports.default = UpgradeBase;


/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FighterBase_1 = __webpack_require__(13);
var Spawn_1 = __webpack_require__(3);
var CostMatrixType_1 = __webpack_require__(0);
var Dismantler = (function (_super) {
    __extends(Dismantler, _super);
    function Dismantler() {
        var _this = _super.call(this) || this;
        _this.name = 'dismantler';
        _this[1] = _this._work;
        return _this;
    }
    Dismantler.prototype._getMyHealBoostMultiplier = function () {
        return 1;
    };
    Dismantler.prototype._getMyDismantleBoostMultiplier = function () {
        return 1;
    };
    Dismantler.prototype._combatActions = function (creep) {
        return this._dismantleFocusedStructure(creep) || this._healMyMinorDamage(creep) ||
            this._dismantleEnemyStructureNear(creep);
    };
    Dismantler.prototype._work = function (creep) {
        this._combatActions(creep);
        var destination = Game.flags[Spawn_1.getAssignmentByName(creep.name)];
        return this._moveInRaidToFlag(creep, CostMatrixType_1.CostMatrixType.FullSpeed, 0) ||
            this._travelToFlag(creep, destination, 0, CostMatrixType_1.CostMatrixType.FullSpeed) ||
            this._moveToFlag(creep, 0, CostMatrixType_1.CostMatrixType.FullSpeed) || true;
    };
    return Dismantler;
}(FighterBase_1.default));
exports.default = Dismantler;


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var BehaviorBase_1 = __webpack_require__(2);
var Config_1 = __webpack_require__(8);
var Spawn_1 = __webpack_require__(3);
var TickCache_1 = __webpack_require__(1);
var CostMatrixType_1 = __webpack_require__(0);
var RoomProvider_1 = __webpack_require__(12);
var Suppressor_1 = __webpack_require__(30);
var blockingScheme = [
    { x: -1, y: -3 },
    { x: 1, y: 3 },
    { x: -3, y: 1 },
    { x: 3, y: -1 },
    { x: 1, y: -3 },
    { x: -1, y: 3 },
    { x: -3, y: -1 },
    { x: 3, y: 1 },
    { x: -3, y: -3 },
    { x: 3, y: 3 },
    { x: -3, y: 3 },
    { x: 3, y: -3 },
    { x: 0, y: 3 },
    { x: 0, y: -3 },
    { x: 3, y: 0 },
    { x: -3, y: 0 },
];
var PortalBlocker = (function (_super) {
    __extends(PortalBlocker, _super);
    function PortalBlocker() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = 'portalBlocker';
        return _this;
    }
    PortalBlocker.prototype._fight = function (creep) {
        if (!_.isUndefined(creep.room.memory['lastExitTick']) &&
            ((creep.room.memory['lastExitTick'] + 2000) < Game.time)) {
            var flag = this._getMyFlag(creep);
            if ((flag != null) && (flag.secondaryColor != COLOR_GREY)) {
                flag.setColor(flag.color, COLOR_GREY);
            }
        }
        this._combatActions(creep);
        if (this._chase(creep)) {
            return true;
        }
        var myPos = this._getMyInitialPosition(creep);
        if (creep.pos.roomName != myPos.roomName) {
            var destination = Game.flags[Spawn_1.getAssignmentByName(creep.name)];
            if ((destination == null)) {
                return true;
            }
            return this._moveInRaidToFlag(creep, CostMatrixType_1.CostMatrixType.Military, 0) ||
                this._travelToFlag(creep, destination, 0, CostMatrixType_1.CostMatrixType.Military) ||
                this._moveToFlag(creep, 0, CostMatrixType_1.CostMatrixType.Military) || true;
        }
        var myGuardPosition = this._getMyGuardPosition(creep);
        if (myGuardPosition == null) {
            creep.say('?');
            return true;
        }
        if (!creep.pos.isEqualTo(myGuardPosition)) {
            BehaviorBase_1.default.GoToPosition(creep, myGuardPosition, { costMatrixType: CostMatrixType_1.CostMatrixType.Military });
            return true;
        }
        this._setTravelTime(creep);
        return true;
    };
    PortalBlocker.prototype._chase = function (creep) {
        var myPos = this._getMyGuardPosition(creep);
        var target = Game.getObjectById(creep.memory['targetId']);
        if (target == null) {
            target = _.first(TickCache_1.__findInRange(creep.pos, FIND_HOSTILE_CREEPS, 3, { filter: function (c) { return !_.contains(Config_1.alliedPlayers, c.owner.username); } }));
        }
        if (target == null) {
            return false;
        }
        var roomData = RoomProvider_1.default.GetRoomData(creep.room.name);
        if (_.some(roomData.PortalsPositions, function (p) { return p.isEqualTo(target.pos); })) {
            var lastExit = target.pos.pack();
            if (_.isUndefined(creep.room.memory['lastExit']) || (creep.room.memory['lastExit'] != lastExit)) {
                creep.room.memory['lastExit'] = lastExit;
                this._reassign(creep.room);
            }
            creep.room.memory['lastExitTick'] = Game.time;
            var flag = this._getMyFlag(creep);
            if ((flag != null) && (flag.secondaryColor == COLOR_GREY)) {
                flag.setColor(flag.color, flag.color);
            }
        }
        var blockers = TickCache_1.__find(creep.room, FIND_MY_CREEPS, { filter: function (c) { return Spawn_1.getRoleByName(c.name) == Spawn_1.getRoleByName(creep.name); } });
        for (var _i = 0, blockers_1 = blockers; _i < blockers_1.length; _i++) {
            var b = blockers_1[_i];
            b.memory['targetId'] = target.id;
        }
        if ((myPos != null) && (target.pos.getRangeTo(myPos) > 25)) {
            for (var _a = 0, blockers_2 = blockers; _a < blockers_2.length; _a++) {
                var b = blockers_2[_a];
                delete b.memory['targetId'];
            }
            return false;
        }
        var meleeTarget = target.getActiveBodyparts(ATTACK) > 0;
        this._keepDistance(creep, target, meleeTarget ? 3 : 2, meleeTarget ? 3 : 2);
        return true;
    };
    PortalBlocker.prototype._getMyGuardPosition = function (creep) {
        if (!_.isUndefined(creep.memory['pos'])) {
            if (creep.memory['pos'] == null) {
                delete creep.memory['pos'];
                return null;
            }
            return RoomPosition.unpack(creep.memory['pos']);
        }
        var myPos = this._getMyInitialPosition(creep);
        var room = Game.rooms[myPos.roomName];
        var positions = this._getGuardPositions(myPos.roomName).map(function (p) { return p.pack(); });
        var blockers = _.isUndefined(room) ? [] : TickCache_1.__find(room, FIND_MY_CREEPS, { filter: function (c) { return Spawn_1.getRoleByName(c.name) == Spawn_1.getRoleByName(creep.name); } });
        var occupied = _.filter(blockers, function (b) { return !_.isUndefined(b.memory['pos']); }).map(function (b) { return b.memory['pos']; });
        var vacant = _.difference(positions, occupied);
        var pos = _.first(vacant);
        if (pos == null) {
            return null;
        }
        if (creep.room.name == myPos.roomName) {
            creep.memory['pos'] = pos;
        }
        return RoomPosition.unpack(pos);
    };
    PortalBlocker.prototype._getGuardPositions = function (roomName) {
        var center = this._getPortalCenter(roomName);
        if (center == null) {
            center = new RoomPosition(25, 25, roomName);
        }
        var result = [];
        for (var _i = 0, blockingScheme_1 = blockingScheme; _i < blockingScheme_1.length; _i++) {
            var p = blockingScheme_1[_i];
            var pos = new RoomPosition(center.x + p.x, center.y + p.y, center.roomName);
            result.push(pos);
        }
        var exitFilled = !_.isUndefined(Memory.rooms[roomName]['lastExit']);
        var shouldBeFiled = _.isUndefined(Memory.rooms[roomName]['lastExitTick']) ?
            false :
            (Memory.rooms[roomName]['lastExitTick'] + 500) > Game.time;
        if (exitFilled && !shouldBeFiled) {
            var room = Game.rooms[roomName];
            this._reassign(room);
            delete room.memory['lastExit'];
        }
        if (exitFilled &&
            !_.isUndefined(Memory.rooms[roomName]['lastExitTick']) &&
            ((Memory.rooms[roomName]['lastExitTick'] + 500) > Game.time)) {
            var lastExit_1 = RoomPosition.unpack(Memory.rooms[roomName]['lastExit']);
            result = result.sort(function (a, b) { return a.getRangeTo(lastExit_1) - b.getRangeTo(lastExit_1); });
        }
        return result;
    };
    PortalBlocker.prototype._reassign = function (room) {
        var _this = this;
        if (room != null) {
            var blockers = _.isUndefined(room) ? [] : TickCache_1.__find(room, FIND_MY_CREEPS, { filter: function (c) { return Spawn_1.getRoleByName(c.name) == _this.name; } });
            for (var _i = 0, blockers_3 = blockers; _i < blockers_3.length; _i++) {
                var b = blockers_3[_i];
                delete b.memory['pos'];
            }
        }
    };
    PortalBlocker.prototype._getPortalCenter = function (roomName) {
        if (!_.isUndefined(Memory.rooms[roomName]['portalsCenter'])) {
            return RoomPosition.unpack(Memory.rooms[roomName]['portalsCenter']);
        }
        var roomData = RoomProvider_1.default.GetRoomData(roomName);
        if (roomData == null) {
            return null;
        }
        var xs = roomData.PortalsPositions.map(function (p) { return p.x; });
        var ys = roomData.PortalsPositions.map(function (p) { return p.y; });
        var x = Math.round(_.sum(xs) / _.size(xs));
        var y = Math.round(_.sum(ys) / _.size(ys));
        var center = new RoomPosition(x, y, roomName);
        console.log("Portals center found: " + center);
        Memory.rooms[roomName]['portalsCenter'] = center.pack();
        return center;
    };
    return PortalBlocker;
}(Suppressor_1.default));
exports.default = PortalBlocker;


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var BehaviorBase_1 = __webpack_require__(2);
var Spawn_1 = __webpack_require__(3);
var TickCache_1 = __webpack_require__(1);
var CostMatrixType_1 = __webpack_require__(0);
var CreepAnalyzer_1 = __webpack_require__(46);
var LeecherBase_1 = __webpack_require__(208);
var MineralLeecher = (function (_super) {
    __extends(MineralLeecher, _super);
    function MineralLeecher() {
        var _this = _super.call(this) || this;
        _this.name = 'mineralLeecher';
        _this[1] = function (c) { return _this._boost(c, RESOURCE_ZYNTHIUM_ALKALIDE); };
        _this[2] = function (c) { return _this._boost(c, RESOURCE_KEANIUM_HYDRIDE); };
        _this[3] = _this._boostHarvest;
        _this[4] = _this._moveToInitialPosition;
        _this[5] = _this._work;
        _this[255] = _this._recycle;
        return _this;
    }
    MineralLeecher.prototype._getMyInitialPosition = function (creep) {
        var assign = Spawn_1.getAssignmentByName(creep.name);
        if (!_.isUndefined(Game.flags[assign])) {
            return Game.flags[assign].pos;
        }
        return RoomPosition.unpack(parseInt(assign));
    };
    MineralLeecher.prototype._boostHarvest = function (creep) {
        return this._boost(creep, RESOURCE_UTRIUM_OXIDE);
    };
    MineralLeecher.prototype._work = function (creep) {
        var initPos = this._getMyInitialPosition(creep);
        if (!creep.pos.isEqualTo(initPos)) {
            BehaviorBase_1.default.GoToPosition(creep, initPos, { costMatrixType: CostMatrixType_1.CostMatrixType.HalfSpeed });
        }
        return this._harvest(creep) ||
            this._pickup(creep) ||
            this._transfer(creep) ||
            this._idle(creep);
    };
    MineralLeecher.prototype._harvest = function (creep) {
        if (creep.ticksToLive < 2) {
            return false;
        }
        if (_.sum(creep.carry) + CreepAnalyzer_1.default.CalcBodyEffectiveness(creep.body).harvest > creep.carryCapacity) {
            return false;
        }
        var mineral = this._getMyMineral(creep);
        var extractor = this._process.GetCachedObject('extractorId', function () { return _.first(TickCache_1.__find(creep.room, FIND_STRUCTURES, {
            filter: { structureType: STRUCTURE_EXTRACTOR }
        })); });
        if (extractor == null) {
            creep.say('ext?');
            return false;
        }
        if (extractor.cooldown > 0) {
            return false;
        }
        if (mineral.mineralAmount == 0) {
            var flag = this._getMyFlag(creep);
            if (flag != null) {
                var allFlags = flag.pos.findInRange(FIND_FLAGS, 1);
                for (var _i = 0, allFlags_1 = allFlags; _i < allFlags_1.length; _i++) {
                    var f = allFlags_1[_i];
                    if (f.secondaryColor != COLOR_GREY) {
                        f.setColor(f.color, COLOR_GREY);
                    }
                }
            }
            return false;
        }
        creep.harvest(mineral);
        return true;
    };
    MineralLeecher.prototype._transfer = function (creep) {
        if (_.sum(creep.carry) == 0) {
            return false;
        }
        var mineral = this._getMyMineral(creep);
        if (_.isUndefined(creep.carry[mineral.mineralType]) || (creep.carry[mineral.mineralType] == 0)) {
            return false;
        }
        var container = this._getMyContainer(creep);
        if (container != null) {
            if (_.sum(container.store) == container.storeCapacity) {
                return false;
            }
            creep.transfer(container, mineral.mineralType);
            return true;
        }
        var transport = _.first(TickCache_1.__findInRange(creep.pos, FIND_MY_CREEPS, 1, {
            filter: function (c) { return _.includes(['transport', 'lightTransport', 'centralTransport', 'fastTransport'], Spawn_1.getRoleByName(c.name)); }
        }).sort(function (a, b) { return _.sum(b.carry) - _.sum(a.carry); }));
        if (transport == null) {
            return false;
        }
        if (_.sum(transport.carry) == transport.carryCapacity) {
            return false;
        }
        creep.transfer(transport, mineral.mineralType);
        return true;
    };
    MineralLeecher.prototype._pickup = function (creep) {
        if (_.sum(creep.carry) == creep.carryCapacity) {
            return false;
        }
        var dropped = _.first(TickCache_1.__findInRange(creep.pos, FIND_DROPPED_RESOURCES, 0));
        if (dropped == null) {
            return false;
        }
        creep.pickup(dropped);
        return true;
    };
    MineralLeecher.prototype._getMyMineral = function (creep) {
        return this._process.GetCachedObject('mineralId', function () { return _.first(TickCache_1.__find(creep.room, FIND_MINERALS)); });
    };
    MineralLeecher.prototype._getMyContainer = function (creep) {
        return this._getCachedObject(creep, 'myContainerId', function (creep) { return _.first(TickCache_1.__findInRange(creep.pos, FIND_STRUCTURES, 1, {
            filter: function (s) { return (s.structureType == STRUCTURE_CONTAINER) || (s.structureType == STRUCTURE_TERMINAL); }
        })); });
    };
    return MineralLeecher;
}(LeecherBase_1.LeecherBase));
exports.MineralLeecher = MineralLeecher;


/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Role_Base_1 = __webpack_require__(4);
var BehaviorBase_1 = __webpack_require__(2);
var CostMatrixType_1 = __webpack_require__(0);
var Degrader = (function (_super) {
    __extends(Degrader, _super);
    function Degrader() {
        var _this = _super.call(this) || this;
        _this.name = 'degrader';
        _this[1] = _this._blockSpawning;
        _this[2] = _this._travelToDestinationRoom;
        _this[3] = _this._degrade;
        _this[4] = _this._travelHome;
        _this[5] = _this._recycle;
        return _this;
    }
    Degrader.prototype._getMyInitialPosition = function (creep) {
        var flag = this._getMyFlag(creep);
        if (flag == null) {
            creep.say('?');
            return null;
        }
        return flag.pos;
    };
    Degrader.prototype._blockSpawning = function (creep) {
        var flag = this._getMyFlag(creep);
        if (flag != null) {
            flag.memory['postpone'] = Game.time + CONTROLLER_ATTACK_BLOCKED_UPGRADE - CREEP_SPAWN_TIME * creep.body.length;
        }
        this._nextState(creep);
        return true;
    };
    Degrader.prototype._degrade = function (creep) {
        var freePositions = creep.room.controller.pos.around(1, { filter: function (p) { return p.isWalkable(); } });
        if (!_.some(freePositions)) {
            creep.say('🤔', true);
            return true;
        }
        var squad = _.filter(BehaviorBase_1.default.GetSquad(creep), function (f) { return f instanceof Creep; });
        var myPosition = squad.indexOf(creep);
        if (!creep.pos.isEqualTo(freePositions[myPosition])) {
            BehaviorBase_1.default.GoToPosition(creep, freePositions[myPosition], { costMatrixType: CostMatrixType_1.CostMatrixType.FullSpeed });
            return true;
        }
        var flag = this._getMyFlag(creep);
        var readyToDegrade = squad.length == 1 || _.every(squad, function (c) { return c.pos.isNearTo(creep.room.controller.pos); });
        if (!creep.room.controller.my &&
            !creep.room.controller.upgradeBlocked &&
            readyToDegrade &&
            ((creep.room.controller.owner != null) || (creep.room.controller.reservation != null))) {
            for (var _i = 0, squad_1 = squad; _i < squad_1.length; _i++) {
                var c = squad_1[_i];
                c.cancelOrder('heal');
                c.attackController(c.room.controller);
                if ((Game.shard.name != 'shard0') &&
                    c.room.controller.sign &&
                    c.room.controller.owner &&
                    (c.room.controller.sign.username == c.room.controller.owner.username) &&
                    c.room.controller.sign.text.match(/overmind/i)) {
                    creep.signController(c.room.controller, 'Non-coding players unwelcome outside shard0 - expect to be evicted');
                }
            }
            if (flag != null) {
                if (!_.isUndefined(flag.memory['next'])) {
                    creep.memory['assignedTo'] = flag.memory['next'];
                    delete creep.memory['checkPoints'];
                    this._prevState(creep);
                    return true;
                }
            }
            if (_.isUndefined(creep.room.controller.reservation)) {
                if (flag && flag.memory['claim']) {
                    creep.claimController(creep.room.controller);
                    return true;
                }
                if (creep.ticksToLive < 350) {
                    creep.suicide();
                    return true;
                }
                this._nextState(creep);
            }
        }
        else {
            if ((creep.room.controller.owner == null) && (flag != null)) {
                flag.setColor(flag.color, COLOR_GREY);
            }
            if (flag && flag.memory['claim']) {
                creep.claimController(creep.room.controller);
            }
            return this._idle(creep);
        }
        return true;
    };
    Degrader.prototype._travelToFlag = function (creep, flag, rng) {
        if (creep.fatigue > 0) {
            return true;
        }
        var currentCheckpoint = this._getCurrentCheckpoint(creep, flag);
        if (currentCheckpoint == null) {
            return false;
        }
        var range = creep.pos.getRangeTo(currentCheckpoint);
        if (range == 1) {
            creep.move(creep.pos.getDirectionTo(currentCheckpoint));
            if (currentCheckpoint.pos.isEqualTo(Role_Base_1.RoleBase._getMyAssignmentPosition(creep))) {
                this._setTravelTime(creep);
            }
            return true;
        }
        BehaviorBase_1.default.GoToPosition(creep, currentCheckpoint.pos, { costMatrixType: CostMatrixType_1.CostMatrixType.FullSpeed, range: rng });
        return true;
    };
    return Degrader;
}(Role_Base_1.RoleBase));
exports.Degrader = Degrader;


/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var BehaviorBase_1 = __webpack_require__(2);
var CostMatrixType_1 = __webpack_require__(0);
var Hauler_1 = __webpack_require__(68);
var RemoteHelper = (function (_super) {
    __extends(RemoteHelper, _super);
    function RemoteHelper() {
        var _this = _super.call(this) || this;
        _this.name = 'remoteHelper';
        _this[1] = _this._take;
        _this[2] = _this._moveToInitialPosition;
        _this[3] = _this._chargeStructures;
        _this[4] = _this._work;
        _this[255] = _this._recycle;
        return _this;
    }
    RemoteHelper.prototype._getMyInitialPosition = function (creep) {
        return this._getMyFlag(creep).pos;
    };
    RemoteHelper.prototype._take = function (creep) {
        if (!_.isUndefined(creep.memory['travelTime'])) {
            var walkTime = creep.memory['travelTime'] - (creep.body.length * CREEP_SPAWN_TIME);
            if (walkTime > creep.ticksToLive) {
                this._setState(creep, 255);
                return false;
            }
        }
        if (_.sum(creep.carry) == creep.carryCapacity) {
            this._nextState(creep);
            return true;
        }
        var homeRoom = this._getHomeRoom(creep);
        var terminal = _.isUndefined(homeRoom) || _.isUndefined(homeRoom.terminal) ? creep.room.terminal : homeRoom.terminal;
        if (!creep.pos.isNearTo(terminal)) {
            BehaviorBase_1.default.GoToPosition(creep, terminal.pos, { costMatrixType: CostMatrixType_1.CostMatrixType.FullSpeed, range: 1 });
            return true;
        }
        if (!_.isUndefined(creep.room.terminal.store[RESOURCE_ENERGY]) && (creep.room.terminal.store[RESOURCE_ENERGY] > 0)) {
            creep.withdraw(creep.room.terminal, RESOURCE_ENERGY);
            return true;
        }
        return this._idle(creep);
    };
    RemoteHelper.prototype._chargeStructures = function (creep) {
        if (creep.carry[RESOURCE_ENERGY] == 0) {
            this._nextState(creep);
            return false;
        }
        var chargeTarget;
        if (_.isUndefined(creep.memory['extId'])) {
            var ext = this._findChargeStructure(creep);
            if (ext == null) {
                if (creep.carry[RESOURCE_ENERGY] < creep.carryCapacity) {
                    this._prevState(creep);
                    return true;
                }
                else {
                    this._idle(creep);
                    return true;
                }
            }
            creep.memory['extId'] = ext.id;
            chargeTarget = ext;
        }
        else {
            chargeTarget = Game.getObjectById(creep.memory['extId']);
        }
        if (chargeTarget == null) {
            delete creep.memory['extId'];
            return this._idle(creep);
        }
        if (!creep.pos.isNearTo(chargeTarget)) {
            BehaviorBase_1.default.GoToPosition(creep, chargeTarget.pos, { costMatrixType: CostMatrixType_1.CostMatrixType.FullSpeed, range: 1 });
            return true;
        }
        creep.transfer(chargeTarget, RESOURCE_ENERGY);
        delete creep.memory['extId'];
        return true;
    };
    RemoteHelper.prototype._moveToInitialPosition = function (creep) {
        var flag = this._getMyFlag(creep);
        if (creep.pos.isNearTo(flag)) {
            this._setTravelTime(creep);
            this._nextState(creep);
            return false;
        }
        return this._travelToFlag(creep, flag, 0, CostMatrixType_1.CostMatrixType.FullSpeed);
    };
    RemoteHelper.prototype._work = function (creep) {
        return this._task(creep) || this._queryTask(creep) || this._freeInventory(creep) || this._setState(creep, 1) || this._idle(creep);
    };
    RemoteHelper.prototype._findChargeStructure = function (creep) {
        var exts = [];
        var flag = this._getMyFlag(creep);
        if (flag != null) {
            var structure = _.first(flag.pos.findInRange(FIND_STRUCTURES, 1, { filter: function (s) { return _.includes([STRUCTURE_STORAGE, STRUCTURE_TERMINAL, STRUCTURE_CONTAINER], s.structureType) && s.store.getFreeCapacity(); } }));
            if (structure != null) {
                return structure;
            }
        }
        if (!_.some(exts)) {
            exts =
                creep.room.find(FIND_STRUCTURES, {
                    filter: function (s) {
                        return (s.structureType == STRUCTURE_TOWER) &&
                            ((s.energy == 0) ||
                                ((s.energyCapacity - s.energy) > creep.carry[RESOURCE_ENERGY]));
                    }
                });
        }
        if (!_.some(exts)) {
            exts = creep.room.find(FIND_STRUCTURES, {
                filter: function (s) {
                    return (s.structureType == STRUCTURE_EXTENSION) &&
                        (s.energy == 0);
                }
            });
        }
        if (!_.some(exts)) {
            exts = creep.room.find(FIND_STRUCTURES, {
                filter: function (s) {
                    return (s.structureType == STRUCTURE_SPAWN) &&
                        (s.energy < s.energyCapacity);
                }
            });
        }
        if (!_.some(exts)) {
            exts = creep.room.find(FIND_MY_CREEPS, {
                filter: function (c) {
                    return (c.getActiveBodyparts(WORK) > 0) &&
                        (c.getActiveBodyparts(CARRY) > 0) &&
                        ((c.carryCapacity - c.carry[RESOURCE_ENERGY]) > c.getActiveBodyparts(WORK) * BUILD_POWER);
                }
            });
        }
        if (!_.some(exts)) {
            exts = creep.room.find(FIND_HOSTILE_CREEPS, {
                filter: function (c) {
                    return (c.owner.username == creep.room.controller.owner.username) &&
                        c.getActiveBodyparts(WORK) &&
                        c.getActiveBodyparts(CARRY) &&
                        (c.store.getFreeCapacity() >= (c.store.getCapacity() / 2));
                }
            });
        }
        if (!_.some(exts) && creep.room.storage) {
            exts = [creep.room.storage];
        }
        if (!_.some(exts)) {
            exts = creep.room.find(FIND_HOSTILE_CREEPS, {
                filter: function (c) {
                    return (c.owner.username == creep.room.controller.owner.username) &&
                        c.getActiveBodyparts(WORK) &&
                        c.getActiveBodyparts(CARRY) &&
                        c.store.getFreeCapacity();
                }
            });
        }
        var closest = creep.pos.findClosestByPath(exts);
        if (closest == null) {
            return creep.room.storage;
        }
        return closest;
    };
    return RemoteHelper;
}(Hauler_1.default));
exports.default = RemoteHelper;


/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var BehaviorBase_1 = __webpack_require__(2);
var RoadStatus_1 = __webpack_require__(28);
var CostMatrixType_1 = __webpack_require__(0);
var RoomProvider_1 = __webpack_require__(12);
var Role_Base_1 = __webpack_require__(4);
var InfrastructureWorker = (function (_super) {
    __extends(InfrastructureWorker, _super);
    function InfrastructureWorker() {
        var _this = _super.call(this) || this;
        _this.name = "infrastructureWorker";
        _this._myInitialPositionRange = 1;
        _this[1] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_ZYNTHIUM_ALKALIDE); };
        _this[2] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_LEMERGIUM_ACID); };
        _this[3] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_KEANIUM_ACID); };
        _this[4] = _this._charge;
        _this[5] = _this._work;
        _this[6] = function (c) { return _this._travelHome(c, CostMatrixType_1.CostMatrixType.HalfSpeed); };
        _this[7] = _this._recycle;
        return _this;
    }
    InfrastructureWorker.prototype._getMyInitialPosition = function (creep) {
        return Role_Base_1.RoleBase._getMyAssignmentPosition(creep);
    };
    InfrastructureWorker.prototype._repairBoostMultiplier = function () {
        return 2;
    };
    InfrastructureWorker.prototype._charge = function (creep) {
        if (creep.carry[RESOURCE_ENERGY] > 0) {
            this._nextState(creep);
            return false;
        }
        var homeRoom = this._getHomeRoom(creep);
        var storage = homeRoom.terminal || homeRoom.storage;
        if (creep.pos.isNearTo(storage)) {
            creep.withdraw(storage, RESOURCE_ENERGY);
            return true;
        }
        BehaviorBase_1.default.GoToPosition(creep, storage, { costMatrixType: CostMatrixType_1.CostMatrixType.HalfSpeed, range: 1 });
        return true;
    };
    InfrastructureWorker.prototype._work = function (creep) {
        if (creep.fatigue > 0) {
            return this._idle(creep);
        }
        if (creep.carry[RESOURCE_ENERGY] == 0) {
            RoomProvider_1.default.UpdateRoom(creep.room);
            this._prevState(creep);
            return false;
        }
        var process = this._process;
        var isLastTile = (process.unprocessedTiles != null) && (process.unprocessedTiles.length == 2);
        var obj = process.getNextObject();
        if (obj == null) {
            return this._idle(creep);
        }
        if (!creep.pos.isNearTo(obj.pos)) {
            var routes = _.map(process.RemoteRoomProcess.routes, function (r) { return r.substr(2); });
            var positions = RoomPosition.unpackPath(routes.join(''));
            var costs_1 = {};
            _.forEach(positions, function (p) { costs_1[p.pack()] = 1; });
            BehaviorBase_1.default.GoToPosition(creep, obj, { costMatrixType: CostMatrixType_1.CostMatrixType.HalfSpeed, range: 1, addCosts: costs_1 });
            return true;
        }
        var obstacles = _.filter(obj.pos.lookFor(LOOK_STRUCTURES), function (s) { return _.includes(OBSTACLE_OBJECT_TYPES, s.structureType); });
        if (_.some(obstacles)) {
            creep.dismantle(obstacles[0]);
            return true;
        }
        if (obj instanceof StructureRoad) {
            if (obj.hits < obj.hitsMax) {
                var willFix = REPAIR_POWER * creep.getActiveBodyparts(WORK) >= (obj.hitsMax - obj.hits);
                creep.repair(obj);
                if (!willFix) {
                    return true;
                }
            }
            process.nextTile();
            if (isLastTile) {
                creep.say('👍', true);
                process.RemoteRoomProcess.SetRoadStatus(RoadStatus_1.RoadStatus.Healthy);
                this._nextState(creep);
                return false;
            }
            else {
                BehaviorBase_1.default.GoToPosition(creep, obj, { costMatrixType: CostMatrixType_1.CostMatrixType.HalfSpeed });
                return true;
            }
        }
        if (obj instanceof ConstructionSite) {
            creep.build(obj);
            var buildPower = Math.min(creep.carry.energy, creep.getActiveBodyparts(WORK) * 5) * this._repairBoostMultiplier();
            if ((obj.structureType == STRUCTURE_ROAD) &&
                ((obj.progressTotal - obj.progress) <= buildPower)) {
                process.nextTile();
                if (isLastTile) {
                    creep.say('👍', true);
                    process.RemoteRoomProcess.SetRoadStatus(RoadStatus_1.RoadStatus.Healthy);
                    RoomProvider_1.default.UpdateRoom(creep.room);
                    this._nextState(creep);
                    return true;
                }
                else {
                    BehaviorBase_1.default.GoToPosition(creep, obj, { costMatrixType: CostMatrixType_1.CostMatrixType.HalfSpeed });
                    return true;
                }
            }
            return true;
        }
        console.log("iworker logic error: unknown handling for object at " + obj.pos + " (" + obj + ")");
        return this._idle(creep);
    };
    return InfrastructureWorker;
}(Role_Base_1.RoleBase));
exports.default = InfrastructureWorker;


/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var BoostedMelee_1 = __webpack_require__(192);
var Saboteur_1 = __webpack_require__(200);
var RoomCleaner_1 = __webpack_require__(217);
var RoomLocker_1 = __webpack_require__(218);
var Role_Transport_1 = __webpack_require__(70);
var Squad_PowerFarming_1 = __webpack_require__(246);
var Role_Scout_1 = __webpack_require__(225);
var Signer_1 = __webpack_require__(219);
var StationaryCharger_1 = __webpack_require__(186);
var CircularCharger_1 = __webpack_require__(182);
var Reserver_1 = __webpack_require__(188);
var Claimer_1 = __webpack_require__(187);
var Leecher_1 = __webpack_require__(207);
var ArmedCentralLeecher_1 = __webpack_require__(206);
var MineralLeecher_1 = __webpack_require__(62);
var RotationMineralLeecher_1 = __webpack_require__(209);
var StationaryUpgrader_1 = __webpack_require__(41);
var Reupgrader_1 = __webpack_require__(230);
var SquareCharger_1 = __webpack_require__(185);
var BackdoorBuilder_1 = __webpack_require__(232);
var Worker_1 = __webpack_require__(42);
var BoostedWorker_1 = __webpack_require__(234);
var Nomad_1 = __webpack_require__(31);
var DefenseRaiser_1 = __webpack_require__(235);
var Test_1 = __webpack_require__(228);
var AssaultMelee_1 = __webpack_require__(25);
var AssaultDismantler_1 = __webpack_require__(189);
var AssaultHealer_1 = __webpack_require__(40);
var AssaultRanger_1 = __webpack_require__(21);
var Dismantler_1 = __webpack_require__(60);
var BoostedDismantler_1 = __webpack_require__(191);
var UnboostedRanger_1 = __webpack_require__(205);
var RemoteDefender_1 = __webpack_require__(198);
var BoostedDefender_1 = __webpack_require__(190);
var RangedBoostedDefender_1 = __webpack_require__(197);
var Senitel_1 = __webpack_require__(201);
var Guardian_1 = __webpack_require__(195);
var Looter_1 = __webpack_require__(69);
var CaravanMelee_1 = __webpack_require__(212);
var CaravanRanger_1 = __webpack_require__(213);
var CaravanHealer_1 = __webpack_require__(211);
var CaravanCarrier_1 = __webpack_require__(210);
var SuicideHealer_1 = __webpack_require__(227);
var Settler_1 = __webpack_require__(236);
var Waster_1 = __webpack_require__(221);
var Suppressor_1 = __webpack_require__(30);
var Degrader_1 = __webpack_require__(63);
var BoostedDegrader_1 = __webpack_require__(214);
var BoostedSuppressor_1 = __webpack_require__(194);
var HeavySuppressor_1 = __webpack_require__(196);
var BoostedNomad_1 = __webpack_require__(233);
var MobileCharger_1 = __webpack_require__(184);
var StartWorker_1 = __webpack_require__(237);
var StationaryHarras_1 = __webpack_require__(220);
var UnboostedHealer_1 = __webpack_require__(203);
var CombinedCharger_1 = __webpack_require__(183);
var UnboostedMelee_1 = __webpack_require__(204);
var RemoteHelper_1 = __webpack_require__(64);
var GreaterRemoteHelper_1 = __webpack_require__(215);
var PortalBlocker_1 = __webpack_require__(61);
var BoostedPortalBlocker_1 = __webpack_require__(193);
var SuicideRanger_1 = __webpack_require__(202);
var SuicideTransport_1 = __webpack_require__(67);
var RemoteMelee_1 = __webpack_require__(199);
var Hauler_1 = __webpack_require__(68);
var GreaterSuicideTransport_1 = __webpack_require__(226);
var UpgradingCanister_1 = __webpack_require__(231);
var InfrastructureWorker_1 = __webpack_require__(65);
var Harvester_1 = __webpack_require__(223);
var Deliverer_1 = __webpack_require__(222);
var BoostedLooter_1 = __webpack_require__(229);
var WeakerInfrastructureWorker_1 = __webpack_require__(224);
var Locomotive_1 = __webpack_require__(216);
exports.roles = {};
exports.roles['test'] = new Test_1.TestRole();
exports.roles['scout'] = new Role_Scout_1.RoleScout();
exports.roles['signer'] = new Signer_1.default();
exports.roles['reserver'] = new Reserver_1.Reserver();
exports.roles['claimer'] = new Claimer_1.Claimer();
exports.roles['stationaryHarras'] = new StationaryHarras_1.default();
exports.roles['degrader'] = new Degrader_1.Degrader();
exports.roles['roomCleaner'] = new RoomCleaner_1.RoomCleaner();
exports.roles['roomLocker'] = new RoomLocker_1.RoomLocker();
exports.roles['boostedDegrader'] = new BoostedDegrader_1.default();
exports.roles['leecher'] = new Leecher_1.Leecher();
exports.roles['armedCentralLeecher'] = new ArmedCentralLeecher_1.ArmedCentralLeecher();
exports.roles['praiser'] = new StationaryUpgrader_1.StationaryUpgrader();
exports.roles['reupgrader'] = new Reupgrader_1.Reupgrader();
exports.roles['upgradingCanister'] = new UpgradingCanister_1.default();
exports.roles['mineralLeecher'] = new MineralLeecher_1.MineralLeecher();
exports.roles['rotationMineralLeecher'] = new RotationMineralLeecher_1.RotationMineralLeecher();
exports.roles['worker'] = new Worker_1.Worker();
exports.roles['boostedWorker'] = new BoostedWorker_1.BoostedWorker();
exports.roles['nomad'] = new Nomad_1.default();
exports.roles['startWorker'] = new StartWorker_1.default();
exports.roles['boostedNomad'] = new BoostedNomad_1.default();
exports.roles['defenseRaiser'] = new DefenseRaiser_1.default();
exports.roles['settler'] = new Settler_1.default();
exports.roles['infrastructureWorker'] = new InfrastructureWorker_1.default();
exports.roles['weakerInfrastructureWorker'] = new WeakerInfrastructureWorker_1.default();
exports.roles['backdoorBuilder'] = new BackdoorBuilder_1.BackdoorBuilder();
exports.roles['greaterBackdoorBuilder'] = new BackdoorBuilder_1.GreaterBackdoorBuilder();
exports.roles['harvester'] = new Harvester_1.default();
exports.roles['deliverer'] = new Deliverer_1.default();
exports.roles['stationaryCharger'] = new StationaryCharger_1.StationaryCharger();
exports.roles['circularCharger'] = new CircularCharger_1.CircularCharger();
exports.roles['squareCharger'] = new SquareCharger_1.SquareCharger();
exports.roles['combinedCharger'] = new CombinedCharger_1.default();
exports.roles['mobileCharger'] = new MobileCharger_1.MobileCharger();
exports.roles['hauler'] = new Hauler_1.default();
exports.roles['transport'] = new Role_Transport_1.RoleRegularTransport();
exports.roles['looter'] = new Looter_1.RoleLooter();
exports.roles['greaterLooter'] = new BoostedLooter_1.default();
exports.roles['suicideTransport'] = new SuicideTransport_1.default();
exports.roles['greaterSuicideTransport'] = new GreaterSuicideTransport_1.default();
exports.roles['experimentalTransport'] = new Role_Transport_1.RoleExperimentalTransport();
exports.roles['assaultMelee'] = new AssaultMelee_1.default();
exports.roles['assaultDismantler'] = new AssaultDismantler_1.default();
exports.roles['assaultHealer'] = new AssaultHealer_1.default();
exports.roles['assaultRanger'] = new AssaultRanger_1.default();
exports.roles['dismantler'] = new Dismantler_1.default();
exports.roles['boostedDismantler'] = new BoostedDismantler_1.default();
exports.roles['boostedMelee'] = new BoostedMelee_1.default();
exports.roles['unboostedMelee'] = new UnboostedMelee_1.default();
exports.roles['unboostedRanger'] = new UnboostedRanger_1.default();
exports.roles['unboostedHealer'] = new UnboostedHealer_1.default();
exports.roles['suppressor'] = new Suppressor_1.default();
exports.roles['portalBlocker'] = new PortalBlocker_1.default();
exports.roles['boostedPortalBlocker'] = new BoostedPortalBlocker_1.default();
exports.roles['boostedSuppressor'] = new BoostedSuppressor_1.default();
exports.roles['heavySuppressor'] = new HeavySuppressor_1.default();
exports.roles['remoteDefender'] = new RemoteDefender_1.default();
exports.roles['remoteMelee'] = new RemoteMelee_1.default();
exports.roles['boostedDefender'] = new BoostedDefender_1.default();
exports.roles['boostedRangedDefender'] = new RangedBoostedDefender_1.default();
exports.roles['senitel'] = new Senitel_1.default();
exports.roles['guardian'] = new Guardian_1.default();
exports.roles['saboteur'] = new Saboteur_1.default();
exports.roles['pfMelee'] = new Squad_PowerFarming_1.PowerFarmerMelee();
exports.roles['pfHealer'] = new Squad_PowerFarming_1.PowerFarmerHealer();
exports.roles['pCarrier'] = new Squad_PowerFarming_1.PowerCarrier();
exports.roles['caravanMelee'] = new CaravanMelee_1.default();
exports.roles['caravanRanger'] = new CaravanRanger_1.default();
exports.roles['caravanHealer'] = new CaravanHealer_1.default();
exports.roles['caravanCarrier'] = new CaravanCarrier_1.default();
exports.roles['suicideHealer'] = new SuicideHealer_1.default();
exports.roles['suicideRanger'] = new SuicideRanger_1.SuicideRanger();
exports.roles['remoteHelper'] = new RemoteHelper_1.default();
exports.roles['greaterRemoteHelper'] = new GreaterRemoteHelper_1.default();
exports.roles['waster'] = new Waster_1.default();
exports.roles['locomotive'] = new Locomotive_1.default();


/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var BehaviorBase_1 = __webpack_require__(2);
var BoostsManager_1 = __webpack_require__(20);
var Spawn_1 = __webpack_require__(3);
var CostMatrixType_1 = __webpack_require__(0);
var Role_Base_1 = __webpack_require__(4);
var SuicideTransport = (function (_super) {
    __extends(SuicideTransport, _super);
    function SuicideTransport() {
        var _this = _super.call(this) || this;
        _this.name = 'suicideTransport';
        _this._getStructure = function (creep, resource) {
            return creep.room.storage && (creep.room.storage.store[resource] >= creep.carryCapacity) ?
                creep.room.storage :
                creep.room.terminal;
        };
        _this._getResource = function (creep) {
            var flag = this._getMyFlag(creep);
            if (!flag || !flag.memory['resource']) {
                return RESOURCE_ENERGY;
            }
            if (flag.memory['resource'] == 'excess') {
                var want = BoostsManager_1.default.DesiredResources();
                var resources_1 = BoostsManager_1.default.GetCurrentResources();
                var excess_1 = _(want)
                    .mapValues(function (value, key) { return Math.max(0, resources_1[key] - value); })
                    .pick(function (value, key) { return (value > 0) && (key.length > 4); }).value();
                if (!_.some(excess_1)) {
                    return null;
                }
                return Object.keys(excess_1).reduce(function (a, b) { return excess_1[a] > excess_1[b] ? a : b; });
            }
            return flag.memory['resource'];
        };
        _this[1] = _this._charge;
        _this[2] = _this._travelToDestination;
        _this[3] = _this._unload;
        _this[4] = _this._recycle;
        _this[255] = _this._recycle;
        return _this;
    }
    SuicideTransport.prototype._charge = function (creep) {
        if (_.sum(creep.carry) == creep.carryCapacity) {
            this._nextState(creep);
            return false;
        }
        var resource = this._getResource(creep);
        var structure = this._getStructure(creep, resource);
        if (!resource || !structure || !structure.store[resource]) {
            var flag = this._getMyFlag(creep);
            if (flag) {
                console.log(creep.name + " stop hauling " + resource + " (" + structure + ")");
                flag.setColor(flag.color, COLOR_GREY);
            }
            if (!_.sum(creep.carry)) {
                this._setState(creep, 255);
            }
            else {
                this._nextState(creep);
                return false;
            }
            return true;
        }
        if (!creep.pos.isNearTo(structure)) {
            BehaviorBase_1.default.GoToPosition(creep, structure, { costMatrixType: CostMatrixType_1.CostMatrixType.Offroad, range: 1 });
            return true;
        }
        creep.withdraw(structure, resource);
        return true;
    };
    SuicideTransport.prototype._getMyInitialPosition = function (creep) {
        var assignString = Spawn_1.getAssignmentByName(creep.name);
        if (!_.isUndefined(Game.flags[assignString])) {
            return Game.flags[assignString].pos;
        }
        if (!_.isUndefined(Game.rooms[assignString])) {
            return Game.rooms[assignString].controller.pos;
        }
        return RoomPosition.unpack(parseInt(assignString));
    };
    SuicideTransport.prototype._travelToDestination = function (creep) {
        var flag = this._getMyFlag(creep);
        if (flag.memory['destination'] && Game.flags[flag.memory['destination']]) {
            flag = Game.flags[flag.memory['destination']];
        }
        if (creep.pos.isNearTo(flag)) {
            this._setTravelTime(creep);
            this._nextState(creep);
            return false;
        }
        return this._travelToFlag(creep, flag);
    };
    SuicideTransport.prototype._travelToFlag = function (creep, flag, rng) {
        if (creep.fatigue > 0) {
            return true;
        }
        var currentCheckpoint = this._getCurrentCheckpoint(creep, flag);
        if (currentCheckpoint == null) {
            return false;
        }
        var range = creep.pos.getRangeTo(currentCheckpoint);
        if (range == 1) {
            creep.move(creep.pos.getDirectionTo(currentCheckpoint));
            if (currentCheckpoint.pos.isEqualTo(Role_Base_1.RoleBase._getMyAssignmentPosition(creep))) {
                this._setTravelTime(creep);
            }
            return true;
        }
        BehaviorBase_1.default.GoToPosition(creep, currentCheckpoint.pos, { costMatrixType: CostMatrixType_1.CostMatrixType.FullSpeed, range: rng });
        return true;
    };
    SuicideTransport.prototype._unload = function (creep) {
        var storages = [];
        if (creep.room.storage && creep.room.storage.my) {
            storages.push(creep.room.storage);
        }
        if (creep.room.terminal && creep.room.terminal.my) {
            storages.push(creep.room.terminal);
        }
        if (!_.some(storages)) {
            this._nextState(creep);
            return false;
        }
        var storage = creep.pos.findClosestByPath(storages, { ignoreCreeps: true });
        if (_.sum(creep.carry) == 0) {
            this._nextState(creep);
            return false;
        }
        if (!creep.pos.isNearTo(storage)) {
            BehaviorBase_1.default.GoToPosition(creep, storage, { costMatrixType: CostMatrixType_1.CostMatrixType.FullSpeed, range: 1 });
            return true;
        }
        creep.transfer(storage, _.last(_.keys(creep.carry)));
        return true;
    };
    return SuicideTransport;
}(Role_Base_1.RoleBase));
exports.default = SuicideTransport;


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Role_Base_1 = __webpack_require__(4);
var Task_1 = __webpack_require__(6);
var TaskManager_1 = __webpack_require__(7);
var TasksRepository_1 = __webpack_require__(11);
var BehaviorBase_1 = __webpack_require__(2);
var CostMatrixType_1 = __webpack_require__(0);
var Hauler = (function (_super) {
    __extends(Hauler, _super);
    function Hauler() {
        var _this = _super.call(this) || this;
        _this.name = 'hauler';
        _this[1] = _this._work;
        _this[255] = _this._recycle;
        return _this;
    }
    Hauler.prototype._getMyInitialPosition = function (creep) {
        return creep.pos;
    };
    Hauler.prototype._work = function (creep) {
        return this._task(creep) || this._queryTask(creep) || this._freeInventory(creep) || this._idle(creep);
    };
    Hauler.prototype._queryTask = function (creep) {
        var task = TaskManager_1.default.QueryLoadBoostTask(creep) ||
            TaskManager_1.default.QueryLocalCarryTask(creep) ||
            TaskManager_1.default.QueryLootTask(creep);
        if (task != null) {
            creep.memory['taskId'] = task.id;
            task.AssignTo(creep);
            return true;
        }
        return false;
    };
    Hauler.prototype._task = function (creep) {
        if (_.isUndefined(creep.memory['taskId'])) {
            return false;
        }
        var task = TasksRepository_1.default.GetById(creep.memory['taskId']);
        if (task == null) {
            delete creep.memory['taskId'];
            return false;
        }
        var result = task.Execute(creep);
        if (result.Type == Task_1.TaskExecutionResultType.Postpone) {
            delete creep.memory['taskId'];
            task.Unassign(creep);
            return false;
        }
        if (result.Type == Task_1.TaskExecutionResultType.Continue) {
            return true;
        }
        if (result.Type == Task_1.TaskExecutionResultType.Completed) {
            delete creep.memory['taskId'];
            task.Unassign(creep);
            TasksRepository_1.default.CleanupCompletedTasks();
            return true;
        }
        console.log("Unexpected result for creep " + creep.name + ": " + JSON.stringify(result));
        creep.say('?');
        return true;
    };
    Hauler.prototype._freeInventory = function (creep) {
        if (_.sum(creep.carry) == 0) {
            return false;
        }
        if (_.isUndefined(creep.room.storage)) {
            creep.drop(_.last(_.keys(creep.carry)));
            return true;
        }
        if (!creep.pos.isNearTo(creep.room.storage)) {
            BehaviorBase_1.default.GoToPosition(creep, creep.room.storage, { costMatrixType: CostMatrixType_1.CostMatrixType.HalfSpeed, range: 1 });
            return true;
        }
        creep.transfer(creep.room.storage, _.last(_.keys(creep.carry)));
        return true;
    };
    return Hauler;
}(Role_Base_1.RoleBase));
exports.default = Hauler;


/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var TickCache_1 = __webpack_require__(1);
var Role_Base_1 = __webpack_require__(4);
var Spawn_1 = __webpack_require__(3);
var BehaviorBase_1 = __webpack_require__(2);
var CostMatrixType_1 = __webpack_require__(0);
var RoleLooter = (function (_super) {
    __extends(RoleLooter, _super);
    function RoleLooter() {
        var _this = _super.call(this) || this;
        _this.name = 'looter';
        _this[1] = _this._there;
        _this[2] = _this._loot;
        _this[3] = _this._here;
        _this[4] = _this._unload;
        _this[5] = _this._recycle;
        return _this;
    }
    RoleLooter.prototype._getMyInitialPosition = function (creep) {
        var assign = Spawn_1.getAssignmentByName(creep.name);
        if (!_.isUndefined(Game.flags[assign])) {
            return Game.flags[assign].pos;
        }
        return RoomPosition.unpack(parseInt(assign));
    };
    RoleLooter.prototype._there = function (creep) {
        var myFlag = this._getMyFlag(creep);
        if (creep.pos.isEqualTo(myFlag.pos)) {
            this._nextState(creep);
            return false;
        }
        return this._travelToFlag(creep, myFlag, 0, CostMatrixType_1.CostMatrixType.FullSpeed);
    };
    RoleLooter.prototype._loot = function (creep) {
        delete creep.memory['checkPoints'];
        if (_.sum(creep.carry) == creep.carryCapacity) {
            this._nextState(creep);
            return false;
        }
        var possibleTargets = creep.pos.findInRange(FIND_STRUCTURES, 1, { filter: function (s) { return _.includes([STRUCTURE_STORAGE, STRUCTURE_TERMINAL, STRUCTURE_CONTAINER, STRUCTURE_LAB], s.structureType); } });
        var currentTarget = _.first(_.filter(possibleTargets, function (t) { return (t.structureType == STRUCTURE_LAB) && (t.mineralAmount > 0); })) ||
            _.first(_.filter(possibleTargets, function (t) { return _.includes([STRUCTURE_STORAGE, STRUCTURE_TERMINAL, STRUCTURE_CONTAINER], t.structureType) && (_.some(_.keys(t.store), function (k) { return k != RESOURCE_ENERGY; })); })) ||
            _.first(_.filter(possibleTargets, function (t) { return (t.structureType == STRUCTURE_LAB) && (t.energy > 0); })) ||
            _.first(_.filter(possibleTargets, function (t) { return _.includes([STRUCTURE_STORAGE, STRUCTURE_TERMINAL, STRUCTURE_CONTAINER], t.structureType) && (t.store[RESOURCE_ENERGY] > 0); }));
        if (currentTarget == null) {
            currentTarget = _.last(TickCache_1.__findInRange(creep.pos, FIND_DROPPED_RESOURCES, 1));
        }
        if (currentTarget == null) {
            currentTarget = _.last(creep.pos.findInRange(FIND_RUINS, 1, { filter: function (s) { return _.sum(s.store); } }));
        }
        if (currentTarget == null) {
            currentTarget = _.last(TickCache_1.__findInRange(creep.pos, FIND_TOMBSTONES, 1, {
                filter: function (t) { return _.sum(t.store) > 0; }
            }));
        }
        if (currentTarget == null) {
            this._nextState(creep);
            var myFlag = this._getMyFlag(creep);
            if ((myFlag != null) && (myFlag.secondaryColor != COLOR_GREY)) {
                myFlag.setColor(myFlag.color, COLOR_GREY);
            }
            return false;
        }
        if (currentTarget instanceof Resource) {
            creep.pickup(currentTarget);
            return true;
        }
        if (currentTarget instanceof Tombstone || currentTarget instanceof Ruin) {
            creep.withdraw(currentTarget, _.last(_.keys(currentTarget.store)));
            return true;
        }
        if (currentTarget instanceof StructureLab) {
            creep.withdraw(currentTarget, (currentTarget.mineralAmount > 0) ? currentTarget.mineralType : RESOURCE_ENERGY);
        }
        else {
            var stor_1 = currentTarget;
            var toLoot = _.last(_.filter(_.keys(stor_1.store), function (k) { return k != RESOURCE_ENERGY; })
                .sort(function (a, b) { return (a.length - b.length) || (stor_1.store[a] - stor_1.store[b]); }));
            creep.withdraw(stor_1, toLoot || RESOURCE_ENERGY);
        }
        return true;
    };
    RoleLooter.prototype._here = function (creep) {
        var destinationFlag = this._getDestinationFlag(creep);
        if (destinationFlag != null) {
            if (creep.pos.isEqualTo(destinationFlag)) {
                this._nextState(creep);
                return false;
            }
            return this._travelToFlag(creep, destinationFlag, 0, CostMatrixType_1.CostMatrixType.FullSpeed);
        }
        var home = this._getHomeRoom(creep);
        var terminal = home.terminal;
        if (creep.pos.isNearTo(terminal)) {
            this._nextState(creep);
            return false;
        }
        BehaviorBase_1.default.GoToPosition(creep, terminal.pos, { costMatrixType: CostMatrixType_1.CostMatrixType.FullSpeed, range: 1 });
        return true;
    };
    RoleLooter.prototype._getDestinationFlag = function (creep) {
        var myFlag = this._getMyFlag(creep);
        if (myFlag == null) {
            return null;
        }
        return Game.flags[myFlag.memory['destination']];
    };
    RoleLooter.prototype._unload = function (creep) {
        var structure = creep.pos.isNearTo(creep.room.storage) ? creep.room.storage : creep.room.terminal;
        if (_.sum(creep.carry) == 0) {
            if (_.isUndefined(creep.memory['returnIn'])) {
                creep.memory['returnIn'] = CREEP_LIFE_TIME - creep.ticksToLive;
            }
            if (creep.ticksToLive < (10 + creep.memory['returnIn'])) {
                this._setState(creep, 5);
            }
            else {
                delete creep.memory['checkPoints'];
                this._setState(creep, 1);
            }
            return false;
        }
        creep.transfer(structure, _.last(_.keys(creep.carry)));
        return true;
    };
    RoleLooter.prototype._travelToFlag = function (creep, flag, rng, type) {
        if (creep.fatigue > 0) {
            return true;
        }
        var currentCheckpoint = this._getCurrentCheckpoint(creep, flag);
        if (currentCheckpoint == null) {
            return false;
        }
        var range = creep.pos.getRangeTo(currentCheckpoint);
        if (range == 1) {
            creep.move(creep.pos.getDirectionTo(currentCheckpoint));
            if (currentCheckpoint.pos.isEqualTo(Role_Base_1.RoleBase._getMyAssignmentPosition(creep))) {
                this._setTravelTime(creep);
            }
            return true;
        }
        BehaviorBase_1.default.GoToPosition(creep, currentCheckpoint.pos, { costMatrixType: type, range: rng });
        return true;
    };
    return RoleLooter;
}(Role_Base_1.RoleBase));
exports.RoleLooter = RoleLooter;


/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var BehaviorBase_1 = __webpack_require__(2);
var Filters_1 = __webpack_require__(120);
var PathUtils_1 = __webpack_require__(19);
var Spawn_1 = __webpack_require__(3);
var TickCache_1 = __webpack_require__(1);
var CostMatrixType_1 = __webpack_require__(0);
var Role_Base_1 = __webpack_require__(4);
function getEnergyLevel(consumer) {
    if (consumer instanceof StructureLink) {
        return consumer.energy / consumer.energyCapacity;
    }
    return consumer.store[RESOURCE_ENERGY] / consumer.storeCapacity;
}
function customMoveByPath2(creep, path, onStuck) {
    var _this = creep;
    creep.memory['_lastMoveTick'] = Game.time;
    if (!_.isUndefined(_this.memory._move)) {
        if (_this.memory._move.last == creep.pos.pack()) {
            _this.memory._move.stuck = 1 + (_this.memory._move.stuck || 0);
            if (!_.isUndefined(onStuck)) {
                onStuck(_this.memory._move.stuck);
            }
        }
        else {
            delete _this.memory._move.stuck;
        }
    }
    var readyPath = Room.deserializePath(path);
    var cur = _.find(readyPath, function (i) {
        return i.x - i.dx == _this.pos.x && i.y - i.dy == _this.pos.y;
    });
    if (!cur) {
        return ERR_NOT_FOUND;
    }
    if (_.isUndefined(_this.memory._move)) {
        _this.memory._move = {};
    }
    _this.memory._move.last = creep.pos.pack();
    return _this.move(cur.direction);
}
exports.customMoveByPath2 = customMoveByPath2;
function customMoveByPath3(creep, path) {
    var _this = creep;
    var currentIndex;
    if (_.isUndefined(creep.memory["currentPoint_" + path])) {
        var readyPath = Room.deserializePath(path);
        var cur = _.find(readyPath, function (i) {
            return i.x - i.dx == _this.pos.x && i.y - i.dy == _this.pos.y;
        });
        if (!cur) {
            return ERR_NOT_FOUND;
        }
        currentIndex = _.indexOf(readyPath, cur);
    }
    else {
        currentIndex = creep.memory["currentPoint_" + path];
    }
    if (!creep.memory.lastPosition) {
        creep.memory.lastPosition = creep.pos;
    }
    var prevPosition = new RoomPosition(creep.memory.lastPosition.x, creep.memory.lastPosition.y, creep.memory.lastPosition.roomName);
    if (prevPosition.isEqualTo(creep.pos)) {
        creep.say('lost');
        delete creep.memory["currentPoint_" + path];
        return ERR_NOT_FOUND;
    }
    currentIndex++;
    creep.memory["currentPoint_" + path] = currentIndex;
    creep.memory.lastPosition = creep.pos;
    return _this.move(parseInt(path[4 + currentIndex]));
}
var RoleBaseTransport = (function (_super) {
    __extends(RoleBaseTransport, _super);
    function RoleBaseTransport() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RoleBaseTransport.prototype._travelToSource = function (creep) {
        if ((_.sum(creep.carry) + 100 > creep.carryCapacity) && !creep.pos.isNearTo(this._getMyInitialPosition(creep))) {
            this._nextState(creep);
            return false;
        }
        if (creep.hits < creep.hitsMax) {
            this._nextState(creep);
            return false;
        }
        if (_.sum(creep.carry) == creep.carryCapacity) {
            this._nextState(creep);
            return false;
        }
        return this._moveToSource(creep);
    };
    RoleBaseTransport.prototype._load = function (creep) {
        if (this._puckupEnergyNearby(creep, 1)) {
            return true;
        }
        var containers = this._getCachedObjects(creep, 'sourceContainersIds', this._findSourceContainers, true);
        if (containers != null) {
            if (containers.length > 1) {
                containers = containers.sort(function (a, b) { return _.sum(b.store) / b.storeCapacity - _.sum(a.store) / a.storeCapacity; });
            }
            var flag = this._getMyFlag(creep);
            for (var i in containers) {
                if ((flag != null) && !_.isUndefined(flag.memory['resource']) && !_.isUndefined(containers[i].store[flag.memory['resource']])) {
                    creep.withdraw(containers[i], flag.memory['resource']);
                    continue;
                }
                for (var r in containers[i].store) {
                    if (containers[i].store[r] > 0) {
                        creep.withdraw(containers[i], r);
                        return true;
                    }
                }
            }
        }
        return false;
    };
    RoleBaseTransport.prototype._unload = function (creep) {
        var destinationContainers = this._getCachedObjects(creep, 'destinationContainersIds', this._findDestinationContainers, true);
        if (destinationContainers.length > 1) {
            destinationContainers = destinationContainers.sort(function (a, b) { return getEnergyLevel(b) - getEnergyLevel(a); });
        }
        for (var c in destinationContainers) {
            if (creep.pos.isNearTo(destinationContainers[c])) {
                if (destinationContainers[c] instanceof StructureLink) {
                    var link = destinationContainers[c];
                    if ((creep.carry[RESOURCE_ENERGY] > 0) && (link.energy < link.energyCapacity)) {
                        creep.transfer(link, RESOURCE_ENERGY);
                        return true;
                    }
                }
                var container = destinationContainers[c];
                if (_.sum(container.store) < container.storeCapacity) {
                    for (var r in creep.carry) {
                        if (creep.carry[r] > 0) {
                            creep.transfer(container, r);
                            return true;
                        }
                    }
                }
            }
        }
        if (creep.ticksToLive < 500) {
            creep.memory['role'] = 'pfMelee';
            creep.memory['state'] = 8;
        }
        return false;
    };
    RoleBaseTransport.prototype._moveToSource = function (creep) {
        var goal = this._getMyInitialPosition(creep);
        var rangeToGoal = creep.pos.getRangeTo(goal);
        switch (rangeToGoal) {
            case 0:
                this._setTravelTime(creep);
                return this._load(creep);
            case 1:
                creep.say('almost');
                var direction = creep.pos.getDirectionTo(goal);
                creep.move(direction);
                var prev = _.first(goal.lookFor(LOOK_CREEPS).filter(function (c) { return c.my; }));
                if (prev != null) {
                    var lastMove = prev.memory['_lastMoveTick'];
                    if (_.isUndefined(lastMove) || ((lastMove > 0) && ((lastMove + 1) < Game.time))) {
                        if (Spawn_1.getRoleByName(prev.name) == Spawn_1.getRoleByName(creep.name)) {
                            if (_.sum(prev.carry) >= (prev.carryCapacity / 2)) {
                                prev.move(prev.pos.getDirectionTo(creep));
                                this._setState(prev, 2);
                            }
                        }
                        else {
                            prev.move(prev.pos.getDirectionTo(creep));
                        }
                        prev.memory.processed = true;
                    }
                }
                return true;
            default:
                return BehaviorBase_1.default.GoToPosition(creep, this._getMyInitialPosition(creep), { costMatrixType: CostMatrixType_1.CostMatrixType.HalfSpeed });
        }
    };
    RoleBaseTransport.prototype._moveToDestination = function (creep) {
        if ((_.sum(creep.carry) == 0) && (creep.carryCapacity > 0) && (creep.hits == creep.hitsMax)) {
            this._prevState(creep);
            return false;
        }
        var goal = this._getDestination(creep);
        if (1 === creep.pos.getRangeTo(goal)) {
            return this._unload(creep);
        }
        return BehaviorBase_1.default.GoToPosition(creep, goal, { costMatrixType: CostMatrixType_1.CostMatrixType.HalfSpeed, range: 1 });
    };
    RoleBaseTransport.prototype._destuck = function (creep, ticks, path) {
        if (ticks >= 1) {
            var creepAhead = this._creepAhead(creep, path);
            if (creepAhead != null) {
                var standingMasks = [
                    'builder_1',
                    'builder_2',
                    'builder_3',
                    'tempBuilder_3',
                    'worker_4',
                    'boostedWorker_6',
                    'squareCharger_5',
                    'combinedCharger_2',
                    'labWorker_31',
                    'senitel_5',
                    'praiser_3',
                ];
                var otherMask = Spawn_1.getRoleByName(creepAhead.name) + "_" + creepAhead.memory['state'];
                var lastMove = creepAhead.memory['_lastMoveTick'] || 0;
                if (_.includes(standingMasks, otherMask) && ((lastMove + 1) < Game.time)) {
                    creepAhead.say('👌', true);
                    creepAhead.move(creepAhead.pos.getDirectionTo(creep));
                    delete creepAhead.memory['_trav'];
                    creepAhead.memory['processed'] = true;
                }
            }
        }
    };
    RoleBaseTransport.prototype._creepAhead = function (creep, path) {
        var route = Room.deserializePath(path).map(function (ps) { return new RoomPosition(ps.x, ps.y, creep.room.name).pack(); });
        var next = route.indexOf(creep.pos.pack()) + 1;
        if (next >= route.length) {
            return null;
        }
        if (_.isUndefined(route[next]) || (route[next] == 0)) {
            return null;
        }
        var nextPos = RoomPosition.unpack(route[next]);
        creep.room.visual.circle(nextPos.x, nextPos.y, { fill: 'red' });
        return _.first(TickCache_1.__findInRange(nextPos, FIND_MY_CREEPS, 0));
    };
    RoleBaseTransport.prototype._findSourceContainers = function (creep) {
        var types = [
            STRUCTURE_CONTAINER,
            STRUCTURE_STORAGE,
            STRUCTURE_TERMINAL,
        ];
        return TickCache_1.__findInRange(creep.pos, FIND_STRUCTURES, 1, {
            filter: function (s) { return _.includes(types, s.structureType); }
        });
    };
    RoleBaseTransport.prototype._findDestinationContainers = function (creep) {
        var types = [
            STRUCTURE_CONTAINER,
            STRUCTURE_STORAGE,
            STRUCTURE_TERMINAL,
            STRUCTURE_LINK,
        ];
        return TickCache_1.__findInRange(creep.pos, FIND_STRUCTURES, 1, {
            filter: function (s) { return _.includes(types, s.structureType); }
        });
    };
    RoleBaseTransport.prototype._repairRoadHere = function (creep) {
        if (Game.cpu.bucket < 7500) {
            return false;
        }
        if (creep.carry[RESOURCE_ENERGY] == 0) {
            return false;
        }
        var workParts = creep.getActiveBodyparts(WORK);
        if (workParts == 0) {
            return false;
        }
        var road = _.first(TickCache_1.__findInRange(creep.pos, FIND_STRUCTURES, 0, Filters_1.roadFilter));
        if ((road == null) || (road.hits == road.hitsMax)) {
            return false;
        }
        creep.repair(road);
        return false;
    };
    RoleBaseTransport.prototype._buildRoadHere = function (creep) {
        if (Game.cpu.bucket < 6000) {
            return false;
        }
        if (creep.carry[RESOURCE_ENERGY] == 0) {
            return false;
        }
        var workParts = creep.getActiveBodyparts(WORK);
        if (workParts == 0) {
            return false;
        }
        var constructionSite = _.first(TickCache_1.__findInRange(creep.pos, FIND_CONSTRUCTION_SITES, 0, Filters_1.roadFilter));
        if (constructionSite == null) {
            if (creep.fatigue > 0) {
                creep.room.createConstructionSite(creep.pos.x, creep.pos.y, STRUCTURE_ROAD);
            }
            return false;
        }
        creep.build(constructionSite);
        return false;
    };
    RoleBaseTransport.prototype._getDestination = function (creep) {
        var assign = Spawn_1.getAssignmentByName(creep.name);
        if (!_.isUndefined(Game.flags[assign]) && !_.isUndefined(Game.flags[assign].memory.destination)) {
            return Game.flags[Game.flags[assign].memory.destination].pos;
        }
        var homeRoom = this._getHomeRoom(creep);
        if (homeRoom == null) {
            console.log("Home room for " + creep.name + " not found...");
            return null;
        }
        return homeRoom.storage.pos;
    };
    return RoleBaseTransport;
}(Role_Base_1.RoleBase));
var RoleRegularTransport = (function (_super) {
    __extends(RoleRegularTransport, _super);
    function RoleRegularTransport() {
        var _this = _super.call(this) || this;
        _this.name = 'transport';
        _this[1] = _this._there;
        _this[2] = _this._here;
        return _this;
    }
    RoleRegularTransport.prototype._getMyInitialPosition = function (creep) {
        var assign = Spawn_1.getAssignmentByName(creep.name);
        if (!_.isUndefined(Game.flags[assign])) {
            return Game.flags[assign].pos;
        }
        return RoomPosition.unpack(parseInt(assign));
    };
    RoleRegularTransport.prototype._there = function (creep) {
        return this._puckupEnergyNearby(creep, 3) ||
            this._travelToSource(creep) ||
            true;
    };
    RoleRegularTransport.prototype._here = function (creep) {
        return this._repairRoadHere(creep) ||
            this._buildRoadHere(creep) ||
            this._moveToDestination(creep) ||
            true;
    };
    return RoleRegularTransport;
}(RoleBaseTransport));
exports.RoleRegularTransport = RoleRegularTransport;
var RoleExperimentalTransport = (function (_super) {
    __extends(RoleExperimentalTransport, _super);
    function RoleExperimentalTransport() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = 'experimentalTransport';
        return _this;
    }
    RoleExperimentalTransport.prototype._moveToSource = function (creep) {
        var goal = this._getMyInitialPosition(creep);
        var rangeToGoal = creep.pos.getRangeTo(goal);
        switch (rangeToGoal) {
            case 0:
                if (!creep.memory.firstArrivedAt) {
                    creep.memory.firstArrivedAt = Game.time;
                    creep.memory.travelTime = creep.memory.firstArrivedAt - creep.memory.spawnedAt;
                }
                else {
                    if (!creep.memory.nextArrive) {
                        creep.memory.nextArrive = Game.time;
                        creep.memory.loopTime = creep.memory.nextArrive - creep.memory.firstArrivedAt;
                    }
                }
                return this._load(creep);
            case 1:
                creep.say('almost');
                var direction = creep.pos.getDirectionTo(goal);
                creep.move(direction);
                var prev = _.first(goal.lookFor(LOOK_CREEPS).filter(function (c) { return c.my; }));
                if (prev != null) {
                    prev.move(prev.pos.getDirectionTo(creep));
                    if (Spawn_1.getRoleByName(prev.name) == Spawn_1.getRoleByName(creep.name)) {
                        this._setState(prev, 2);
                    }
                    prev.memory.processed = true;
                }
                return true;
            default:
                var path = PathUtils_1.getFullPathForCreep(this._getDestination(creep), this._getMyInitialPosition(creep));
                creep.memory.currentPathKey = path.key;
                if (Memory['selectedId'] == creep.id) {
                    var segment = [];
                    segment = Room.deserializePath(path.segments[creep.room.name]);
                    var pairs = segment.map(function (s) { return [s.x, s.y]; });
                    creep.room.visual.poly(pairs, {
                        fill: 'transparent',
                        stroke: '#444',
                        lineStyle: 'dashed',
                        strokeWidth: .15,
                        opacity: .2
                    });
                }
                creep.say('moving');
                if (!_.isString(path.segments[creep.room.name]) || (customMoveByPath3(creep, path.segments[creep.room.name]) == ERR_NOT_FOUND)) {
                    creep.moveTo(goal, { reusePath: 50 });
                }
                return true;
        }
    };
    RoleExperimentalTransport.prototype._moveToDestination = function (creep) {
        if (_.sum(creep.carry) == 0) {
            this._prevState(creep);
            return false;
        }
        var goal = this._getDestination(creep);
        if (1 === creep.pos.getRangeTo(goal)) {
            return this._unload(creep);
        }
        var path = PathUtils_1.getFullPathForCreep(this._getMyInitialPosition(creep), this._getDestination(creep));
        creep.memory.currentPathKey = path.key;
        if (Memory['selectedId'] == creep.id) {
            var segment = [];
            segment = Room.deserializePath(path.segments[creep.room.name]);
            var pairs = segment.map(function (s) { return [s.x, s.y]; });
            creep.room.visual.poly(pairs, {
                fill: 'transparent',
                stroke: '#f88',
                lineStyle: 'dashed',
                strokeWidth: .15,
                opacity: .2
            });
        }
        creep.say('moving');
        if (customMoveByPath3(creep, path.segments[creep.room.name]) == ERR_NOT_FOUND) {
            creep.moveTo(goal, { reusePath: 50 });
        }
    };
    return RoleExperimentalTransport;
}(RoleRegularTransport));
exports.RoleExperimentalTransport = RoleExperimentalTransport;
var RoleFastTransport = (function (_super) {
    __extends(RoleFastTransport, _super);
    function RoleFastTransport() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RoleFastTransport.prototype._moveToDestination = function (creep) {
        if (_.sum(creep.carry) == 0) {
            this._setState(creep, 1);
            return false;
        }
        var goal = this._getDestination(creep);
        if (1 === creep.pos.getRangeTo(goal)) {
            return this._unload(creep);
        }
        var path = PathUtils_1.getFullPathByCosts(this._getMyInitialPosition(creep), this._getDestination(creep), 1, 1, 5, false);
        creep.memory.currentPathKey = path.key;
        if (Memory['selectedId'] == creep.id) {
            var segment = [];
            segment = Room.deserializePath(path.segments[creep.room.name]);
            var pairs = segment.map(function (s) { return [s.x, s.y]; });
            creep.room.visual.poly(pairs, {
                fill: 'transparent',
                stroke: '#f88',
                lineStyle: 'dashed',
                strokeWidth: .15,
                opacity: .2
            });
        }
        if (_.isUndefined(path.segments[creep.room.name]) || (customMoveByPath2(creep, path.segments[creep.room.name]) == ERR_NOT_FOUND)) {
            creep.moveTo(goal, { reusePath: 50 });
        }
    };
    return RoleFastTransport;
}(RoleRegularTransport));
exports.RoleFastTransport = RoleFastTransport;


/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var BehaviorBase_1 = __webpack_require__(2);
var Rooms_1 = __webpack_require__(14);
var Spawn_1 = __webpack_require__(3);
var TickCache_1 = __webpack_require__(1);
var CostMatrixType_1 = __webpack_require__(0);
var Role_Base_1 = __webpack_require__(4);
var buildPriority = {};
buildPriority[STRUCTURE_TERMINAL] = 5;
buildPriority[STRUCTURE_STORAGE] = 6;
buildPriority[STRUCTURE_TOWER] = 6;
buildPriority[STRUCTURE_SPAWN] = 7;
buildPriority[STRUCTURE_EXTENSION] = 11;
buildPriority[STRUCTURE_LAB] = 11;
var BaseWorker = (function (_super) {
    __extends(BaseWorker, _super);
    function BaseWorker() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._findEnergySource = function (creep) {
            return ((creep.room.memory['emptyTerminal'] === true) && (creep.room.terminal != null) && (creep.room.terminal.store.energy > 0)) ?
                creep.room.terminal :
                creep.pos.findClosestByPath(_.union(TickCache_1.__find(creep.room, FIND_DROPPED_RESOURCES, {
                    filter: function (r) { return ((r.resourceType == RESOURCE_ENERGY) && (r.amount > 50)); }
                }), TickCache_1.__find(creep.room, FIND_STRUCTURES, {
                    filter: function (s) {
                        return _.includes([STRUCTURE_CONTAINER, STRUCTURE_STORAGE, STRUCTURE_TERMINAL], s.structureType) && (s.store.energy >= (creep.carryCapacity - _.sum(creep.carry))) ||
                            ((s.structureType == STRUCTURE_LINK) && (s.energy >= (creep.carryCapacity - _.sum(creep.carry))));
                    }
                })), {
                    ignoreCreeps: true
                });
        };
        _this._findChargedLab = function (creep) { return creep.pos.findClosestByPath(TickCache_1.__find(creep.room, FIND_STRUCTURES, { filter: function (s) { return _.includes([STRUCTURE_LAB], s.structureType) && (s.energy > 0); } })); };
        return _this;
    }
    BaseWorker.prototype._getMyInitialPosition = function (creep) {
        var assign = Spawn_1.getAssignmentByName(creep.name);
        if (!_.isUndefined(Game.flags[assign])) {
            return Game.flags[assign].pos;
        }
        return RoomPosition.unpack(parseInt(assign));
    };
    BaseWorker.prototype._charge = function (creep) {
        if ((creep.carry.energy >= creep.carryCapacity) && (creep.carryCapacity > 0)) {
            this._nextState(creep);
            return false;
        }
        var source = this._getCachedObject(creep, 'energyStorageId', this._findEnergySource);
        if (source == null) {
            delete creep.memory['energyStorageId'];
            if (creep.carry[RESOURCE_ENERGY] > 0) {
                this._nextState(creep);
                return true;
            }
            return this._idle(creep);
        }
        if (!creep.pos.isNearTo(source)) {
            if (source instanceof Source) {
                var places = source.pos.around(1, { filter: function (p) { return p.isFree(); } });
                if (_.some(places)) {
                    var costs_1 = {};
                    var busyPos = source.pos.around(1, { filter: function (p) { return !p.isFree(); } });
                    _.forEach(busyPos, function (p) { return costs_1[p.pack()] = Infinity; });
                    BehaviorBase_1.default.GoToPosition(creep, creep.pos.findClosestByRange(places), { costMatrixType: CostMatrixType_1.CostMatrixType.FullSpeed, addCosts: costs_1, maxRooms: 1 });
                }
                else {
                    if (creep.pos.getRangeTo(source.pos) > 2) {
                        BehaviorBase_1.default.GoToPosition(creep, source.pos, { costMatrixType: CostMatrixType_1.CostMatrixType.FullSpeed, range: 2, maxRooms: 1 });
                    }
                }
            }
            else {
                BehaviorBase_1.default.GoToPosition(creep, source.pos, { costMatrixType: CostMatrixType_1.CostMatrixType.FullSpeed, range: 1 });
            }
            return true;
        }
        if (source instanceof Resource) {
            delete creep.memory['energyStorageId'];
            creep.pickup(source);
            this._nextState(creep);
            return true;
        }
        if ((source instanceof Tombstone) || (source instanceof Ruin)) {
            delete creep.memory['energyStorageId'];
            creep.withdraw(source, RESOURCE_ENERGY);
            this._nextState(creep);
            return true;
        }
        if (source instanceof Source) {
            if (creep.harvest(source) == ERR_NOT_ENOUGH_RESOURCES) {
                delete creep.memory['energyStorageId'];
            }
            return true;
        }
        if (creep.withdraw(source, RESOURCE_ENERGY) != OK) {
            delete creep.memory['energyStorageId'];
        }
        return true;
    };
    BaseWorker.prototype._findTaskPosition = function (creep) {
        var allTasks = TickCache_1.__find(creep.room, FIND_MY_CREEPS, {
            filter: function (c) { return !_.isUndefined(c.memory['taskPos']) && (c.memory['taskPos'] != null); }
        })
            .map(function (c) { return c.memory['taskPos']; });
        var workingCreeps = TickCache_1.__find(creep.room, FIND_MY_CREEPS, {
            filter: function (c) { return !_.isUndefined(c.memory['taskPos']) && (c.memory['taskPos'] != null); }
        });
        var currentAssigns = _.groupBy(workingCreeps, function (c) { return c.memory['taskPos']; });
        if (!_.isUndefined(creep.room.controller) &&
            creep.room.controller.my &&
            !currentAssigns[creep.room.controller.pos.pack()] &&
            ((creep.room.controller.progress > creep.room.controller.progressTotal) ||
                (creep.room.controller.level == 8) &&
                    !_.isUndefined(creep.room.controller.ticksToDowngrade) &&
                    (creep.room.controller.ticksToDowngrade < 145000))) {
            return creep.room.controller.pos.pack();
        }
        var cSite = _.first(TickCache_1.__find(creep.room, FIND_CONSTRUCTION_SITES, {
            filter: function (cs) {
                return !creep.pos.isEqualTo(cs.pos) &&
                    (cs.structureType != STRUCTURE_RAMPART);
            }
        })
            .sort(function (a, b) {
            return ((buildPriority[a.structureType] || 10) + (_.size(currentAssigns[a.pos.pack()]) || 0) - (buildPriority[b.structureType] || 10)) - (_.size(currentAssigns[b.pos.pack()]) || 0) ||
                ((a.progressTotal - a.progress) - (b.progressTotal - b.progress)) ||
                (creep.pos.getRangeTo(a) - creep.pos.getRangeTo(b));
        }));
        if (cSite != null) {
            return cSite.pos.pack();
        }
        var rampartCSite = _.first(TickCache_1.__find(creep.room, FIND_CONSTRUCTION_SITES, {
            filter: function (cs) {
                return (cs.structureType == STRUCTURE_RAMPART) &&
                    !_.includes(allTasks, cs.pos.pack());
            }
        })
            .sort(function (a, b) {
            return ((a.progressTotal - a.progress) - (b.progressTotal - b.progress)) ||
                (creep.pos.getRangeTo(a) - creep.pos.getRangeTo(b));
        }));
        if (rampartCSite != null) {
            return rampartCSite.pos.pack();
        }
        var rampartToFortify = this._findRaiseTarget(creep);
        if (rampartToFortify != null) {
            return rampartToFortify.pos.pack();
        }
        return null;
    };
    BaseWorker.prototype._work = function (creep) {
        if (creep.carry.energy == 0) {
            delete creep.memory['taskPos'];
            delete creep.memory['taskObjectId'];
            delete creep.memory['workPosition'];
            this._prevState(creep);
            return false;
        }
        var taskPos;
        if (_.isUndefined(creep.memory['taskPos'])) {
            var taskPos_1 = this._findTaskPosition(creep);
            if (taskPos_1 == null) {
                creep.say('🚬', true);
                return true;
            }
            creep.memory['taskPos'] = taskPos_1;
        }
        taskPos = RoomPosition.unpack(creep.memory['taskPos']);
        if (taskPos == null) {
            creep.say('🚬', true);
            return true;
        }
        var energyStorage = _.isUndefined(creep.memory['energyStorageId']) ?
            null :
            Game.getObjectById(creep.memory['energyStorageId']);
        if (_.isUndefined(creep.memory['workPosition'])) {
            var workPosition = null;
            if ((energyStorage != null) && (energyStorage instanceof Structure)) {
                var possibleWorkPositions = this._possibleWorkPositions(creep, taskPos, 3);
                var positionsNextToStore = _.filter(possibleWorkPositions, function (p) { return p.isNearTo(energyStorage.pos); });
                if (_.some(positionsNextToStore)) {
                    workPosition = creep.pos.findClosestByPath(positionsNextToStore, {
                        ignoreCreeps: true
                    });
                }
            }
            if (workPosition == null) {
                workPosition = this._workPosition(creep, taskPos, 2) || this._workPosition(creep, taskPos, 3);
                delete creep.memory['energyStorageId'];
            }
            creep.memory['workPosition'] = workPosition.pack();
        }
        if (creep.pos.getRangeTo(taskPos) <= 3) {
            if (_.isUndefined(creep.memory['taskObjectId'])) {
                creep.memory['taskObjectId'] = this._workObjectId(creep);
            }
            if (creep.memory['taskObjectId'] == null) {
                delete creep.memory['taskPos'];
                delete creep.memory['taskObjectId'];
                delete creep.memory['workPosition'];
                return false;
            }
            var obj = Game.getObjectById(creep.memory['taskObjectId']);
            if (obj == null) {
                delete creep.memory['taskObjectId'];
                return false;
            }
            if (obj instanceof ConstructionSite) {
                if (obj.structureType == STRUCTURE_WALL) {
                    delete creep.memory['taskPos'];
                    delete creep.memory['taskObjectId'];
                    delete creep.memory['workPosition'];
                }
                creep.build(obj);
                if ((creep.carry[RESOURCE_ENERGY] < (creep.carryCapacity / 2)) && (energyStorage != null) && creep.pos.isNearTo(energyStorage)) {
                    creep.withdraw(energyStorage, RESOURCE_ENERGY);
                }
            }
            if (obj instanceof StructureController) {
                creep.upgradeController(obj);
            }
            else {
                if (obj instanceof Structure) {
                    if (obj.hits < obj.hitsMax) {
                        creep.repair(obj);
                    }
                    else {
                        if (obj.hitsMax > 1) {
                            delete creep.memory['taskPos'];
                            delete creep.memory['taskObjectId'];
                            delete creep.memory['workPosition'];
                            return false;
                        }
                        else {
                            this._idle(creep);
                            return true;
                        }
                    }
                }
            }
        }
        var wPos = RoomPosition.unpack(creep.memory['workPosition']);
        if (!creep.pos.isEqualTo(wPos)) {
            BehaviorBase_1.default.GoToPosition(creep, wPos, { costMatrixType: CostMatrixType_1.CostMatrixType.HalfSpeed });
        }
        return true;
    };
    BaseWorker.prototype._findRaiseTarget = function (creep) {
        return Game.getObjectById(creep.room.memory['focusRaiseId']) || Rooms_1.getRampartToFortify(creep.room);
    };
    BaseWorker.prototype._possibleWorkPositions = function (creep, object, range) {
        if (range === void 0) { range = 3; }
        if (object == null) {
            return null;
        }
        var localCreeps = creep.room.find(FIND_MY_CREEPS, { filter: function (c) { return c.id != creep.id; } });
        var powerCreeps = creep.room.find(FIND_POWER_CREEPS);
        var reservedPositions = [];
        for (var _i = 0, localCreeps_1 = localCreeps; _i < localCreeps_1.length; _i++) {
            var c = localCreeps_1[_i];
            var assignPos = Role_Base_1.RoleBase._getMyAssignmentPosition(c);
            if (assignPos != null) {
                reservedPositions.push(assignPos.pack());
            }
            if (!_.isUndefined(c.memory['workPosition']) && (c.memory['workPosition'] != null)) {
                reservedPositions.push(c.memory['workPosition']);
            }
            else {
                reservedPositions.push(c.pos.pack());
            }
        }
        for (var _a = 0, powerCreeps_1 = powerCreeps; _a < powerCreeps_1.length; _a++) {
            var pc = powerCreeps_1[_a];
            if (Game.flags[pc.name]) {
                reservedPositions.push(Game.flags[pc.name].pos.pack());
            }
        }
        return object.around(range, {
            filter: function (p) {
                return !_.includes(reservedPositions, p.pack()) &&
                    (p.isEqualTo(creep.pos) || p.isFree());
            }
        })
            .sort(function (a, b) { return a.getRangeTo(creep) - b.getRangeTo(creep) || a.getRangeTo(object) - b.getRangeTo(object); });
    };
    BaseWorker.prototype._workPosition = function (creep, object, range) {
        if (range === void 0) { range = 3; }
        var possiblePositions = this._possibleWorkPositions(creep, object, range);
        return creep.pos.findClosestByPath(possiblePositions, {
            ignoreCreeps: true
        });
    };
    BaseWorker.prototype._workObjectId = function (creep) {
        var taskPos = RoomPosition.unpack(creep.memory['taskPos']);
        var objects = _.filter(taskPos.look(), function (l) { return _.includes([LOOK_CONSTRUCTION_SITES, LOOK_STRUCTURES], l.type); });
        var rCS = _.first(_.filter(objects, function (o) { return o.type == LOOK_CONSTRUCTION_SITES; }));
        if (rCS != null) {
            return rCS.constructionSite.id;
        }
        var rR = _.find(objects, function (o) { return (o.type == LOOK_STRUCTURES) &&
            o.structure &&
            (o.structure.structureType != STRUCTURE_ROAD) &&
            (o.structure.hits < o.structure.hitsMax); });
        if (rR != null) {
            return rR.structure.id;
        }
        if ((creep.room.controller != null) && (creep.room.controller.pos.isEqualTo(taskPos))) {
            return creep.room.controller.id;
        }
        return null;
    };
    return BaseWorker;
}(Role_Base_1.RoleBase));
exports.BaseWorker = BaseWorker;


/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var bodyParts = {
    m: MOVE,
    w: WORK,
    c: CARRY,
    a: ATTACK,
    r: RANGED_ATTACK,
    t: TOUGH,
    h: HEAL,
    k: CLAIM
};
var boosts = {
    M1: 'ZO',
    M2: 'ZHO2',
    M3: 'XZHO2',
    U1: 'GH',
    U2: 'GH2O',
    U3: 'XGH2O',
    B1: 'LH',
    B2: 'LH2O',
    B3: 'XLH2O',
    G1: 'UO',
    G2: 'UHO2',
    G3: 'XUHO2',
    D1: 'ZH',
    D2: 'ZH2O',
    D3: 'XZH2O',
    C1: 'KH',
    C2: 'KH2O',
    C3: 'XKH2O',
    A1: 'UH',
    A2: 'UH2O',
    A3: 'XUH2O',
    R1: 'KO',
    R2: 'KHO2',
    R3: 'XKHO2',
    T1: 'GO',
    T2: 'GHO2',
    T3: 'XGHO2',
    H1: 'LO',
    H2: 'LHO2',
    H3: 'XLHO2'
};
function makeSetup(setupString) {
    var result = [];
    var setupMatch = /^(.*)\/(.*)$/.exec(setupString);
    if (!setupMatch) {
        throw new Error("Parse failed: " + setupString);
    }
    var role = setupMatch[1], body = setupMatch[2];
    var rest = body;
    while (rest.length > 0) {
        var match = /^(\d+)([mwcarthk])/.exec(rest);
        if (!match) {
            throw new Error("Parse failed: " + body + "/" + rest);
        }
        if (!bodyParts[match[2]]) {
            throw new Error("Parse failed: " + body + "/" + rest + " (no bodypart label " + match[2] + ")");
        }
        rest = rest.substr(match[0].length);
        if ((rest.length > 1) && !!boosts["" + rest[0] + rest[1]]) {
            result.push({
                part: bodyParts[match[2]],
                amount: parseInt(match[1]),
                boost: boosts["" + rest[0] + rest[1]]
            });
            rest = rest.substr(2);
        }
        else {
            result.push({
                part: bodyParts[match[2]],
                amount: parseInt(match[1])
            });
        }
    }
    return {
        behavior: role,
        body: result
    };
}
exports.makeSetup = makeSetup;
function makeBody(setup) {
    var result = [];
    for (var i = 0; i < setup.body.length; i++)
        for (var j = 0; j < setup.body[i].amount; j++)
            result.push(setup.body[i].part);
    return result;
}
exports.makeBody = makeBody;
function ticksToSpawn(setup) {
    return _.sum(setup.body.map(function (i) { return i.amount * 3; }));
}
exports.ticksToSpawn = ticksToSpawn;


/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Spawn_1 = __webpack_require__(3);
var roleWeights = {
    pfMelee: 5,
    pfHealer: 4,
    pCarrier: 3,
    assaultMelee: 5,
    assaultHealer: 4,
    assaultRanger: 3,
    assaultDismantler: 5,
    boostedDismantler: 5,
    caravanMelee: 20,
    caravanHealer: 19,
    caravanCarrier: 18,
    caravanRanger: 17
};
function formRaid(initiator) {
    console.log("forming raid for " + Spawn_1.getAssignmentByName(initiator.name) + " (" + initiator + ")");
    var raidMembers = [];
    for (var creepId in Game.creeps) {
        var creep = Game.creeps[creepId];
        if (!_.isUndefined(initiator.memory['squadId'])) {
            if (creep.memory['squadId'] == initiator.memory['squadId']) {
                raidMembers.push(creep);
            }
        }
        else {
            if (!creep.spawning &&
                Spawn_1.getAssignmentByName(creep.name) == Spawn_1.getAssignmentByName(initiator.name) &&
                (initiator.room == creep.room)) {
                raidMembers.push(creep);
            }
        }
    }
    raidMembers = raidMembers.sort(function (a, b) { return roleWeights[Spawn_1.getRoleByName(a.name)] - roleWeights[Spawn_1.getRoleByName(b.name)]; });
    var leader = _.last(raidMembers);
    leader.memory.inRaid = true;
    leader.say('leader');
    for (var i = 0; i < raidMembers.length - 1; i++) {
        raidMembers[i].memory.inRaid = true;
        raidMembers[i].memory.following = raidMembers[i + 1].name;
        raidMembers[i + 1].memory.follower = raidMembers[i].name;
        raidMembers[i].say(raidMembers[i + 1].name);
    }
}
exports.formRaid = formRaid;


/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Process_1 = __webpack_require__(5);
var TributeTracker_1 = __webpack_require__(37);
var marketOrders = null;
var _locks = {};
var energySellAmount = 10000;
function findBestEnergyOrder(orders, myRoomName) {
    var bestOrder = null;
    var bestPrice = null;
    orders.forEach(function (o) {
        var amount = Math.min(energySellAmount, o.amount);
        if (_.isUndefined(o.roomName)) {
            return;
        }
        var price = (amount + Game.market.calcTransactionCost(amount, myRoomName, o.roomName)) / (amount * o.price);
        if ((bestPrice == null) || (bestPrice > price)) {
            bestPrice = price;
            bestOrder = o;
        }
    });
    return bestOrder;
}
function sellEnergy(myRoomName) {
    var myRooms = _.filter(Game.rooms, function (r) { return r.controller && r.controller.my; }).map(function (r) { return r.name; });
    if (marketOrders == null) {
        marketOrders = Game.market.getAllOrders(function (o) { return !_.includes(myRooms, o.roomName); });
    }
    var energyOrders = _.filter(marketOrders, function (o) { return (o.type == ORDER_BUY) && (o.resourceType == RESOURCE_ENERGY) && (o.amount >= 10000); });
    var bestOrder = findBestEnergyOrder(energyOrders, myRoomName);
    if (bestOrder == null) {
        return false;
    }
    var amount = Math.min(energySellAmount, bestOrder.amount);
    var result = Game.market.deal(bestOrder.id, amount, myRoomName);
    if (result != OK) {
        console.log("Energy sell error in " + myRoomName + ": " + result);
    }
    else {
        console.log("Energy sell success in " + myRoomName);
    }
    return true;
}
function evacuateResources(sourceRoom) {
    if (sourceRoom.terminal == null) {
        return;
    }
    var targetRoom = Game.rooms[sourceRoom.memory['evacResourcesTo']];
    if (targetRoom == null) {
        return;
    }
    var resources = _.filter(_.keys(sourceRoom.terminal.store), function (r) { return r != RESOURCE_ENERGY; })
        .sort(function (a, b) { return (sourceRoom.terminal.store[b] - sourceRoom.terminal.store[a]) || (b.length - a.length); });
    var evacuate = _.first(resources);
    if (sourceRoom.terminal.store[evacuate] < 100) {
        return;
    }
    _locks[sourceRoom.terminal.id] = "evac_" + evacuate;
    sourceRoom.terminal.send(evacuate, sourceRoom.terminal.store[evacuate], targetRoom.name);
}
function supplyTick() {
    var myRooms = _.filter(Game.rooms, function (r) { return r.controller && r.controller.my && (r.controller.level > 5) && (r.storage != null) && (r.terminal != null); });
    _locks = {};
    marketOrders = null;
    if (marketOrders == null) {
        var myRoomsNames_1 = myRooms.map(function (r) { return r.name; });
        marketOrders = Game.market.getAllOrders(function (o) { return !_.includes(myRoomsNames_1, o.roomName); });
    }
    if (_.isUndefined(Memory['responseQueue'])) {
        Memory['responseQueue'] = [];
    }
    var queue = Memory['responseQueue'];
    if (_.some(queue)) {
        var item = queue.shift();
        var responseRoom = Game.rooms[item.fromRoom];
        if ((responseRoom != null) && (responseRoom.terminal != null) && (responseRoom.terminal.cooldown == 0)) {
            var stats = TributeTracker_1.default.GetStats(item.toRoom);
            if (stats == null) {
                responseRoom.terminal.send(RESOURCE_ENERGY, 101, item.toRoom, 'No info');
            }
            else {
                responseRoom.terminal.send(RESOURCE_ENERGY, 101, item.toRoom, JSON.stringify(stats));
            }
            _locks[responseRoom.terminal.id] = 'response';
        }
    }
    var highRooms = myRooms.filter(function (r) { return (r.controller.level >= 6) && (r.storage != null) && (r.terminal != null); }).sort(function (a, b) { return b.storage.storeCapacity - _.sum(b.storage.store) - (a.storage.storeCapacity - _.sum(a.storage.store)); });
    for (var r in highRooms) {
        var room = myRooms[r];
        if (_.isUndefined(room.storage) || _.isUndefined(room.terminal) || (room.controller.level < 8) || (room.terminal.cooldown > 0)) {
            continue;
        }
        if (!_.isUndefined(room.memory['evacResourcesTo'])) {
            evacuateResources(room);
            continue;
        }
        var storageCapacityLeft = room.storage.storeCapacity - _.sum(room.storage.store);
        var emergencySelling = (storageCapacityLeft < 10000) || room.memory['sellEnergy'];
        if (emergencySelling) {
            var sold = sellEnergy(room.name);
            if (!sold) {
                var dumpTo = _.first(highRooms);
                console.log("Storage in " + room.name + " is over normal (" + storageCapacityLeft + " left), sending to room " + dumpTo.name);
                room.terminal.send(RESOURCE_ENERGY, 10000, dumpTo.name);
            }
            else {
                console.log("Storage in " + room.name + " is over normal (" + storageCapacityLeft + " left), selling energy");
            }
            _locks[room.terminal.id] = "sell_energy";
        }
    }
    for (var _i = 0, _a = _.filter(Game.rooms, function (r) { return r.controller && r.controller.my && (r.controller.level == 8); }); _i < _a.length; _i++) {
        var room = _a[_i];
        if (room == null || room.storage == null || room.terminal == null || (room.storage.store[RESOURCE_ENERGY] < 200000) || !_.isUndefined(_locks[room.terminal.id])) {
            continue;
        }
        var supply = (Memory['supplyRooms'] || []).map(function (r) { return Game.rooms[r]; });
        for (var _b = 0, supply_1 = supply; _b < supply_1.length; _b++) {
            var sroom = supply_1[_b];
            if (sroom && sroom.terminal && (sroom.terminal.store[RESOURCE_ENERGY] < 10000)) {
                _locks[room.terminal.id] = sroom.name + "_energy";
                room.terminal.send(RESOURCE_ENERGY, 10000, sroom.name);
            }
        }
    }
}
exports.supplyTick = supplyTick;
var ProcessSupply = (function (_super) {
    __extends(ProcessSupply, _super);
    function ProcessSupply() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(ProcessSupply.prototype, "name", {
        get: function () {
            return '/usr/bin/supplyd';
        },
        enumerable: true,
        configurable: true
    });
    ProcessSupply.prototype.tick = function () {
        supplyTick();
        this.sleep(10);
    };
    ProcessSupply.ScheduleResponse = function (fromRoomName, toRoomName) {
        if (_.isUndefined(Memory['responseQueue'])) {
            Memory['responseQueue'] = [];
        }
        var queue = Memory['responseQueue'];
        queue.push({
            fromRoom: fromRoomName,
            toRoom: toRoomName
        });
    };
    return ProcessSupply;
}(Process_1.Process));
exports.ProcessSupply = ProcessSupply;


/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Task_1 = __webpack_require__(6);
var BuyResourceTask_1 = __webpack_require__(76);
var CarryTask_1 = __webpack_require__(43);
var DeliverResourceTask_1 = __webpack_require__(77);
var EvacuateResourcesTask_1 = __webpack_require__(78);
var LoadBoostTask_1 = __webpack_require__(79);
var LoadLabTask_1 = __webpack_require__(80);
var LoadPowerTask_1 = __webpack_require__(81);
var LootResourceTask_1 = __webpack_require__(82);
var ProduceBoostTask_1 = __webpack_require__(44);
var ProduceCommodityTask_1 = __webpack_require__(83);
var SellResourceTask_1 = __webpack_require__(84);
var TowTask_1 = __webpack_require__(85);
var UnloadLabTask_1 = __webpack_require__(86);
var TaskFactory = (function () {
    function TaskFactory() {
    }
    TaskFactory.CreateTask = function (serializedTask) {
        var type = serializedTask['type'];
        switch (type) {
            case Task_1.TaskType.DeliverResource:
                return new DeliverResourceTask_1.default(serializedTask);
            case Task_1.TaskType.CarryResources:
                return new CarryTask_1.default(serializedTask);
            case Task_1.TaskType.ProduceBoost:
                return new ProduceBoostTask_1.default(serializedTask);
            case Task_1.TaskType.ProduceCommodity:
                return new ProduceCommodityTask_1.default(serializedTask);
            case Task_1.TaskType.LoadBoost:
                return new LoadBoostTask_1.default(serializedTask);
            case Task_1.TaskType.LoadLab:
                return new LoadLabTask_1.default(serializedTask);
            case Task_1.TaskType.UnloadLab:
                return new UnloadLabTask_1.default(serializedTask);
            case Task_1.TaskType.LoadPower:
                return new LoadPowerTask_1.default(serializedTask);
            case Task_1.TaskType.LootResource:
                return new LootResourceTask_1.default(serializedTask);
            case Task_1.TaskType.EvacuateResources:
                return new EvacuateResourcesTask_1.default(serializedTask);
            case Task_1.TaskType.BuyResource:
                return new BuyResourceTask_1.default(serializedTask);
            case Task_1.TaskType.SellResource:
                return new SellResourceTask_1.default(serializedTask);
            case Task_1.TaskType.Tow:
                return new TowTask_1.default(serializedTask);
        }
        return null;
    };
    return TaskFactory;
}());
exports.default = TaskFactory;


/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var AmountedTask_1 = __webpack_require__(22);
var Task_1 = __webpack_require__(6);
var Config_1 = __webpack_require__(8);
var BuyEnergyStep;
(function (BuyEnergyStep) {
    BuyEnergyStep["PlaceOrder"] = "place";
    BuyEnergyStep["WaitAndAdjust"] = "wait";
})(BuyEnergyStep || (BuyEnergyStep = {}));
var BuyResourceTask = (function (_super) {
    __extends(BuyResourceTask, _super);
    function BuyResourceTask(data) {
        return _super.call(this, data) || this;
    }
    BuyResourceTask.prototype.Execute = function (agent) {
        if (!(agent instanceof StructureTerminal)) {
            throw new Error("Agent " + agent + " is not terminal");
        }
        var step = this.step;
        switch (step) {
            case BuyEnergyStep.PlaceOrder: return this.PlaceOrder();
            case BuyEnergyStep.WaitAndAdjust: return this.WaitAndAdjust();
        }
        return this.Continue();
    };
    BuyResourceTask.prototype.PlaceOrder = function () {
        var othersOrders = this.othersOrders.sort(function (a, b) { return b.price - a.price; });
        var myPrice = 0.001 + (_.some(othersOrders) ? _.first(othersOrders).price : 0);
        myPrice = Math.round(1000 * myPrice) / 1000;
        if (!_.isUndefined(Config_1.MarketResourcesConfig[this.resource]) && (Config_1.MarketResourcesConfig[this.resource].MaxBuyPrice < myPrice)) {
            myPrice = Config_1.MarketResourcesConfig[this.resource].MaxBuyPrice;
        }
        console.log("Selected price for buying " + this.resource + " for " + this.roomName + ": " + myPrice);
        Game.market.createOrder(ORDER_BUY, this.resource, myPrice, this.amount, this.roomName);
        this.step = BuyEnergyStep.WaitAndAdjust;
        return this.Continue();
    };
    BuyResourceTask.prototype.WaitAndAdjust = function () {
        var _this = this;
        var myOrder = _.first(_.filter(_.values(Game.market.orders), function (o) {
            return (o.roomName == _this.roomName) &&
                (o.resourceType == _this.resource) &&
                (o.type == ORDER_BUY);
        }));
        if (myOrder == null) {
            console.log("Something unexpected happened for task " + this.id + " (no order)");
            return this.Postpone(10);
        }
        if (myOrder.remainingAmount == 0) {
            Game.market.cancelOrder(myOrder.id);
            this.addCompleted(myOrder.totalAmount);
            return this.Completed();
        }
        var maxPrice = _.max(this.othersOrders.map(function (o) { return o.price; }));
        if ((maxPrice) >= myOrder.price) {
            console.log("Market beats my order for " + this.roomName + " (" + maxPrice + " vs " + myOrder.price + ")");
            var newPrice = Math.round((maxPrice + 0.001) * 1000) / 1000;
            if (!_.isUndefined(Config_1.MarketResourcesConfig[this.resource]) && (Config_1.MarketResourcesConfig[this.resource].MaxBuyPrice >= newPrice)) {
                console.log("Increasing price to " + newPrice);
                Game.market.changeOrderPrice(myOrder.id, newPrice);
            }
        }
        return this.Continue();
    };
    Object.defineProperty(BuyResourceTask.prototype, "othersOrders", {
        get: function () {
            return _.filter(this.allBuyOrders, function (o) {
                return _.isUndefined(Game.rooms[o.roomName]) ||
                    _.isUndefined(Game.rooms[o.roomName].controller) ||
                    !Game.rooms[o.roomName].controller.my;
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BuyResourceTask.prototype, "allBuyOrders", {
        get: function () {
            var _this = this;
            return Game.market.getAllOrders(function (o) { return (o.resourceType == _this.resource) && (o.type == ORDER_BUY) && (o.amount >= 100); });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BuyResourceTask.prototype, "step", {
        get: function () {
            if (_.isUndefined(this._data['step'])) {
                this._data['step'] = BuyEnergyStep.PlaceOrder;
            }
            return this._data['step'];
        },
        set: function (value) {
            this._data['step'] = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BuyResourceTask.prototype, "resource", {
        get: function () {
            return this._data['resource'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BuyResourceTask.prototype, "roomName", {
        get: function () {
            return this._data['roomName'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BuyResourceTask.prototype, "room", {
        get: function () {
            return Game.rooms[this.roomName];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BuyResourceTask.prototype, "Type", {
        get: function () {
            return Task_1.TaskType.BuyResource;
        },
        enumerable: true,
        configurable: true
    });
    BuyResourceTask.CreateBuyResourceTaskObject = function (id, priority, amount, roomName, resource) {
        var res = AmountedTask_1.default.CreateAmountedTaskObject(id, priority, amount);
        res['roomName'] = roomName;
        res['resource'] = resource;
        return res;
    };
    return BuyResourceTask;
}(AmountedTask_1.default));
exports.default = BuyResourceTask;


/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var AmountedTask_1 = __webpack_require__(22);
var Task_1 = __webpack_require__(6);
var DeliverResourceTask = (function (_super) {
    __extends(DeliverResourceTask, _super);
    function DeliverResourceTask(data) {
        return _super.call(this, data) || this;
    }
    DeliverResourceTask.prototype.Execute = function (agent) {
        if (!(agent instanceof StructureTerminal)) {
            throw new Error("Agent " + agent + " is not terminal");
        }
        var terminal = agent;
        var toSend = this.amount - (this.completed || 0);
        var readyToSend = Math.min(toSend, this.resource == RESOURCE_ENERGY ? (terminal.store[this.resource] || 0) / 2 : (terminal.store[this.resource] || 0));
        if (!readyToSend) {
            console.log("Postponing deliver of " + this.resource + " to " + this.room + ": nothing to send from (" + terminal.room.name + ": " + terminal.store[this.resource] + ", energy " + terminal.store[RESOURCE_ENERGY] + ")");
            return this.Postpone(10);
        }
        if ((this.room != null) && (this.room.terminal == null)) {
            console.log("Postponing deliver of " + this.resource + " to " + this.room + ": no terminal");
            return this.Postpone(100);
        }
        var readyToReceive = (this.room == null) ? readyToSend : this.room.terminal.storeCapacity - _.sum(this.room.terminal.store);
        if (readyToReceive < readyToSend) {
            console.log("Postponing deliver of " + this.resource + " to " + this.room + ": readyToReceive < readyToSend");
            return this.Postpone(10);
        }
        var energyNeeded = (this.resource == RESOURCE_ENERGY ? readyToSend : 0) + Game.market.calcTransactionCost(readyToSend, terminal.room.name, this.roomName);
        if (terminal.store[RESOURCE_ENERGY] < energyNeeded) {
            console.log("Postponing deliver of " + this.resource + " to " + this.room + ": terminal.store[RESOURCE_ENERGY] < energyNeeded");
            return this.Postpone(50);
        }
        var result = terminal.send(this.resource, readyToSend, this.roomName);
        if (result == OK) {
            this.addCompleted(readyToSend);
            return this.completed == this.amount ? this.Completed() : this.Continue();
        }
        console.log("Sending " + readyToSend + " of " + this.resource + " from " + agent.room.name + " to " + this.roomName + " failed with code " + result);
        return this.Postpone(10);
    };
    Object.defineProperty(DeliverResourceTask.prototype, "Type", {
        get: function () {
            return Task_1.TaskType.DeliverResource;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DeliverResourceTask.prototype, "roomName", {
        get: function () {
            return this._data['roomName'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DeliverResourceTask.prototype, "room", {
        get: function () {
            return Game.rooms[this.roomName];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DeliverResourceTask.prototype, "resource", {
        get: function () {
            return this._data['resource'];
        },
        enumerable: true,
        configurable: true
    });
    DeliverResourceTask.CreateDeliverResourceTaskObject = function (id, priority, amount, roomName, resource) {
        var res = AmountedTask_1.default.CreateAmountedTaskObject(id, priority, amount);
        res['roomName'] = roomName;
        res['resource'] = resource;
        return res;
    };
    return DeliverResourceTask;
}(AmountedTask_1.default));
exports.default = DeliverResourceTask;


/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Task_1 = __webpack_require__(6);
var ResourceBalancer_1 = __webpack_require__(34);
var TaskManager_1 = __webpack_require__(7);
var EvacuateResourcesTask = (function (_super) {
    __extends(EvacuateResourcesTask, _super);
    function EvacuateResourcesTask(data) {
        return _super.call(this, data) || this;
    }
    EvacuateResourcesTask.prototype.Execute = function (agent) {
        var _this = this;
        if (!(agent instanceof StructureTerminal)) {
            throw new Error("Agent " + agent + " is not terminal");
        }
        var resources = _.without(_.keys(this.room.terminal.store), RESOURCE_ENERGY);
        if (!_.some(resources)) {
            return this.Completed();
        }
        var room = this.room;
        var resourceToEvac = _.last(resources.sort(function (a, b) {
            return (_this.room.terminal.store[a] - _this.room.terminal.store[b]) ||
                (a.length - b.length) ||
                (ResourceBalancer_1.default.ResourceInRoom(room, a) - ResourceBalancer_1.default.ResourceInRoom(room, b));
        }));
        var myRooms = _.filter(_.values(Game.rooms), function (r) {
            return !_.isUndefined(r.controller) &&
                r.controller.my &&
                (r.controller.level == 8) &&
                (r.terminal != null) &&
                (r.storage != null) &&
                (r.storage.pos.getRangeTo(r.terminal.pos) < 3) &&
                (r.terminal.cooldown == 0) &&
                _.isUndefined(r.memory['evac']);
        });
        var sortedRoom = myRooms.sort(function (a, b) { return ResourceBalancer_1.default.ResourceInRoom(a, resourceToEvac) - ResourceBalancer_1.default.ResourceInRoom(b, resourceToEvac); });
        var leastRoom = _.first(sortedRoom);
        if (this.room.terminal.store[RESOURCE_ENERGY] < Game.market.calcTransactionCost(this.room.terminal.store[resourceToEvac], this.room.name, leastRoom.name)) {
            TaskManager_1.default.AddDeliverTask(RESOURCE_ENERGY, 10000, this.roomName);
            return this.Postpone(20);
        }
        var res = this.room.terminal.send(resourceToEvac, this.room.terminal.store[resourceToEvac], leastRoom.name);
        if (res == OK) {
            return this.Continue();
        }
        console.log("Evacuate " + resourceToEvac + " failed (" + this.roomName + "\u2192" + leastRoom.name + "): " + res);
        return this.Postpone(10);
    };
    Object.defineProperty(EvacuateResourcesTask.prototype, "Type", {
        get: function () {
            return Task_1.TaskType.EvacuateResources;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EvacuateResourcesTask.prototype, "roomName", {
        get: function () {
            return this._data['roomName'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EvacuateResourcesTask.prototype, "room", {
        get: function () {
            return Game.rooms[this.roomName];
        },
        enumerable: true,
        configurable: true
    });
    EvacuateResourcesTask.prototype.isCompleted = function () {
        if (_.isUndefined(this._data['isCompeted'])) {
            this._data['isCompeted'] = false;
            return false;
        }
        return this._data['isCompeted'];
    };
    EvacuateResourcesTask.prototype.Completed = function () {
        this._data['isCompeted'] = true;
        console.log("Setting completed for evac task " + this.id + " (" + this.roomName + ")");
        return _super.prototype.Completed.call(this);
    };
    EvacuateResourcesTask.CreateEvacuateResourcesTaskObject = function (id, priority, roomName) {
        var res = Task_1.Task.CreateTaskObject(id, priority);
        res['roomName'] = roomName;
        return res;
    };
    return EvacuateResourcesTask;
}(Task_1.Task));
exports.default = EvacuateResourcesTask;


/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Task_1 = __webpack_require__(6);
var TasksRepository_1 = __webpack_require__(11);
var BehaviorBase_1 = __webpack_require__(2);
var CostMatrixType_1 = __webpack_require__(0);
var LabTask_1 = __webpack_require__(32);
var TaskManager_1 = __webpack_require__(7);
var BoostLoadStep;
(function (BoostLoadStep) {
    BoostLoadStep["Init"] = "init";
    BoostLoadStep["UnloadSelf"] = "unloadSelf";
    BoostLoadStep["GetEnergy"] = "getEnergy";
    BoostLoadStep["GetBoost"] = "getBoost";
    BoostLoadStep["PutEnergy"] = "putEnergy";
    BoostLoadStep["PutBoost"] = "putBoost";
    BoostLoadStep["UnloadLab"] = "unload";
    BoostLoadStep["Finalize"] = "finalize";
})(BoostLoadStep || (BoostLoadStep = {}));
var LoadBoostTask = (function (_super) {
    __extends(LoadBoostTask, _super);
    function LoadBoostTask(data) {
        return _super.call(this, data) || this;
    }
    LoadBoostTask.prototype.Execute = function (agent) {
        if (!(agent instanceof Creep)) {
            throw new Error("Task " + this.id + " (" + this.Type + ") error: agent is not creep");
        }
        if (_.some(this.subtasks)) {
            return this.Postpone(10);
        }
        var lab = this.lab;
        if (lab == null) {
            lab = this.selectLab();
        }
        if (lab == null) {
            console.log("No free lab for task " + this.id + " (" + this.parts + " parts of " + this.boost + ")");
            return this.Postpone(10);
        }
        var step = this.step;
        switch (step) {
            case BoostLoadStep.Init: return this.Init(agent);
            case BoostLoadStep.UnloadSelf: return this.UnloadSelf(agent);
            case BoostLoadStep.GetEnergy: return this.GetEnergy(agent);
            case BoostLoadStep.GetBoost: return this.GetBoost(agent);
            case BoostLoadStep.UnloadLab: return this.UnloadLab(agent);
            case BoostLoadStep.PutEnergy: return this.PutEnergy(agent);
            case BoostLoadStep.PutBoost: return this.PutBoost(agent);
            case BoostLoadStep.Finalize: return this.Finalize(agent);
        }
        return this.Postpone(10);
    };
    LoadBoostTask.prototype.isPostponed = function () {
        return _super.prototype.isPostponed.call(this) || _.some(this.subtasks);
    };
    LoadBoostTask.prototype.EnsureBoost = function () {
        var _this = this;
        this.InitLab();
        var existingDelivers = TaskManager_1.default.QueryDeliverTasks();
        var subtasks = this.subtasks;
        if (!_.some(existingDelivers, function (t) { return _.includes(subtasks, t.id); }) &&
            _.some(Game.rooms, function (r) { return r.controller && r.controller.my && (r.controller.level == 8) && (r.name != _this.roomName); })) {
            var deliverTask = TaskManager_1.default.AddDeliverTask(this.boost, LAB_BOOST_MINERAL * this.amount, this.roomName);
            this.subtasks.push(deliverTask.id);
        }
    };
    LoadBoostTask.prototype.OnePassPossible = function (creepCapacity, labAmount) {
        var needBoost = this.parts * LAB_BOOST_MINERAL;
        return needBoost + labAmount <= creepCapacity;
    };
    LoadBoostTask.prototype.InitLab = function () {
        var lab = this.lab;
        if (lab == null) {
            lab = this.selectLab();
        }
        if (lab == null) {
            console.log("No free lab for task " + this.id + " (" + this.parts + " parts of " + this.boost + ")");
            return this.Postpone(10);
        }
    };
    LoadBoostTask.prototype.Init = function (agent) {
        this.InitLab();
        if (this.lab == null) {
            return this.Postpone(10);
        }
        if (_.sum(agent.carry) > 0) {
            return this.UnloadSelf(agent);
        }
        if ((this.lab.energy > 0) || this.OnePassPossible(agent.carryCapacity, this.lab.mineralAmount)) {
            this.step = BoostLoadStep.GetEnergy;
            return this.GetEnergy(agent);
        }
        else {
            this.step = BoostLoadStep.UnloadLab;
            return this.UnloadLab(agent);
        }
    };
    LoadBoostTask.prototype.GetEnergy = function (agent) {
        if (!agent.pos.isNearTo(this.boostStorage)) {
            BehaviorBase_1.default.GoToPosition(agent, this.boostStorage, { costMatrixType: CostMatrixType_1.CostMatrixType.HalfSpeed, range: 1 });
            return this.Continue();
        }
        var energyAmount = LAB_BOOST_ENERGY * this.parts;
        if (agent.store[RESOURCE_ENERGY] == energyAmount) {
            this.step = BoostLoadStep.GetBoost;
            return this.GetBoost(agent);
        }
        var res = agent.withdraw(this.boostStorage, RESOURCE_ENERGY, energyAmount);
        if (res == OK) {
            return this.Continue();
        }
        console.log("Withdraw " + energyAmount + " of energy from " + this.boostStorage + " in " + this.roomName + " failed: error code " + res);
        return this.Postpone(10);
    };
    LoadBoostTask.prototype.GetBoost = function (agent) {
        if (!agent.pos.isNearTo(this.boostStorage)) {
            BehaviorBase_1.default.GoToPosition(agent, this.boostStorage, { costMatrixType: CostMatrixType_1.CostMatrixType.HalfSpeed, range: 1 });
            return this.Continue();
        }
        if (!agent.carry[RESOURCE_ENERGY]) {
            this.step = BoostLoadStep.GetEnergy;
            return this.Continue();
        }
        var mineralAmount = LAB_BOOST_MINERAL * this.parts;
        if (agent.store[this.boost] == mineralAmount) {
            this.step = BoostLoadStep.PutEnergy;
            return this.PutEnergy(agent);
        }
        var res = agent.withdraw(this.boostStorage, this.boost, mineralAmount);
        if (res == OK) {
            return this.Continue();
        }
        console.log("Withdraw " + mineralAmount + " of " + this.boost + " from " + this.boostStorage + " in " + this.roomName + " failed: error code " + res);
        return this.Postpone(10);
    };
    LoadBoostTask.prototype.UnloadSelf = function (agent) {
        if (!agent.pos.isNearTo(this.boostStorage)) {
            BehaviorBase_1.default.GoToPosition(agent, this.boostStorage, { costMatrixType: CostMatrixType_1.CostMatrixType.HalfSpeed, range: 1 });
            return this.Continue();
        }
        var resource = _.last(_.keys(agent.carry));
        agent.transfer(this.boostStorage, resource);
        return this.Continue();
    };
    LoadBoostTask.prototype.UnloadLab = function (agent) {
        if (this.lab.mineralAmount == 0) {
            if (_.sum(agent.carry) == 0) {
                this.step = BoostLoadStep.GetEnergy;
                return this.GetEnergy(agent);
            }
            return this.UnloadSelf(agent);
        }
        if (_.sum(agent.carry) == agent.carryCapacity) {
            return this.UnloadSelf(agent);
        }
        if (!agent.pos.isNearTo(this.lab)) {
            BehaviorBase_1.default.GoToPosition(agent, this.lab, { costMatrixType: CostMatrixType_1.CostMatrixType.HalfSpeed, range: 1 });
            return this.Continue();
        }
        agent.withdraw(this.lab, this.lab.mineralType);
        return this.Continue();
    };
    LoadBoostTask.prototype.PutEnergy = function (agent) {
        var needEnergy = LAB_BOOST_ENERGY * this.parts;
        if (!agent.carry[RESOURCE_ENERGY]) {
            this.step = BoostLoadStep.PutBoost;
            return this.PutBoost(agent);
        }
        if (!agent.pos.isNearTo(this.lab)) {
            BehaviorBase_1.default.GoToPosition(agent, this.lab, { costMatrixType: CostMatrixType_1.CostMatrixType.HalfSpeed, range: 1 });
            return this.Continue();
        }
        if ((this.lab.mineralType != this.boost) && (this.lab.mineralAmount > 0) && (this.lab.mineralAmount <= (agent.carryCapacity - _.sum(agent.carry)))) {
            var result = agent.withdraw(this.lab, this.lab.mineralType);
            if (result == OK) {
                this.DropExternalUnloadTasks();
            }
        }
        var res = agent.transfer(this.lab, RESOURCE_ENERGY, needEnergy);
        if (res == OK) {
            return this.Continue();
        }
        console.log("Transter of energy to " + this.lab + " in " + this.roomName + " failed: error code " + res);
        return this.Postpone(10);
    };
    LoadBoostTask.prototype.PutBoost = function (agent) {
        if (!agent.carry[this.boost]) {
            this.step = BoostLoadStep.Finalize;
            return this.Finalize(agent);
        }
        if (!agent.pos.isNearTo(this.lab)) {
            BehaviorBase_1.default.GoToPosition(agent, this.lab, { costMatrixType: CostMatrixType_1.CostMatrixType.HalfSpeed, range: 1 });
            return this.Continue();
        }
        if ((this.lab.mineralAmount > 0) && (this.lab.mineralType != this.boost)) {
            agent.withdraw(this.lab, this.lab.mineralType);
            this.DropExternalUnloadTasks();
            return this.Continue();
        }
        var res = agent.transfer(this.lab, this.boost);
        if (res == OK) {
            return this.Continue();
        }
        console.log("Transter of " + this.boost + " to " + this.lab + " in " + this.roomName + " failed: error code " + res);
        return this.Postpone(10);
    };
    LoadBoostTask.prototype.Finalize = function (agent) {
        if (_.sum(agent.carry) > 0) {
            return this.UnloadSelf(agent);
        }
        this.addCompleted(this.amount);
        return this.Completed();
    };
    LoadBoostTask.prototype.DropExternalUnloadTasks = function () {
        var _this = this;
        var unloadTasks = TasksRepository_1.default.QueryTasks(function (task) {
            return !task.isCompleted() &&
                (task.Type == Task_1.TaskType.CarryResources) &&
                (task.from.id == _this.lab.id) &&
                (task.resource == _this.lab.mineralType);
        });
        unloadTasks.forEach(function (task) { return TasksRepository_1.default.CleanupTask(task); });
    };
    Object.defineProperty(LoadBoostTask.prototype, "Step", {
        get: function () {
            return this.step;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LoadBoostTask.prototype, "step", {
        get: function () {
            if (_.isUndefined(this._data['step'])) {
                this._data['step'] = BoostLoadStep.Init;
            }
            return this._data['step'];
        },
        set: function (value) {
            this._data['step'] = value;
        },
        enumerable: true,
        configurable: true
    });
    LoadBoostTask.prototype.selectLab = function () {
        var plan = this.getPlannedBoosts();
        var labs = this.getPossibleLabs();
        var boost = this.boost;
        var parts = this.parts;
        console.log("Possible labs in " + this.room.name + " for " + parts + " of " + boost + ": " + labs.length);
        var labsToAdd = _.filter(labs, function (l) { return !_.isUndefined(plan[l.id]) && (plan[l.id].boost == boost) && ((plan[l.id].parts + parts) <= LoadBoostTask.maxPartsPerLab); });
        if (_.some(labsToAdd)) {
            var lab = _.first(labsToAdd);
            this._data['labId'] = lab.id;
            return lab;
        }
        var freeLabs = _.filter(labs, function (l) { return _.isUndefined(plan[l.id]) || (plan[l.id].parts == 0); });
        var selectedLab = _.first(freeLabs);
        if (selectedLab == null) {
            return null;
        }
        this._data['labId'] = selectedLab.id;
        return selectedLab;
    };
    LoadBoostTask.prototype.getPossibleLabs = function () {
        return _.compact(this.ResultLabs());
    };
    LoadBoostTask.prototype.getPlannedBoosts = function () {
        var result = {};
        var roomName = this.roomName;
        var boostsTasks = TasksRepository_1.default.QueryTasks(function (task) { return (task.Type == Task_1.TaskType.LoadBoost) && (task.roomName == roomName) && (task.lab != null) && !task.isCompleted(); });
        if (_.some(boostsTasks)) {
            for (var _i = 0, boostsTasks_1 = boostsTasks; _i < boostsTasks_1.length; _i++) {
                var task = boostsTasks_1[_i];
                if (_.isUndefined(result[task.lab.id])) {
                    result[task.lab.id] = {
                        boost: task.boost,
                        parts: task.parts
                    };
                    continue;
                }
                if (result[task.lab.id].boost != task.boost) {
                    throw new Error("Boosts conflict for " + task.lab + " (" + result[task.lab.id].boost + " planned, " + task.boost + " probing)");
                }
                if ((result[task.lab.id].parts + task.parts) > LoadBoostTask.maxPartsPerLab) {
                    continue;
                }
                result[task.lab.id].parts += task.parts;
            }
        }
        var possibleLabs = this.getPossibleLabs();
        for (var _a = 0, possibleLabs_1 = possibleLabs; _a < possibleLabs_1.length; _a++) {
            var lab = possibleLabs_1[_a];
            if ((lab.energy > 0) && (lab.mineralAmount > 0)) {
                var loadedParts = lab.energy / LAB_BOOST_ENERGY;
                if (_.isUndefined(result[lab.id])) {
                    result[lab.id] = {
                        boost: lab.mineralType,
                        parts: loadedParts
                    };
                    continue;
                }
                result[lab.id].parts += loadedParts;
            }
        }
        return result;
    };
    Object.defineProperty(LoadBoostTask, "maxPartsPerLab", {
        get: function () {
            return Math.floor(LAB_MINERAL_CAPACITY / LAB_BOOST_MINERAL);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LoadBoostTask.prototype, "Type", {
        get: function () {
            return Task_1.TaskType.LoadBoost;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LoadBoostTask.prototype, "boost", {
        get: function () {
            return this._data['boost'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LoadBoostTask.prototype, "parts", {
        get: function () {
            return this.amount;
        },
        enumerable: true,
        configurable: true
    });
    LoadBoostTask.prototype.addParts = function (amount) {
        this._data['amount'] = this._data['amount'] + amount;
    };
    Object.defineProperty(LoadBoostTask.prototype, "lab", {
        get: function () {
            if (!_.isUndefined(this._data['labId'])) {
                return Game.getObjectById(this._data['labId']);
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LoadBoostTask.prototype, "boostStorage", {
        get: function () {
            if (!_.isUndefined(this._data['boostStorageId'])) {
                return Game.getObjectById(this._data['boostStorageId']);
            }
            return ((this.room.storage.store[this.boost] || 0) >= (this.room.terminal.store[this.boost] || 0)) ? this.room.storage : this.room.terminal;
        },
        enumerable: true,
        configurable: true
    });
    LoadBoostTask.CreateLoadBoostTaskObject = function (id, priority, roomName, boost, parts, labId) {
        var res = LabTask_1.default.CreateLabTaskObject(id, priority, parts, roomName);
        res['boost'] = boost;
        if (!_.isUndefined(labId)) {
            res['labId'] = labId;
        }
        return res;
    };
    return LoadBoostTask;
}(LabTask_1.default));
exports.default = LoadBoostTask;


/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var BehaviorBase_1 = __webpack_require__(2);
var CostMatrixType_1 = __webpack_require__(0);
var LabTask_1 = __webpack_require__(32);
var Task_1 = __webpack_require__(6);
var LoadLabTask = (function (_super) {
    __extends(LoadLabTask, _super);
    function LoadLabTask(data) {
        return _super.call(this, data) || this;
    }
    LoadLabTask.prototype.Execute = function (agent) {
        if (!(agent instanceof Creep)) {
            throw new Error("Task " + this.id + " (" + this.Type + ") error: agent is not creep");
        }
        var creep = agent;
        if (this.staticPosition && !creep.pos.isEqualTo(this.staticPosition)) {
            BehaviorBase_1.default.GoToPosition(creep, this.staticPosition, { costMatrixType: CostMatrixType_1.CostMatrixType.Offroad });
            return this.Continue();
        }
        var leftResult = this.handleLab(creep, this.leftLab, this.leftResource);
        if (leftResult.Type != Task_1.TaskExecutionResultType.Completed) {
            return leftResult;
        }
        var rightResult = this.handleLab(creep, this.rightLab, this.rightResource);
        if (rightResult.Type != Task_1.TaskExecutionResultType.Completed) {
            return rightResult;
        }
        this.Unassign(creep);
        return { Type: Task_1.TaskExecutionResultType.Completed };
    };
    LoadLabTask.prototype.handleLab = function (creep, lab, resource) {
        if (lab.mineralType == resource && lab.mineralAmount == this.amount) {
            return { Type: Task_1.TaskExecutionResultType.Completed };
        }
        if ((_.sum(creep.carry) - creep.carry[lab.mineralType]) > 0) {
            return this.unloadAgent(creep);
        }
        if (lab.mineralType && lab.mineralType != resource) {
            if (!creep.pos.isNearTo(lab)) {
                BehaviorBase_1.default.GoToPosition(creep, lab, { costMatrixType: CostMatrixType_1.CostMatrixType.HalfSpeed, range: 1 });
                return this.Continue();
            }
            creep.withdraw(lab, lab.mineralType);
            return this.Continue();
        }
        if (lab.mineralAmount < this.amount) {
            if (!creep.carry[resource]) {
                if (!creep.pos.isNearTo(this.terminal)) {
                    BehaviorBase_1.default.GoToPosition(creep, this.terminal, { costMatrixType: CostMatrixType_1.CostMatrixType.HalfSpeed, range: 1 });
                    return this.Continue();
                }
                var toTake = Math.min(creep.carryCapacity, this.amount - (lab.mineralAmount || 0));
                if ((this.terminal.store[resource] || 0) < toTake) {
                    return { Type: Task_1.TaskExecutionResultType.Postpone, Postpone: 50, Message: "Not enough " + resource + " in terminal of " + this.room.name };
                }
                var result = creep.withdraw(this.terminal, resource, toTake);
                if (result != OK) {
                    return { Type: Task_1.TaskExecutionResultType.Postpone, Postpone: 50, Message: "Withdraw of " + resource + " in " + this.room.name + " failed: " + result };
                }
            }
            else {
                if (!creep.pos.isNearTo(lab)) {
                    BehaviorBase_1.default.GoToPosition(creep, lab, { costMatrixType: CostMatrixType_1.CostMatrixType.HalfSpeed, range: 1 });
                    return this.Continue();
                }
                var result = creep.transfer(lab, resource);
                if (result != OK) {
                    return { Type: Task_1.TaskExecutionResultType.Postpone, Postpone: 50, Message: "Transfer of " + resource + " into " + lab + " in " + this.room.name + " failed: " + result };
                }
            }
            return this.Continue();
        }
        throw new Error("Unexpected state of task " + this.Type + "#" + this.id + " in " + this.room.name);
    };
    LoadLabTask.prototype.isCompleted = function () {
        return this.leftLab.mineralType == this.leftResource &&
            this.leftLab.mineralAmount == this.amount &&
            this.rightLab.mineralType == this.rightResource &&
            this.rightLab.mineralAmount == this.amount;
    };
    LoadLabTask.prototype.unloadAgent = function (creep) {
        if (creep.pos.isNearTo(this.terminal)) {
            creep.transfer(this.terminal, _.last(_.keys(creep.carry)));
        }
        else {
            BehaviorBase_1.default.GoToPosition(creep, this.terminal, { costMatrixType: CostMatrixType_1.CostMatrixType.HalfSpeed, range: 1 });
        }
        return { Type: Task_1.TaskExecutionResultType.Continue };
    };
    Object.defineProperty(LoadLabTask.prototype, "staticPosition", {
        get: function () {
            if (_.isUndefined(this._data['pos'])) {
                var sourceLabs = this.sourceLabs();
                if (!this.terminal) {
                    throw new Error("No terminal for load lab task in " + this.room.name);
                }
                if (!_.some(sourceLabs) || !sourceLabs[0] || !sourceLabs[1]) {
                    throw new Error("Source labs invalid: " + JSON.stringify(sourceLabs));
                }
                var terminalAround = this.terminal.pos.around(1, { filter: function (p) { return p.isFree(); } }).map(function (p) { return p.pack(); });
                var leftAround = sourceLabs[0].pos.around(1, { filter: function (p) { return p.isFree(); } }).map(function (p) { return p.pack(); });
                var rightAround = sourceLabs[1].pos.around(1, { filter: function (p) { return p.isFree(); } }).map(function (p) { return p.pack(); });
                var possiblePositions = _.intersection(terminalAround, leftAround, rightAround);
                this._data['pos'] = _.first(possiblePositions) || '-';
            }
            if (this._data['pos'] == '-') {
                return null;
            }
            return RoomPosition.unpack(this._data['pos']);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LoadLabTask.prototype, "terminal", {
        get: function () {
            return this.room.terminal;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LoadLabTask.prototype, "leftLab", {
        get: function () {
            return this.sourceLabs()[0];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LoadLabTask.prototype, "leftResource", {
        get: function () {
            return this._data['left'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LoadLabTask.prototype, "rightResource", {
        get: function () {
            return this._data['right'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LoadLabTask.prototype, "rightLab", {
        get: function () {
            return this.sourceLabs()[1];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LoadLabTask.prototype, "Type", {
        get: function () {
            return Task_1.TaskType.LoadLab;
        },
        enumerable: true,
        configurable: true
    });
    LoadLabTask.CreateLoadLabTaskObject = function (id, priority, roomName, left, right, amount) {
        var res = LabTask_1.default.CreateLabTaskObject(id, priority, amount, roomName);
        res['left'] = left;
        res['right'] = right;
        return res;
    };
    return LoadLabTask;
}(LabTask_1.default));
exports.default = LoadLabTask;


/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Task_1 = __webpack_require__(6);
var BehaviorBase_1 = __webpack_require__(2);
var CostMatrixType_1 = __webpack_require__(0);
var LoadPowerTask = (function (_super) {
    __extends(LoadPowerTask, _super);
    function LoadPowerTask(data) {
        return _super.call(this, data) || this;
    }
    LoadPowerTask.prototype.Execute = function (agent) {
        if (!(agent instanceof Creep)) {
            throw new Error("Task " + this.id + " (" + this.Type + ") error: agent is not creep");
        }
        var creep = agent;
        if (_.some(this.subtasks)) {
            return this.Postpone(10);
        }
        if (!!this.staticPosition && !creep.pos.isEqualTo(this.staticPosition)) {
            BehaviorBase_1.default.GoToPosition(creep, this.staticPosition, { costMatrixType: CostMatrixType_1.CostMatrixType.Offroad });
            return this.Continue();
        }
        if (!!creep.carry[RESOURCE_POWER] || !!this.terminal.store[RESOURCE_POWER] && (this.powerSpawn.power < this.powerSpawn.powerCapacity)) {
            return (creep.carry[RESOURCE_POWER] || 0) == 0 ? this.GetPower(creep) : this.PlacePower(creep);
        }
        if (this.powerSpawn.energy < this.powerSpawn.power * POWER_SPAWN_ENERGY_RATIO) {
            return (creep.carry[RESOURCE_ENERGY] || 0) == 0 ? this.GetEnergy(creep) : this.PlaceEnergy(creep);
        }
        return this.Completed();
    };
    LoadPowerTask.prototype.GetPower = function (agent) {
        var power = Math.min(this.terminal.store[RESOURCE_POWER] || 0, this.powerSpawn.powerCapacity - this.powerSpawn.power);
        if (power <= 0) {
            return this.Postpone(10);
        }
        if (!agent.pos.isNearTo(this.terminal)) {
            BehaviorBase_1.default.GoToPosition(agent, this.terminal, { costMatrixType: CostMatrixType_1.CostMatrixType.Offroad, range: 1 });
        }
        else {
            agent.withdraw(this.terminal, RESOURCE_POWER, power);
            if (!agent.pos.isNearTo(this.powerSpawn)) {
                BehaviorBase_1.default.GoToPosition(agent, this.powerSpawn, { costMatrixType: CostMatrixType_1.CostMatrixType.HalfSpeed, range: 1 });
            }
        }
        return this.Continue();
    };
    LoadPowerTask.prototype.PlacePower = function (agent) {
        if (!agent.pos.isNearTo(this.powerSpawn)) {
            BehaviorBase_1.default.GoToPosition(agent, this.powerSpawn, { costMatrixType: CostMatrixType_1.CostMatrixType.Offroad, range: 1 });
        }
        else {
            agent.transfer(this.powerSpawn, RESOURCE_POWER);
            if (!agent.pos.isNearTo(this.terminal)) {
                BehaviorBase_1.default.GoToPosition(agent, this.terminal, { costMatrixType: CostMatrixType_1.CostMatrixType.HalfSpeed, range: 1 });
            }
        }
        return this.Continue();
    };
    LoadPowerTask.prototype.GetEnergy = function (agent) {
        var needEnergy = this.powerSpawn.power * POWER_SPAWN_ENERGY_RATIO;
        var energy = Math.min(this.terminal.store[RESOURCE_ENERGY] || 0, needEnergy - this.powerSpawn.energy, agent.carryCapacity);
        if (energy <= 0) {
            return this.Postpone(10);
        }
        if (!agent.pos.isNearTo(this.terminal)) {
            BehaviorBase_1.default.GoToPosition(agent, this.terminal, { costMatrixType: CostMatrixType_1.CostMatrixType.Offroad, range: 1 });
        }
        else {
            agent.withdraw(this.terminal, RESOURCE_ENERGY, energy);
            if (!agent.pos.isNearTo(this.powerSpawn)) {
                BehaviorBase_1.default.GoToPosition(agent, this.powerSpawn, { costMatrixType: CostMatrixType_1.CostMatrixType.HalfSpeed, range: 1 });
            }
        }
        return this.Continue();
    };
    LoadPowerTask.prototype.PlaceEnergy = function (agent) {
        if (!agent.pos.isNearTo(this.powerSpawn)) {
            BehaviorBase_1.default.GoToPosition(agent, this.powerSpawn, { costMatrixType: CostMatrixType_1.CostMatrixType.Offroad, range: 1 });
        }
        else {
            agent.transfer(this.powerSpawn, RESOURCE_ENERGY);
            var willComplete = (this.powerSpawn.power * POWER_SPAWN_ENERGY_RATIO <= this.powerSpawn.energy + agent.carry[RESOURCE_ENERGY]);
            if (!agent.pos.isNearTo(this.terminal) && !willComplete) {
                BehaviorBase_1.default.GoToPosition(agent, this.terminal, { costMatrixType: CostMatrixType_1.CostMatrixType.HalfSpeed, range: 1 });
            }
            if (willComplete) {
                return this.Completed();
            }
        }
        return this.Continue();
    };
    Object.defineProperty(LoadPowerTask.prototype, "staticPosition", {
        get: function () {
            if (_.isUndefined(this._data['pos'])) {
                if (!this.terminal || !this.powerSpawn) {
                    return null;
                }
                var possiblePositions = _.intersection(this.terminal.pos.around(1, { filter: function (p) { return p.isFree(); } }).map(function (p) { return p.pack(); }), this.powerSpawn.pos.around(1, { filter: function (p) { return p.isFree(); } }).map(function (p) { return p.pack(); }));
                this._data['pos'] = _.first(possiblePositions) || '-';
            }
            if (this._data['pos'] == '-') {
                return null;
            }
            return RoomPosition.unpack(this._data['pos']);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LoadPowerTask.prototype, "terminal", {
        get: function () {
            return this.room.terminal;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LoadPowerTask.prototype, "powerSpawn", {
        get: function () {
            if (_.isUndefined(this._data['powerSpawn'])) {
                var powerSpawn = _(this.room.find(FIND_MY_STRUCTURES))
                    .filter({ structureType: STRUCTURE_POWER_SPAWN })
                    .first();
                if (powerSpawn) {
                    this._data['powerSpawn'] = powerSpawn.id;
                }
            }
            return Game.getObjectById(this._data['powerSpawn']);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LoadPowerTask.prototype, "room", {
        get: function () {
            return Game.rooms[this.roomName];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LoadPowerTask.prototype, "roomName", {
        get: function () {
            return this._data['room'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LoadPowerTask.prototype, "Type", {
        get: function () {
            return Task_1.TaskType.LoadPower;
        },
        enumerable: true,
        configurable: true
    });
    LoadPowerTask.prototype.isCompleted = function () {
        return !this.terminal ||
            (!this.terminal.store[RESOURCE_POWER] && !this.powerSpawn.power) ||
            (this.powerSpawn.power > 0) && (this.powerSpawn.energy >= this.powerSpawn.power * POWER_SPAWN_ENERGY_RATIO);
    };
    LoadPowerTask.CreateLoadPowerTaskObject = function (id, priority, roomName) {
        var res = Task_1.Task.CreateTaskObject(id, priority);
        res['room'] = roomName;
        return res;
    };
    return LoadPowerTask;
}(Task_1.Task));
exports.default = LoadPowerTask;


/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var CostMatrixType_1 = __webpack_require__(0);
var Task_1 = __webpack_require__(6);
var BehaviorBase_1 = __webpack_require__(2);
var TickCache_1 = __webpack_require__(1);
var LootResourceTask = (function (_super) {
    __extends(LootResourceTask, _super);
    function LootResourceTask(data) {
        return _super.call(this, data) || this;
    }
    LootResourceTask.prototype.Execute = function (agent) {
        if (!(agent instanceof Creep)) {
            throw new Error("Task " + this.id + " (" + this.Type + ") error: agent is not creep");
        }
        var creep = agent;
        if (!creep.pos.isNearTo(this.Position)) {
            BehaviorBase_1.default.GoToPosition(creep, this.Position, { costMatrixType: CostMatrixType_1.CostMatrixType.HalfSpeed, range: 1 });
            return this.Continue();
        }
        if (_.sum(creep.carry) == creep.carryCapacity) {
            return this.Completed();
        }
        var lootObject = this.LootObject;
        if (lootObject == null) {
            lootObject =
                _.first(TickCache_1.__findInRange(this.Position, FIND_TOMBSTONES, 0, { filter: function (t) { return _.sum(t.store) > 0; } })) ||
                    _.first(TickCache_1.__findInRange(this.Position, FIND_DROPPED_RESOURCES, 0));
        }
        if (lootObject == null) {
            return this.Completed();
        }
        if (lootObject instanceof Resource) {
            creep.pickup(lootObject);
            return this.Completed();
        }
        var tombstone = lootObject;
        if (_.sum(tombstone.store) == 0) {
            return this.Completed();
        }
        creep.withdraw(tombstone, _.last(_.keys(tombstone.store)));
        return this.Continue();
    };
    Object.defineProperty(LootResourceTask.prototype, "Type", {
        get: function () {
            return Task_1.TaskType.LootResource;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LootResourceTask.prototype, "Position", {
        get: function () {
            if (_.isUndefined(this._data['position'])) {
                if (this.LootObject == null) {
                    return null;
                }
                this._data['position'] = this.LootObject.pos.pack();
                return this.LootObject.pos;
            }
            return RoomPosition.unpack(this._data['position']);
        },
        enumerable: true,
        configurable: true
    });
    LootResourceTask.prototype.isCompleted = function () {
        if (_.isUndefined(this._data['isCompeted'])) {
            this._data['isCompeted'] = false;
            return false;
        }
        return this._data['isCompeted'];
    };
    LootResourceTask.prototype.Completed = function () {
        this._data['isCompeted'] = true;
        console.log("Setting completed for loot task " + this.id + " (" + this.Position.roomName + ")");
        return _super.prototype.Completed.call(this);
    };
    Object.defineProperty(LootResourceTask.prototype, "LootObject", {
        get: function () {
            return Game.getObjectById(this._data['lootObjectId']);
        },
        enumerable: true,
        configurable: true
    });
    LootResourceTask.CreateLootTaskObject = function (id, priority, lootObject) {
        var res = Task_1.Task.CreateTaskObject(id, priority);
        res['lootObjectId'] = lootObject.id;
        res['position'] = lootObject.pos.pack();
        return res;
    };
    return LootResourceTask;
}(Task_1.Task));
exports.default = LootResourceTask;


/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var AmountedTask_1 = __webpack_require__(22);
var Task_1 = __webpack_require__(6);
var TaskManager_1 = __webpack_require__(7);
var TasksRepository_1 = __webpack_require__(11);
var ProduceCommodityStep;
(function (ProduceCommodityStep) {
    ProduceCommodityStep["Load"] = "load";
    ProduceCommodityStep["Produce"] = "produce";
    ProduceCommodityStep["Unload"] = "unload";
})(ProduceCommodityStep || (ProduceCommodityStep = {}));
var ProduceCommodityTask = (function (_super) {
    __extends(ProduceCommodityTask, _super);
    function ProduceCommodityTask(data) {
        return _super.call(this, data) || this;
    }
    ProduceCommodityTask.prototype.Execute = function (agent) {
        if (!(agent instanceof StructureFactory)) {
            throw new Error("Agent " + agent + " is not a factory in " + this.roomName);
        }
        switch (this.Step) {
            case ProduceCommodityStep.Load: return this.Load(agent);
            case ProduceCommodityStep.Produce: return this.Produce(agent);
            case ProduceCommodityStep.Unload: return this.Unload(agent);
        }
    };
    ProduceCommodityTask.prototype.Load = function (factory) {
        var _this = this;
        if (!factory) {
            return this.Postpone(100);
        }
        var operationsCount = Math.ceil(this.amount / COMMODITIES[this.commodity].amount);
        var components = _.mapValues(COMMODITIES[this.commodity].components, function (v) { return operationsCount * v; });
        if (_.every(_.keys(components), function (r) { return components[r] <= (factory.store[r] || 0); })) {
            this.step = ProduceCommodityStep.Produce;
            return this.Produce(factory);
        }
        var carryTasks = TasksRepository_1.default.QueryTasks(function (t) {
            return t.Type == Task_1.TaskType.CarryResources &&
                t.toId == factory.id;
        });
        _.forEach(components, function (amount, resource) {
            if ((factory.store[resource] || 0) < amount) {
                if (!_.some(carryTasks, { resource: resource })) {
                    var carryAmount = amount - (factory.store[resource] || 0);
                    console.log("Adding task to carry " + carryAmount + " of " + resource + " to factory at " + _this.roomName + " (store: " + JSON.stringify(factory.store) + ")");
                    var task = TaskManager_1.default.AddCarryTask(_this.room.terminal, factory, resource, carryAmount);
                    _this._data['subtasks'].push(task.id);
                }
            }
        });
        return this.Continue();
    };
    ProduceCommodityTask.prototype.Produce = function (factory) {
        this._data['completed'] = factory.store[this.commodity];
        if (factory.cooldown) {
            return this.Postpone(factory.cooldown);
        }
        if (factory.store[this.commodity] >= this.amount) {
            var unloadTask = TaskManager_1.default.AddCarryTask(factory, this.room.terminal, this.commodity, this.amount);
            this._data['subtasks'].push(unloadTask.id);
            this.step = ProduceCommodityStep.Unload;
            return this.Continue();
        }
        var result = factory.produce(this.commodity);
        if (result == ERR_NOT_ENOUGH_RESOURCES) {
            console.log("No resources for produce of " + this.commodity + " in " + this.roomName);
            this.step = ProduceCommodityStep.Load;
            return this.Continue();
        }
        if (result != OK) {
            console.log("Produce of " + this.commodity + " in " + this.roomName + " returned " + result);
            return this.Postpone(100);
        }
        this.addCompleted(COMMODITIES[this.commodity].amount);
        if (!this.isCompleted()) {
            return this.Postpone(COMMODITIES[this.commodity].cooldown);
        }
        if (!_.some(this._data['subtasks'])) {
            var unloadTask = TaskManager_1.default.AddCarryTask(factory, this.room.terminal, this.commodity, this.amount);
            this._data['subtasks'].push(unloadTask.id);
        }
        this.step = ProduceCommodityStep.Unload;
        return this.Continue();
    };
    ProduceCommodityTask.prototype.Unload = function (factory) {
        if (!factory) {
            return this.Postpone(100);
        }
        return _.some(this._data['subtasks']) ? this.Postpone(10) : this.Completed();
    };
    Object.defineProperty(ProduceCommodityTask.prototype, "Type", {
        get: function () {
            return Task_1.TaskType.ProduceCommodity;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProduceCommodityTask.prototype, "Step", {
        get: function () {
            return this.step;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProduceCommodityTask.prototype, "step", {
        get: function () {
            if (_.isUndefined(this._data['step'])) {
                this._data['step'] = ProduceCommodityStep.Load;
            }
            return this._data['step'];
        },
        set: function (value) {
            this._data['step'] = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProduceCommodityTask.prototype, "commodity", {
        get: function () {
            return this._data['commodity'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProduceCommodityTask.prototype, "roomName", {
        get: function () {
            return this._data['roomName'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProduceCommodityTask.prototype, "room", {
        get: function () {
            return Game.rooms[this.roomName];
        },
        enumerable: true,
        configurable: true
    });
    ProduceCommodityTask.CreateProduceCommodityTaskObject = function (id, priority, amount, commodity, roomName) {
        var res = AmountedTask_1.default.CreateAmountedTaskObject(id, priority, amount);
        res['roomName'] = roomName;
        res['commodity'] = commodity;
        return res;
    };
    return ProduceCommodityTask;
}(AmountedTask_1.default));
exports.default = ProduceCommodityTask;


/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var AmountedTask_1 = __webpack_require__(22);
var Task_1 = __webpack_require__(6);
var Config_1 = __webpack_require__(8);
var SellResourceTask = (function (_super) {
    __extends(SellResourceTask, _super);
    function SellResourceTask(data) {
        return _super.call(this, data) || this;
    }
    SellResourceTask.prototype.Execute = function (agent) {
        if (!(agent instanceof StructureTerminal)) {
            throw new Error("Agent " + agent + " is not terminal");
        }
        var terminal = agent;
        if (terminal.cooldown) {
            return this.Postpone(terminal.cooldown);
        }
        if (this.remaining <= 100) {
            this.addCompleted(this.amount);
            return this.Completed();
        }
        var resInTerminal = terminal.store[this.resource] || 0;
        if (this.resource == RESOURCE_ENERGY) {
            resInTerminal /= 2;
        }
        var toSell = Math.min(resInTerminal, this.remaining);
        if (toSell <= 0) {
            return this.Postpone(10);
        }
        var orders = Game.market.getAllOrders({
            type: ORDER_BUY,
            resourceType: this.resource
        });
        orders = _.filter(orders, function (o) { return !Game.rooms[o.roomName] || !Game.rooms[o.roomName].controller || !Game.rooms[o.roomName].controller.my; });
        var minPrice = _.isUndefined(Config_1.MarketResourcesConfig[this.resource]) ? 0 : Config_1.MarketResourcesConfig[this.resource].MinSellPrice;
        var matchedOrders = _(orders).filter(function (o) { return (o.price >= minPrice) && (o.remainingAmount >= toSell); });
        if (!matchedOrders.some()) {
            return this.Postpone(10);
        }
        var bestOrder = matchedOrders.max('price');
        if (bestOrder) {
            var result = Game.market.deal(bestOrder.id, toSell, this.roomName);
            if (OK == result) {
                this.addCompleted(toSell);
                return this.isCompleted() ? this.Completed() : this.Continue(10);
            }
            else {
                console.log("Sell resource task error (" + this.remaining + "/" + this.amount + " of " + this.resource + " from " + this.roomName + "), result was " + result + " (task id " + this.id + ", order " + bestOrder.id + ")");
            }
        }
        return this.Continue();
    };
    Object.defineProperty(SellResourceTask.prototype, "resource", {
        get: function () {
            return this._data['resource'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SellResourceTask.prototype, "roomName", {
        get: function () {
            return this._data['roomName'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SellResourceTask.prototype, "room", {
        get: function () {
            return Game.rooms[this.roomName];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SellResourceTask.prototype, "Type", {
        get: function () {
            return Task_1.TaskType.SellResource;
        },
        enumerable: true,
        configurable: true
    });
    SellResourceTask.CreateSellResourceTaskObject = function (id, priority, amount, roomName, resource) {
        var res = AmountedTask_1.default.CreateAmountedTaskObject(id, priority, amount);
        res['roomName'] = roomName;
        res['resource'] = resource;
        return res;
    };
    return SellResourceTask;
}(AmountedTask_1.default));
exports.default = SellResourceTask;


/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Task_1 = __webpack_require__(6);
var BehaviorBase_1 = __webpack_require__(2);
var CostMatrixType_1 = __webpack_require__(0);
var TowTask = (function (_super) {
    __extends(TowTask, _super);
    function TowTask(data) {
        return _super.call(this, data) || this;
    }
    TowTask.prototype.Execute = function (agent) {
        if (!(agent instanceof Creep)) {
            throw new Error("Task " + this.id + " (" + this.Type + ") error: agent is not locomotive");
        }
        var locomotive = agent;
        if (this.Creep.pos.getRangeTo(this.Position) <= this.Range) {
            return this.Completed();
        }
        if (locomotive.fatigue > 0) {
            locomotive.say('🚬', true);
            return this.Continue();
        }
        if (!locomotive.pos.isNearTo(this.Creep) && !this.Creep.pos.isEdge()) {
            BehaviorBase_1.default.GoToPosition(locomotive, this.Creep, { costMatrixType: CostMatrixType_1.CostMatrixType.FullSpeed, range: 1 });
            return this.Continue();
        }
        var currentRange = locomotive.pos.getRangeTo(this.Position);
        if (currentRange > this.Range) {
            if (locomotive.pos.isEdge()) {
                if (!this.Creep.pos.isEdge()) {
                    var edgePositions = locomotive.pos.around(1, { filter: function (p) { return p.isEdge() && p.isWalkable() && p.isFree(); } });
                    if (!_.some(edgePositions)) {
                        console.log("Unable to pull " + this.Creep + ": no place at the edge tiles");
                        return this.Completed();
                    }
                    delete locomotive.memory['_trav'];
                    locomotive.move(locomotive.pos.getDirectionTo(edgePositions[0]));
                    var pullResult_1 = locomotive.pull(this.Creep);
                    if (pullResult_1 != OK) {
                        console.log("Pull failed: " + pullResult_1);
                    }
                    var moveResult_1 = this.Creep.move(locomotive);
                    if (moveResult_1 != OK) {
                        console.log("Follow failed: " + moveResult_1);
                    }
                    return this.Continue();
                }
            }
            if (this.Creep.pos.isEdge() && (this.Creep.pos.roomName != locomotive.pos.roomName)) {
                return this.Continue();
            }
            BehaviorBase_1.default.GoToPosition(locomotive, this.Position, { costMatrixType: CostMatrixType_1.CostMatrixType.FullSpeed, range: this.Range });
            var pullResult = locomotive.pull(this.Creep);
            if (pullResult != OK) {
                console.log("Pull failed: " + pullResult);
            }
            var moveResult = this.Creep.move(locomotive);
            if (moveResult != OK) {
                console.log("Follow failed: " + moveResult);
            }
            return this.Continue();
        }
        if (currentRange == this.Range) {
            locomotive.move(this.Creep);
            locomotive.pull(this.Creep);
            this.Creep.move(locomotive);
            return this.Completed();
        }
        console.log("Unexpected state of TowTask (range " + currentRange + ", data " + JSON.stringify(this._data) + ")");
        return this.Continue(10);
    };
    Object.defineProperty(TowTask.prototype, "Creep", {
        get: function () {
            return Game.getObjectById(this._data['creep']);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TowTask.prototype, "Position", {
        get: function () {
            return RoomPosition.unpack(this._data['pos']);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TowTask.prototype, "Range", {
        get: function () {
            return this._data['range'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TowTask.prototype, "Type", {
        get: function () {
            return Task_1.TaskType.Tow;
        },
        enumerable: true,
        configurable: true
    });
    TowTask.prototype.isCompleted = function () {
        if (_.isUndefined(this._data['isCompeted'])) {
            this._data['isCompeted'] = false;
            return false;
        }
        return this._data['isCompeted'];
    };
    TowTask.prototype.Completed = function () {
        this._data['isCompeted'] = true;
        return _super.prototype.Completed.call(this);
    };
    TowTask.CreateTowTaskObject = function (id, priority, creep, pos, range) {
        var res = Task_1.Task.CreateTaskObject(id, priority);
        res['creep'] = creep.id;
        res['pos'] = pos.pack();
        res['range'] = range;
        return res;
    };
    return TowTask;
}(Task_1.Task));
exports.default = TowTask;


/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var BehaviorBase_1 = __webpack_require__(2);
var CostMatrixType_1 = __webpack_require__(0);
var LabTask_1 = __webpack_require__(32);
var Task_1 = __webpack_require__(6);
var UnloadStep;
(function (UnloadStep) {
    UnloadStep["Gather"] = "gather";
    UnloadStep["Store"] = "store";
})(UnloadStep || (UnloadStep = {}));
var UnloadLabTask = (function (_super) {
    __extends(UnloadLabTask, _super);
    function UnloadLabTask(data) {
        return _super.call(this, data) || this;
    }
    UnloadLabTask.prototype.Execute = function (agent) {
        if (!(agent instanceof Creep)) {
            throw new Error("Task " + this.id + " (" + this.Type + ") error: agent is not creep");
        }
        var creep = agent;
        if (this.isCompleted() && !_.sum(creep.carry)) {
            this.Unassign(creep);
            return { Type: Task_1.TaskExecutionResultType.Completed };
        }
        switch (this.step) {
            case UnloadStep.Gather:
                return this.Gather(creep);
            case UnloadStep.Store:
                return this.Store(creep);
        }
        if (_.some(creep.carry)) {
            return this.Store(creep);
        }
        throw new Error("Invalid state for " + this.Type + "#" + this.id + " in " + this.roomName);
    };
    UnloadLabTask.prototype.Gather = function (creep) {
        var unloadLab = _.first(this.unloadLabs);
        while (unloadLab && unloadLab.mineralAmount == 0 && unloadLab.energy == 0) {
            _.pull(this._data['unloadLabs'], unloadLab.id);
            unloadLab = _.first(this.unloadLabs);
        }
        var targetCapacity = Math.min(1500, creep.carryCapacity);
        if (!unloadLab || (targetCapacity <= _.sum(creep.carry))) {
            this.step = UnloadStep.Store;
            return this.Store(creep);
        }
        if (!creep.pos.isNearTo(unloadLab)) {
            BehaviorBase_1.default.GoToPosition(creep, unloadLab, { costMatrixType: CostMatrixType_1.CostMatrixType.HalfSpeed, range: 1 });
        }
        else {
            var resource = unloadLab.mineralType || RESOURCE_ENERGY;
            creep.withdraw(unloadLab, resource);
            var willBeFull = targetCapacity < (_.sum(creep.carry) + (resource == RESOURCE_ENERGY ? unloadLab.energy : unloadLab.mineralAmount));
            if (!unloadLab.energy || resource == RESOURCE_ENERGY) {
                if (!willBeFull && this.unloadLabs.length > 1) {
                    BehaviorBase_1.default.GoToPosition(creep, this.unloadLabs[1], { costMatrixType: CostMatrixType_1.CostMatrixType.HalfSpeed, range: 1 });
                }
                else {
                    this.step = UnloadStep.Store;
                    BehaviorBase_1.default.GoToPosition(creep, this.terminal, { costMatrixType: CostMatrixType_1.CostMatrixType.HalfSpeed, range: 1 });
                }
            }
        }
        return this.Continue();
    };
    UnloadLabTask.prototype.Store = function (creep) {
        if (!_.sum(creep.carry)) {
            if (this.isCompleted()) {
                this.Unassign(creep);
                return this.Completed();
            }
            else {
                this.step = UnloadStep.Gather;
                return this.Gather(creep);
            }
        }
        if (!creep.pos.isNearTo(this.terminal)) {
            BehaviorBase_1.default.GoToPosition(creep, this.terminal, { costMatrixType: CostMatrixType_1.CostMatrixType.HalfSpeed, range: 1 });
        }
        else {
            creep.transfer(this.terminal, _.last(_.keys(creep.carry)));
        }
        return this.Continue();
    };
    Object.defineProperty(UnloadLabTask.prototype, "Type", {
        get: function () { return Task_1.TaskType.UnloadLab; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UnloadLabTask.prototype, "unloadAll", {
        get: function () {
            return this._data['all'] == 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UnloadLabTask.prototype, "terminal", {
        get: function () {
            return this.room.terminal;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UnloadLabTask.prototype, "step", {
        get: function () {
            if (_.isUndefined(this._data['step'])) {
                this._data['step'] = UnloadStep.Store;
            }
            return this._data['step'];
        },
        set: function (step) {
            this._data['step'] = step;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UnloadLabTask.prototype, "unloadLabs", {
        get: function () {
            if (!_.isUndefined(this._data['unloadLabs'])) {
                return this._data['unloadLabs'].map(function (i) { return Game.getObjectById(i); });
            }
            var labsToUnload = this.unloadAll ? this.getLabs() : _.without.apply(_, [this.getLabs()].concat(this.getBusyLabs()));
            this._data['unloadLabs'] = labsToUnload
                .filter(function (l) { return l.energy || l.mineralAmount; })
                .sort(function (a, b) { return (a.pos.x - b.pos.x) || (b.pos.y - a.pos.y); })
                .map(function (l) { return l.id; });
            return labsToUnload;
        },
        enumerable: true,
        configurable: true
    });
    UnloadLabTask.prototype.isCompleted = function () {
        return !_.isUndefined(this._data['unloadLabs']) && !_.some(this._data['unloadLabs']);
    };
    UnloadLabTask.CreateUnloadLabTaskObject = function (id, priority, roomName, unloadAll) {
        var res = LabTask_1.default.CreateLabTaskObject(id, priority, 1, roomName);
        res['all'] = unloadAll ? 1 : 0;
        return res;
    };
    return UnloadLabTask;
}(LabTask_1.default));
exports.default = UnloadLabTask;


/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Formation_1 = __webpack_require__(33);
var SetFormation = (function (_super) {
    __extends(SetFormation, _super);
    function SetFormation(creepsSet) {
        var _this = _super.call(this) || this;
        _this.creepsSet = creepsSet;
        return _this;
    }
    Object.defineProperty(SetFormation.prototype, "Size", {
        get: function () {
            var _this = this;
            var maxDistCreep = _.max(this.creepsSet.creeps, function (c) { return _this.creepsSet.pos.getRangeTo(c); });
            return this.creepsSet.pos.getRangeTo(maxDistCreep);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SetFormation.prototype, "TemplatedPositions", {
        get: function () {
            var pos = this.creepsSet.pos;
            return this.creepsSet.creeps.map(function (c) { return { dx: c.pos.x - pos.x, dy: c.pos.y - pos.y }; });
        },
        enumerable: true,
        configurable: true
    });
    return SetFormation;
}(Formation_1.Formation));
var CreepsSet = (function () {
    function CreepsSet(creeps) {
        this.creeps = creeps;
    }
    Object.defineProperty(CreepsSet.prototype, "fatigue", {
        get: function () {
            return _.max(_.map(_.compact(this.creeps), function (c) { return c.fatigue; }));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CreepsSet.prototype, "pos", {
        get: function () {
            var leader = _.first(this.creeps);
            return leader == null ? null : leader.pos;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CreepsSet.prototype, "spawning", {
        get: function () {
            return _.some(this.creeps, function (m) { return (m == null) || m.spawning; });
        },
        enumerable: true,
        configurable: true
    });
    CreepsSet.prototype.move = function (direction) {
        _.forEach(_.compact(this.creeps), function (m) { return m.move(direction); });
        return OK;
    };
    Object.defineProperty(CreepsSet.prototype, "memory", {
        get: function () {
            var leader = _.first(this.creeps);
            if (leader == null) {
                return null;
            }
            if (_.isUndefined(leader.memory['setMemory'])) {
                leader.memory['setMemory'] = {};
            }
            return leader.memory['setMemory'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CreepsSet.prototype, "Formation", {
        get: function () {
            return new SetFormation(this);
        },
        enumerable: true,
        configurable: true
    });
    return CreepsSet;
}());
exports.default = CreepsSet;


/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var PositionUtils = (function () {
    function PositionUtils() {
    }
    PositionUtils.RoomNameToXY = function (name) {
        name = name.toUpperCase();
        var match = name.match(/^(\w)(\d+)(\w)(\d+)$/);
        if (!match) {
            return [undefined, undefined];
        }
        var hor = match[1], x = match[2], ver = match[3], y = match[4];
        if (hor == 'W') {
            x = -x - 1;
        }
        else {
            x = +x;
        }
        if (ver == 'N') {
            y = -y - 1;
        }
        else {
            y = +y;
        }
        return [x, y];
    };
    ;
    PositionUtils.ToWorldXY = function (pos) {
        var roomXY = PositionUtils.RoomNameToXY(pos.roomName);
        return [roomXY[0] * 50 + pos.x, roomXY[1] * 50 + pos.y];
    };
    PositionUtils.FromWorldXY = function (xy) {
        var roomXY = [Math.floor(xy[0] / 50), Math.floor(xy[1] / 50)];
        var roomName = PositionUtils.GetRoomNameFromXY(roomXY);
        var x = xy[0] % 50;
        if (x < 0)
            x += 50;
        var y = xy[1] % 50;
        if (y < 0)
            y += 50;
        return new RoomPosition(x, y, roomName);
    };
    PositionUtils.PositionInDirection = function (pos, direction) {
        var offsetX = [0, 0, 1, 1, 1, 0, -1, -1, -1];
        var offsetY = [0, -1, -1, 0, 1, 1, 1, 0, -1];
        var _a = PositionUtils.ToWorldXY(pos), x = _a[0], y = _a[1];
        return PositionUtils.FromWorldXY([x + offsetX[direction], y + offsetY[direction]]);
    };
    PositionUtils.GetRoomNameFromXY = function (XY) {
        var x = XY[0], y = XY[1];
        var lx = (x < 0) ? "W" + (-x - 1) : "E" + x;
        var ly = (y < 0) ? "N" + (-y - 1) : "S" + y;
        return "" + lx + ly;
    };
    return PositionUtils;
}());
exports.default = PositionUtils;


/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var CreepAnalyzer_1 = __webpack_require__(46);
var RoomAnalyzer = (function () {
    function RoomAnalyzer() {
    }
    RoomAnalyzer.CombatEffectiveness = function (room) {
        var cpuStart = Game.cpu.getUsed();
        var result = {
            myDamage: new Uint16Array(2500),
            myHeal: new Uint16Array(2500),
            hDamage: new Uint16Array(2500),
            hHeal: new Uint16Array(2500)
        };
        var towers = room.find(FIND_STRUCTURES, { filter: { structureType: STRUCTURE_TOWER } });
        _.forEach(towers, function (t) {
            if (t.energy < TOWER_ENERGY_COST) {
                return;
            }
            for (var point = 0; point < 2500; point++) {
                var x = point / 50 | 0, y = point % 50;
                var distance = Math.max(Math.abs(t.pos.x - x), Math.abs(t.pos.y - y));
                if (t.my) {
                    result.myDamage[point] += RoomAnalyzer.TowerEffect(TOWER_POWER_ATTACK, distance);
                    result.myHeal[point] += RoomAnalyzer.TowerEffect(TOWER_POWER_HEAL, distance);
                }
                else {
                    result.hDamage[point] += RoomAnalyzer.TowerEffect(TOWER_POWER_ATTACK, distance);
                    result.hHeal[point] += RoomAnalyzer.TowerEffect(TOWER_POWER_HEAL, distance);
                }
            }
        });
        var creeps = room.find(FIND_CREEPS);
        _.forEach(creeps, function (c) {
            var eff = CreepAnalyzer_1.default.CalcBodyEffectiveness(c.body);
            if ((eff.attack + eff.rangedAttack + eff.heal) == 0) {
                return;
            }
            for (var dx = -3; dx <= 3; dx++) {
                for (var dy = -3; dy <= 3; dy++) {
                    var xx = c.pos.x + dx;
                    var yy = c.pos.y + dy;
                    if (xx < 0 || yy < 0 || xx > 49 || yy > 49) {
                        continue;
                    }
                    if (c.my) {
                        result.myDamage[50 * xx + yy] += eff.rangedAttack;
                        if (Math.max(Math.abs(c.pos.x - xx), Math.abs(c.pos.y - yy)) <= 1) {
                            result.myDamage[50 * xx + yy] += eff.attack;
                            result.myHeal[50 * xx + yy] += eff.heal;
                        }
                    }
                    else {
                        result.hDamage[50 * xx + yy] += eff.rangedAttack;
                        result.hHeal[50 * xx + yy] += eff.rangedHeal;
                        if (Math.max(Math.abs(c.pos.x - xx), Math.abs(c.pos.y - yy)) <= 1) {
                            result.hDamage[50 * xx + yy] += eff.attack;
                            result.hHeal[50 * xx + yy] += eff.heal;
                        }
                    }
                }
            }
        });
        var used = Game.cpu.getUsed() - cpuStart;
        console.log("Analyzing room " + room.name + ": " + used + "ms");
        return result;
    };
    RoomAnalyzer.TowerEffect = function (effect, range) {
        if (range <= TOWER_OPTIMAL_RANGE) {
            return effect;
        }
        if (range > TOWER_FALLOFF_RANGE) {
            range = TOWER_FALLOFF_RANGE;
        }
        effect -= effect * TOWER_FALLOFF * (range - TOWER_OPTIMAL_RANGE) / (TOWER_FALLOFF_RANGE - TOWER_OPTIMAL_RANGE);
        return effect;
    };
    return RoomAnalyzer;
}());
exports.default = RoomAnalyzer;


/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ZoningRoomInformation_1 = __webpack_require__(253);
var ZoningRoomStatus_1 = __webpack_require__(254);
var roomNameRegex = /^([WE])\d+([NS])\d+$/;
var bitmasksRight1 = 1;
var bitmasksRight2 = 3;
var bitmasksRight3 = 7;
var bitmasksRight4 = 15;
var statuses = [
    ZoningRoomStatus_1.ZoningRoomStatus.Open,
    ZoningRoomStatus_1.ZoningRoomStatus.Closed,
    ZoningRoomStatus_1.ZoningRoomStatus.Novice,
    ZoningRoomStatus_1.ZoningRoomStatus.Respawn
];
var ZoningRoomInformationProvider = (function () {
    function ZoningRoomInformationProvider() {
    }
    ZoningRoomInformationProvider.GetRoomInfo = function (roomName) {
        var infoString = ZoningRoomInformationProvider.GetRoomString(roomName);
        if (infoString == null) {
            return null;
        }
        var dataUInt32 = infoString.codePointAt(2);
        var roomStatusIndex = dataUInt32 & bitmasksRight2;
        dataUInt32 >>= 2;
        var roomLevel = dataUInt32 & bitmasksRight4;
        dataUInt32 >>= 4;
        var sources = dataUInt32 & bitmasksRight2;
        dataUInt32 >>= 2;
        var harvested = (dataUInt32 & bitmasksRight1) === 1;
        dataUInt32 >>= 1;
        var portalsCount = dataUInt32 & bitmasksRight3;
        dataUInt32 >>= 3;
        var result = new ZoningRoomInformation_1.default();
        result.name = roomName;
        result.status = statuses[roomStatusIndex];
        result.level = roomLevel == 0x0f ? null : roomLevel;
        if (result.level != null) {
            result.userId = ZoningRoomInformationProvider.FindUserId(roomName);
        }
        result.sourcesCount = sources;
        result.harvesting = harvested;
        result.portalsPositions = [];
        var portals = infoString.substr(3);
        if (portalsCount !== portals.length) {
            throw new Error(infoString + " has mismatch in portal count (expected " + portalsCount + ", actual " + portals.length + ")");
        }
        for (var _i = 0, portals_1 = portals; _i < portals_1.length; _i++) {
            var p = portals_1[_i];
            result.portalsPositions.push(RoomPosition.unpackLocal(p, roomName, {}));
        }
        return result;
    };
    ZoningRoomInformationProvider.GetRoomString = function (roomName) {
        var parseResult = roomNameRegex.exec(roomName);
        if (!parseResult) {
            throw new Error("Malformed roomName: " + roomName + " in RoomPosition: " + JSON.stringify(this));
        }
        var str = parseResult[0], WE = parseResult[1], NS = parseResult[2];
        if (_.isUndefined(str)) {
            throw new Error("Regexp undefined in RoomPosition: " + this.toString());
        }
        var regionIndex = NS === 'N' ?
            WE == 'E' ?
                1 :
                2
            :
                WE == 'E' ?
                    3 :
                    4;
        var marker = new RoomPosition(50, 50, roomName).spack();
        var regionData = RawMemory.segments[70 + regionIndex];
        var nextMarker = 50;
        nextMarker <<= 6;
        nextMarker |= 50;
        var markerMask = 4095;
        var roomIndex = regionData.indexOf(marker);
        if (roomIndex < 0) {
            return null;
        }
        var roomLast = -1;
        for (var i = roomIndex + 2; i < regionData.length; i++) {
            var currentValue = regionData.codePointAt(i);
            if ((currentValue & markerMask) == nextMarker) {
                roomLast = i - 1;
                break;
            }
        }
        return regionData.substr(roomIndex, roomLast - roomIndex);
    };
    ZoningRoomInformationProvider.FindUserId = function (roomName) {
        var marker = new RoomPosition(50, 50, roomName).spack();
        var usersData = JSON.parse(RawMemory.segments[70]);
        for (var _i = 0, _a = _.keys(usersData); _i < _a.length; _i++) {
            var uid = _a[_i];
            var userRooms = usersData[uid];
            if (userRooms.indexOf(marker) > -1) {
                return uid;
            }
        }
        return null;
    };
    return ZoningRoomInformationProvider;
}());
exports.default = ZoningRoomInformationProvider;


/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Traveler = (function () {
    function Traveler() {
    }
    Traveler.travelTo = function (creep, destination, options) {
        if (options === void 0) { options = {}; }
        if (!destination) {
            return ERR_INVALID_ARGS;
        }
        if (creep.fatigue > 0) {
            Traveler.circle(creep.pos, "aqua", .3);
            return ERR_BUSY;
        }
        destination = this.normalizePos(destination);
        var rangeToDestination = creep.pos.getRangeTo(destination);
        if (options.range && rangeToDestination <= options.range) {
            return OK;
        }
        else if (rangeToDestination <= 1) {
            if (rangeToDestination === 1 && !options.range) {
                var direction = creep.pos.getDirectionTo(destination);
                if (options.returnData) {
                    options.returnData.nextPos = destination;
                    options.returnData.path = direction.toString();
                }
                return creep.move(direction);
            }
            return OK;
        }
        if (!creep.memory._trav) {
            delete creep.memory._travel;
            creep.memory._trav = {};
        }
        var travelData = creep.memory._trav;
        var state = this.deserializeState(travelData, destination);
        if (this.isStuck(creep, state)) {
            state.stuckCount++;
            Traveler.circle(creep.pos, "magenta", state.stuckCount * .2);
        }
        else {
            state.stuckCount = 0;
        }
        if (!options.stuckValue) {
            options.stuckValue = DEFAULT_STUCK_VALUE;
        }
        if (state.stuckCount >= options.stuckValue && Math.random() > .5) {
            options.ignoreCreeps = false;
            options.freshMatrix = true;
            delete travelData.path;
        }
        if (!this.samePos(state.destination, destination)) {
            if (options.movingTarget && state.destination.isNearTo(destination)) {
                travelData.path += state.destination.getDirectionTo(destination);
                state.destination = destination;
            }
            else {
                delete travelData.path;
            }
        }
        if (options.repath && Math.random() < options.repath) {
            delete travelData.path;
        }
        var newPath = false;
        if (!travelData.path) {
            newPath = true;
            if (creep.spawning) {
                return ERR_BUSY;
            }
            state.destination = destination;
            var cpu = Game.cpu.getUsed();
            var ret = this.findTravelPath(creep.pos, destination, options);
            var cpuUsed = Game.cpu.getUsed() - cpu;
            state.cpu = _.round(cpuUsed + state.cpu);
            var color = "orange";
            if (ret.incomplete) {
                color = "red";
            }
            if (options.returnData) {
                options.returnData.pathfinderReturn = ret;
            }
            travelData.path = Traveler.serializePath(creep.pos, ret.path, color);
            state.stuckCount = 0;
        }
        this.serializeState(creep, destination, state, travelData);
        if (!travelData.path || travelData.path.length === 0) {
            return ERR_NO_PATH;
        }
        if (state.stuckCount === 0 && !newPath) {
            travelData.path = travelData.path.substr(1);
        }
        var nextDirection = parseInt(travelData.path[0], 10);
        if (options.returnData) {
            if (nextDirection) {
                var nextPos = Traveler.positionAtDirection(creep.pos, nextDirection);
                if (nextPos) {
                    options.returnData.nextPos = nextPos;
                }
            }
            options.returnData.state = state;
            options.returnData.path = travelData.path;
        }
        return creep.move(nextDirection);
    };
    Traveler.normalizePos = function (destination) {
        if (!(destination instanceof RoomPosition)) {
            return destination.pos;
        }
        return destination;
    };
    Traveler.checkAvoid = function (roomName) {
        return Memory.rooms[roomName] && Memory.rooms[roomName].avoid;
    };
    Traveler.isExit = function (pos) {
        return pos.x === 0 || pos.y === 0 || pos.x === 49 || pos.y === 49;
    };
    Traveler.sameCoord = function (pos1, pos2) {
        return pos1.x === pos2.x && pos1.y === pos2.y;
    };
    Traveler.samePos = function (pos1, pos2) {
        return this.sameCoord(pos1, pos2) && pos1.roomName === pos2.roomName;
    };
    Traveler.circle = function (pos, color, opacity) {
        new RoomVisual(pos.roomName).circle(pos.x, pos.y, {
            radius: .45, fill: "transparent", stroke: color, strokeWidth: .15, opacity: opacity
        });
    };
    Traveler.updateRoomStatus = function (room) {
        if (!room) {
            return;
        }
        if (room.controller) {
            if (room.controller.owner && !room.controller.my) {
                room.memory.avoid = 1;
            }
            else {
                delete room.memory.avoid;
            }
        }
    };
    Traveler.findTravelPath = function (origin, destination, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        _.defaults(options, {
            ignoreCreeps: true,
            maxOps: DEFAULT_MAXOPS,
            range: 1,
        });
        if (options.movingTarget) {
            options.range = 0;
        }
        origin = this.normalizePos(origin);
        destination = this.normalizePos(destination);
        var originRoomName = origin.roomName;
        var destRoomName = destination.roomName;
        var roomDistance = Game.map.getRoomLinearDistance(origin.roomName, destination.roomName);
        var allowedRooms = options.route;
        if (!allowedRooms && (options.useFindRoute || (options.useFindRoute === undefined && roomDistance > 2))) {
            var route = this.findRoute(origin.roomName, destination.roomName, options);
            if (route) {
                allowedRooms = route;
            }
        }
        var roomsSearched = 0;
        var callback = function (roomName) {
            if (allowedRooms) {
                if (!allowedRooms[roomName]) {
                    return false;
                }
            }
            else if (!options.allowHostile && Traveler.checkAvoid(roomName)
                && roomName !== destRoomName && roomName !== originRoomName) {
                return false;
            }
            roomsSearched++;
            var matrix;
            var room = Game.rooms[roomName];
            if (room) {
                if (options.ignoreStructures) {
                    matrix = new PathFinder.CostMatrix();
                    if (!options.ignoreCreeps) {
                        Traveler.addCreepsToMatrix(room, matrix);
                    }
                }
                else if (options.ignoreCreeps || roomName !== originRoomName) {
                    matrix = _this.getStructureMatrix(room);
                }
                else {
                    matrix = _this.getCreepMatrix(room);
                }
                if (options.obstacles) {
                    matrix = matrix.clone();
                    for (var _i = 0, _a = options.obstacles; _i < _a.length; _i++) {
                        var obstacle = _a[_i];
                        if (obstacle.pos.roomName !== roomName) {
                            continue;
                        }
                        matrix.set(obstacle.pos.x, obstacle.pos.y, 0xff);
                    }
                }
            }
            if (options.roomCallback) {
                if (!matrix) {
                    matrix = new PathFinder.CostMatrix();
                }
                var outcome = options.roomCallback(roomName, matrix.clone());
                if (outcome !== undefined) {
                    return outcome;
                }
            }
            return matrix;
        };
        var ret = PathFinder.search(origin, { pos: destination, range: options.range }, {
            maxOps: options.maxOps,
            maxRooms: options.maxRooms,
            heuristicWeight: 1.2,
            plainCost: options.offRoad ? 1 : options.ignoreRoads ? 1 : 2,
            swampCost: options.offRoad ? 1 : options.ignoreRoads ? 5 : 10,
            roomCallback: callback,
        });
        if (ret.incomplete && options.ensurePath) {
            if (options.useFindRoute === undefined) {
                if (roomDistance <= 2) {
                    console.log("TRAVELER: path failed without findroute, trying with options.useFindRoute = true");
                    console.log("from: " + origin + ", destination: " + destination);
                    options.useFindRoute = true;
                    ret = this.findTravelPath(origin, destination, options);
                    console.log("TRAVELER: second attempt was " + (ret.incomplete ? "not " : "") + "successful");
                    return ret;
                }
            }
            else {
            }
        }
        return ret;
    };
    Traveler.findRoute = function (origin, destination, options) {
        if (options === void 0) { options = {}; }
        var restrictDistance = options.restrictDistance || Game.map.getRoomLinearDistance(origin, destination) + 10;
        var allowedRooms = (_a = {}, _a[origin] = true, _a[destination] = true, _a);
        var highwayBias = 1;
        if (options.preferHighway) {
            highwayBias = 2.5;
            if (options.highwayBias) {
                highwayBias = options.highwayBias;
            }
        }
        var ret = Game.map.findRoute(origin, destination, {
            routeCallback: function (roomName) {
                if (options.routeCallback) {
                    var outcome = options.routeCallback(roomName);
                    if (outcome !== undefined) {
                        return outcome;
                    }
                }
                if (Game.map.getRoomStatus(roomName).status != Game.map.getRoomStatus(origin).status) {
                    return Number.POSITIVE_INFINITY;
                }
                var rangeToRoom = Game.map.getRoomLinearDistance(origin, roomName);
                if (rangeToRoom > restrictDistance) {
                    return Number.POSITIVE_INFINITY;
                }
                if (!options.allowHostile && Traveler.checkAvoid(roomName) &&
                    roomName !== destination && roomName !== origin) {
                    return Number.POSITIVE_INFINITY;
                }
                var parsed;
                if (options.preferHighway) {
                    parsed = /^[WE]([0-9]+)[NS]([0-9]+)$/.exec(roomName);
                    var isHighway = (parsed[1] % 10 === 0) || (parsed[2] % 10 === 0);
                    if (isHighway) {
                        return 1;
                    }
                }
                if (!options.allowSK && !Game.rooms[roomName]) {
                    if (!parsed) {
                        parsed = /^[WE]([0-9]+)[NS]([0-9]+)$/.exec(roomName);
                    }
                    var fMod = parsed[1] % 10;
                    var sMod = parsed[2] % 10;
                    var isSK = !(fMod === 5 && sMod === 5) &&
                        ((fMod >= 4) && (fMod <= 6)) &&
                        ((sMod >= 4) && (sMod <= 6));
                    if (isSK) {
                        return 10 * highwayBias;
                    }
                }
                return highwayBias;
            },
        });
        if (!_.isArray(ret)) {
            console.log("couldn't findRoute to " + destination);
            return;
        }
        for (var _i = 0, ret_1 = ret; _i < ret_1.length; _i++) {
            var value = ret_1[_i];
            allowedRooms[value.room] = true;
        }
        return allowedRooms;
        var _a;
    };
    Traveler.routeDistance = function (origin, destination) {
        var linearDistance = Game.map.getRoomLinearDistance(origin, destination);
        if (linearDistance >= 32) {
            return linearDistance;
        }
        var allowedRooms = this.findRoute(origin, destination);
        if (allowedRooms) {
            return Object.keys(allowedRooms).length;
        }
    };
    Traveler.getStructureMatrix = function (room) {
        var matrix = new PathFinder.CostMatrix();
        return Traveler.addStructuresToMatrix(room, matrix, 1);
    };
    Traveler.getCreepMatrix = function (room) {
        return Traveler.addCreepsToMatrix(room, this.getStructureMatrix(room));
    };
    Traveler.addStructuresToMatrix = function (room, matrix, roadCost) {
        var impassibleStructures = [];
        for (var _i = 0, _a = room.find(FIND_STRUCTURES); _i < _a.length; _i++) {
            var structure = _a[_i];
            if (structure instanceof StructureRampart) {
                if (!structure.my) {
                    impassibleStructures.push(structure);
                }
            }
            else if (structure instanceof StructureRoad) {
                matrix.set(structure.pos.x, structure.pos.y, roadCost);
            }
            else if (structure instanceof StructureContainer) {
                matrix.set(structure.pos.x, structure.pos.y, 1);
            }
            else {
                impassibleStructures.push(structure);
            }
        }
        for (var _b = 0, _c = room.find(FIND_MY_CONSTRUCTION_SITES); _b < _c.length; _b++) {
            var site = _c[_b];
            if (site.structureType === STRUCTURE_CONTAINER || site.structureType === STRUCTURE_ROAD
                || site.structureType === STRUCTURE_RAMPART) {
                continue;
            }
            matrix.set(site.pos.x, site.pos.y, 0xff);
        }
        for (var _d = 0, impassibleStructures_1 = impassibleStructures; _d < impassibleStructures_1.length; _d++) {
            var structure = impassibleStructures_1[_d];
            matrix.set(structure.pos.x, structure.pos.y, 0xff);
        }
        return matrix;
    };
    Traveler.addCreepsToMatrix = function (room, matrix) {
        room.find(FIND_CREEPS).forEach(function (creep) { return matrix.set(creep.pos.x, creep.pos.y, 0xff); });
        return matrix;
    };
    Traveler.serializePath = function (startPos, path, color) {
        if (color === void 0) { color = "orange"; }
        var serializedPath = "";
        var lastPosition = startPos;
        this.circle(startPos, color);
        for (var _i = 0, path_1 = path; _i < path_1.length; _i++) {
            var position = path_1[_i];
            if (position.roomName === lastPosition.roomName) {
                serializedPath += lastPosition.getDirectionTo(position);
            }
            lastPosition = position;
        }
        return serializedPath;
    };
    Traveler.positionAtDirection = function (origin, direction) {
        var offsetX = [0, 0, 1, 1, 1, 0, -1, -1, -1];
        var offsetY = [0, -1, -1, 0, 1, 1, 1, 0, -1];
        var x = origin.x + offsetX[direction];
        var y = origin.y + offsetY[direction];
        if (x > 49 || x < 0 || y > 49 || y < 0) {
            return;
        }
        return new RoomPosition(x, y, origin.roomName);
    };
    Traveler.patchMemory = function (cleanup) {
        if (cleanup === void 0) { cleanup = false; }
        if (!Memory.empire) {
            return;
        }
        if (!Memory.empire.hostileRooms) {
            return;
        }
        var count = 0;
        for (var roomName in Memory.empire.hostileRooms) {
            if (Memory.empire.hostileRooms[roomName]) {
                if (!Memory.rooms[roomName]) {
                    Memory.rooms[roomName] = {};
                }
                Memory.rooms[roomName].avoid = 1;
                count++;
            }
            if (cleanup) {
                delete Memory.empire.hostileRooms[roomName];
            }
        }
        if (cleanup) {
            delete Memory.empire.hostileRooms;
        }
        console.log("TRAVELER: room avoidance data patched for " + count + " rooms");
    };
    Traveler.deserializeState = function (travelData, destination) {
        var state = {};
        if (travelData.state) {
            state.lastCoord = { x: travelData.state[STATE_PREV_X], y: travelData.state[STATE_PREV_Y] };
            state.cpu = travelData.state[STATE_CPU];
            state.stuckCount = travelData.state[STATE_STUCK];
            state.destination = new RoomPosition(travelData.state[STATE_DEST_X], travelData.state[STATE_DEST_Y], travelData.state[STATE_DEST_ROOMNAME]);
        }
        else {
            state.cpu = 0;
            state.destination = destination;
        }
        return state;
    };
    Traveler.serializeState = function (creep, destination, state, travelData) {
        travelData.state = [creep.pos.x, creep.pos.y, state.stuckCount, state.cpu, destination.x, destination.y,
            destination.roomName];
    };
    Traveler.isStuck = function (creep, state) {
        var stuck = false;
        if (state.lastCoord !== undefined) {
            if (this.sameCoord(creep.pos, state.lastCoord)) {
                stuck = true;
            }
            else if (this.isExit(creep.pos) && this.isExit(state.lastCoord)) {
                stuck = true;
            }
        }
        return stuck;
    };
    return Traveler;
}());
exports.Traveler = Traveler;
var DEFAULT_MAXOPS = 20000;
var DEFAULT_STUCK_VALUE = 2;
var STATE_PREV_X = 0;
var STATE_PREV_Y = 1;
var STATE_STUCK = 2;
var STATE_CPU = 3;
var STATE_DEST_X = 4;
var STATE_DEST_Y = 5;
var STATE_DEST_ROOMNAME = 6;


/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var CreepAnalyzer_1 = __webpack_require__(15);
var TickCache_1 = __webpack_require__(1);
var BattleFieldAnalyzer = (function () {
    function BattleFieldAnalyzer() {
    }
    BattleFieldAnalyzer.TowerDamagePower = function (range) {
        var effect = TOWER_POWER_ATTACK;
        if (range > TOWER_OPTIMAL_RANGE) {
            if (range > TOWER_FALLOFF_RANGE) {
                range = TOWER_FALLOFF_RANGE;
            }
            effect -= effect * TOWER_FALLOFF * (range - TOWER_OPTIMAL_RANGE) / (TOWER_FALLOFF_RANGE - TOWER_OPTIMAL_RANGE);
        }
        return Math.floor(effect);
    };
    BattleFieldAnalyzer.TowerHealPower = function (range) {
        var effect = TOWER_POWER_HEAL;
        if (range > TOWER_OPTIMAL_RANGE) {
            if (range > TOWER_FALLOFF_RANGE) {
                range = TOWER_FALLOFF_RANGE;
            }
            effect -= effect * TOWER_FALLOFF * (range - TOWER_OPTIMAL_RANGE) / (TOWER_FALLOFF_RANGE - TOWER_OPTIMAL_RANGE);
        }
        return Math.floor(effect);
    };
    BattleFieldAnalyzer.threatsCurrentMatrix = function (room) {
        var my = BattleFieldAnalyzer.emptyThreatsMatrix();
        var enemy = BattleFieldAnalyzer.emptyThreatsMatrix();
        var ramparts = TickCache_1.__find(room, FIND_STRUCTURES, {
            filter: function (s) { return s.structureType == STRUCTURE_RAMPART; }
        });
        var rampartsDictionary = {};
        for (var _i = 0, ramparts_1 = ramparts; _i < ramparts_1.length; _i++) {
            var rampart = ramparts_1[_i];
            rampartsDictionary[rampart.pos.pack()] = rampart;
        }
        var towers = TickCache_1.__find(room, FIND_STRUCTURES, {
            filter: function (s) { return s.structureType == STRUCTURE_TOWER; }
        });
        var creeps = TickCache_1.__find(room, FIND_CREEPS, {
            filter: function (c) { return c.getActiveBodyparts(ATTACK) + c.getActiveBodyparts(RANGED_ATTACK) + c.getActiveBodyparts(TOUGH) > 0; }
        });
        _.forEach(creeps, function (creep) {
            var threat = CreepAnalyzer_1.CreepAnalyzer.GetThreatLevel(creep, false);
            var matrix = creep.my ? my : enemy;
            _.forEach(creep.pos.around(3), function (p) {
                var pp = p.pack();
                if (!(Game.map.getRoomTerrain(room.name).get(p.x, p.y) & TERRAIN_MASK_WALL)) {
                    matrix[p.x][p.y].RangedThreat += threat.RangedThreat;
                    if (creep.pos.isNearTo(p)) {
                        if ((rampartsDictionary[pp] != null) && (rampartsDictionary[pp].owner.username != creep.owner.username)) {
                            matrix[p.x][p.y].DismantleThreat += threat.DismantleThreat;
                        }
                        matrix[p.x][p.y].MeleeThreat += threat.MeleeThreat;
                        matrix[p.x][p.y].HealThreat += threat.HealThreat;
                    }
                    else {
                        matrix[p.x][p.y].HealThreat += (threat.HealThreat / 3);
                    }
                }
            });
        });
        if (_.some(towers)) {
            _.forEach(creeps, function (creep) {
                _.forEach(creep.pos.around(1), function (p) {
                    if (!(Game.map.getRoomTerrain(room.name).get(p.x, p.y) & TERRAIN_MASK_WALL)) {
                        var towerMatrix_1 = _.first(towers).my ? my : enemy;
                        _.forEach(towers, function (t) {
                            towerMatrix_1[p.x][p.y].RangedThreat += BattleFieldAnalyzer.TowerDamagePower(t.pos.getRangeTo(p));
                            towerMatrix_1[p.x][p.y].HealThreat += BattleFieldAnalyzer.TowerHealPower(t.pos.getRangeTo(p));
                        });
                    }
                });
            });
        }
        return { my: my, enemy: enemy };
    };
    BattleFieldAnalyzer.emptyThreatsMatrix = function () {
        var result = [];
        for (var i = 0; i < 50; i++) {
            result[i] = [];
            for (var j = 0; j < 50; j++) {
                result[i][j] = {
                    DismantleThreat: 0,
                    MeleeThreat: 0,
                    RangedThreat: 0,
                    HealThreat: 0,
                    EffectiveHp: 0
                };
            }
        }
        return result;
    };
    return BattleFieldAnalyzer;
}());
exports.BattleFieldAnalyzer = BattleFieldAnalyzer;


/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Formation_1 = __webpack_require__(33);
var Square2Formation = (function (_super) {
    __extends(Square2Formation, _super);
    function Square2Formation() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(Square2Formation.prototype, "TemplatedPositions", {
        get: function () {
            return [
                { dx: 0, dy: 0 },
                { dx: 1, dy: 0 },
                { dx: 0, dy: 1 },
                { dx: 1, dy: 1 },
            ];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Square2Formation.prototype, "Size", {
        get: function () {
            return 2;
        },
        enumerable: true,
        configurable: true
    });
    return Square2Formation;
}(Formation_1.Formation));
exports.default = Square2Formation;


/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Nano9Squad_1 = __webpack_require__(95);
var SquadFactory = (function () {
    function SquadFactory() {
    }
    SquadFactory.CreateSquad = function (data) {
        switch (data.squadType) {
            case 'nano9': return new Nano9Squad_1.default(data);
        }
        return null;
    };
    return SquadFactory;
}());
exports.default = SquadFactory;


/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Squad_1 = __webpack_require__(26);
var Square3Formation_1 = __webpack_require__(50);
var Nano9Squad = (function (_super) {
    __extends(Nano9Squad, _super);
    function Nano9Squad(data) {
        return _super.call(this, data) || this;
    }
    Nano9Squad.prototype.Rotate = function (newFacing) {
        var actualFacing = this.GetActualFacing();
        var centralCreep = this.CentralCreep;
        if (newFacing != actualFacing) {
            _.forEach(_.without(_.compact(this.Members), this.CentralCreep), function (c) {
                var rotateTo = (((newFacing - actualFacing + 8) % 8) < 4) ?
                    Square3Formation_1.default.ClockwiseDirection(centralCreep.pos.getDirectionTo(c)) :
                    Square3Formation_1.default.CounterClockwiseDirection(centralCreep.pos.getDirectionTo(c));
                c.move(rotateTo);
            });
            return true;
        }
        return false;
    };
    Nano9Squad.prototype.move = function (direction) {
        var facing = this.GetActualFacing();
        if (this.isFacingCompatible(facing, direction)) {
            _.forEach(_.compact(this.Members), function (m) { return m.move(direction); });
            return OK;
        }
        this._data.currentFacing = 1 + 2 * Math.floor((direction - 1) / 2);
        if (this.Rotate(direction)) {
            return ERR_BUSY;
        }
    };
    Nano9Squad.prototype.isFacingCompatible = function (actual, expected) {
        return ((actual % 2) == 1) && (Math.abs(actual - expected) < 2);
    };
    Nano9Squad.prototype.Work = function () {
    };
    Object.defineProperty(Nano9Squad.prototype, "CreepsSetups", {
        get: function () {
            return [
                'unboostedMelee/1m1a', 'unboostedHealer/1m1h', 'unboostedRanger/1m1r',
                'unboostedMelee/1m1a', 'unboostedHealer/1m1h', 'unboostedRanger/1m1r',
                'unboostedMelee/1m1a', 'unboostedHealer/1m1h', 'unboostedRanger/1m1r',
            ];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Nano9Squad.prototype, "ChunkSize", {
        get: function () {
            return 3;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Nano9Squad.prototype, "formationId", {
        get: function () {
            return 'square3';
        },
        enumerable: true,
        configurable: true
    });
    return Nano9Squad;
}(Squad_1.Squad));
exports.default = Nano9Squad;


/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var TickCache_1 = __webpack_require__(1);
var Bunker_1 = __webpack_require__(53);
var initialRoads = [
    { level: 1, structureType: STRUCTURE_ROAD, dx: -1, dy: 1 },
    { level: 1, structureType: STRUCTURE_ROAD, dx: 1, dy: 1 },
    { level: 1, structureType: STRUCTURE_ROAD, dx: -1, dy: -1 },
    { level: 1, structureType: STRUCTURE_ROAD, dx: 1, dy: -1 },
    { level: 1, structureType: STRUCTURE_ROAD, dx: 0, dy: 3 },
    { level: 1, structureType: STRUCTURE_ROAD, dx: 1, dy: 2 },
    { level: 1, structureType: STRUCTURE_ROAD, dx: 2, dy: 1 },
    { level: 1, structureType: STRUCTURE_ROAD, dx: 3, dy: 0 },
    { level: 1, structureType: STRUCTURE_ROAD, dx: 2, dy: -1 },
    { level: 1, structureType: STRUCTURE_ROAD, dx: 1, dy: -2 },
    { level: 1, structureType: STRUCTURE_ROAD, dx: 0, dy: -3 },
    { level: 1, structureType: STRUCTURE_ROAD, dx: -1, dy: -2 },
    { level: 1, structureType: STRUCTURE_ROAD, dx: -2, dy: -1 },
    { level: 1, structureType: STRUCTURE_ROAD, dx: -3, dy: 0 },
    { level: 1, structureType: STRUCTURE_ROAD, dx: -2, dy: 1 },
    { level: 1, structureType: STRUCTURE_ROAD, dx: -1, dy: 2 },
    { level: 1, structureType: STRUCTURE_ROAD, dx: 0, dy: 3 },
    { level: 1, structureType: STRUCTURE_ROAD, dx: 1, dy: 0 },
];
var ring1Roads = [
    { level: 4, structureType: STRUCTURE_ROAD, dx: -4, dy: 1 },
    { level: 4, structureType: STRUCTURE_ROAD, dx: -5, dy: 2 },
    { level: 4, structureType: STRUCTURE_ROAD, dx: -4, dy: 3 },
    { level: 4, structureType: STRUCTURE_ROAD, dx: -3, dy: 4 },
    { level: 4, structureType: STRUCTURE_ROAD, dx: -2, dy: 5 },
    { level: 4, structureType: STRUCTURE_ROAD, dx: -1, dy: 4 },
];
var ring2Roads = [
    { level: 5, structureType: STRUCTURE_ROAD, dx: 4, dy: -1 },
    { level: 5, structureType: STRUCTURE_ROAD, dx: 5, dy: -2 },
    { level: 5, structureType: STRUCTURE_ROAD, dx: 4, dy: -3 },
    { level: 5, structureType: STRUCTURE_ROAD, dx: 3, dy: -4 },
    { level: 5, structureType: STRUCTURE_ROAD, dx: 2, dy: -5 },
    { level: 5, structureType: STRUCTURE_ROAD, dx: 1, dy: -4 },
];
var ring1Ext = [
    { level: 4, structureType: STRUCTURE_EXTENSION, dx: -3, dy: 1 },
    { level: 4, structureType: STRUCTURE_EXTENSION, dx: -3, dy: 2 },
    { level: 4, structureType: STRUCTURE_EXTENSION, dx: -2, dy: 3 },
    { level: 4, structureType: STRUCTURE_EXTENSION, dx: -1, dy: 3 },
    { level: 4, structureType: STRUCTURE_EXTENSION, dx: -4, dy: 2 },
    { level: 4, structureType: STRUCTURE_EXTENSION, dx: -3, dy: 3 },
    { level: 4, structureType: STRUCTURE_EXTENSION, dx: -2, dy: 4 },
    { level: 4, structureType: STRUCTURE_EXTENSION, dx: -3, dy: 5 },
    { level: 4, structureType: STRUCTURE_EXTENSION, dx: -4, dy: 4 },
    { level: 4, structureType: STRUCTURE_EXTENSION, dx: -5, dy: 3 },
    { level: 4, structureType: STRUCTURE_EXTENSION, dx: 0, dy: 4 },
    { level: 4, structureType: STRUCTURE_EXTENSION, dx: 0, dy: 5 },
    { level: 4, structureType: STRUCTURE_EXTENSION, dx: -1, dy: 5 },
    { level: 4, structureType: STRUCTURE_EXTENSION, dx: -2, dy: 6 },
    { level: 4, structureType: STRUCTURE_EXTENSION, dx: -4, dy: 5 },
    { level: 4, structureType: STRUCTURE_EXTENSION, dx: -5, dy: 4 },
    { level: 4, structureType: STRUCTURE_EXTENSION, dx: -6, dy: 2 },
    { level: 4, structureType: STRUCTURE_EXTENSION, dx: -5, dy: 1 },
    { level: 4, structureType: STRUCTURE_EXTENSION, dx: -5, dy: 0 },
    { level: 4, structureType: STRUCTURE_EXTENSION, dx: -4, dy: 0 },
];
var ring2Ext = [
    { level: 5, structureType: STRUCTURE_EXTENSION, dx: 3, dy: -1 },
    { level: 5, structureType: STRUCTURE_EXTENSION, dx: 3, dy: -2 },
    { level: 5, structureType: STRUCTURE_EXTENSION, dx: 2, dy: -3 },
    { level: 5, structureType: STRUCTURE_EXTENSION, dx: 1, dy: -3 },
    { level: 5, structureType: STRUCTURE_EXTENSION, dx: 4, dy: -2 },
    { level: 5, structureType: STRUCTURE_EXTENSION, dx: 3, dy: -3 },
    { level: 5, structureType: STRUCTURE_EXTENSION, dx: 2, dy: -4 },
    { level: 5, structureType: STRUCTURE_EXTENSION, dx: 3, dy: -5 },
    { level: 5, structureType: STRUCTURE_EXTENSION, dx: 4, dy: -4 },
    { level: 5, structureType: STRUCTURE_EXTENSION, dx: 5, dy: -3 },
    { level: 6, structureType: STRUCTURE_EXTENSION, dx: 0, dy: -4 },
    { level: 6, structureType: STRUCTURE_EXTENSION, dx: 0, dy: -5 },
    { level: 6, structureType: STRUCTURE_EXTENSION, dx: 1, dy: -5 },
    { level: 6, structureType: STRUCTURE_EXTENSION, dx: 2, dy: -6 },
    { level: 6, structureType: STRUCTURE_EXTENSION, dx: 4, dy: -5 },
    { level: 6, structureType: STRUCTURE_EXTENSION, dx: 5, dy: -4 },
    { level: 6, structureType: STRUCTURE_EXTENSION, dx: 6, dy: -2 },
    { level: 6, structureType: STRUCTURE_EXTENSION, dx: 5, dy: -1 },
    { level: 6, structureType: STRUCTURE_EXTENSION, dx: 5, dy: -0 },
    { level: 6, structureType: STRUCTURE_EXTENSION, dx: 4, dy: -0 },
];
var ring3Roads = [
    { level: 7, structureType: STRUCTURE_ROAD, dx: -4, dy: -1 },
    { level: 7, structureType: STRUCTURE_ROAD, dx: -5, dy: -2 },
    { level: 7, structureType: STRUCTURE_ROAD, dx: -4, dy: -3 },
    { level: 7, structureType: STRUCTURE_ROAD, dx: -3, dy: -4 },
    { level: 7, structureType: STRUCTURE_ROAD, dx: -2, dy: -5 },
    { level: 7, structureType: STRUCTURE_ROAD, dx: -1, dy: -4 },
];
var labRoads = [
    { level: 7, structureType: STRUCTURE_ROAD, dx: 4, dy: 1 },
    { level: 7, structureType: STRUCTURE_ROAD, dx: 5, dy: 2 },
    { level: 7, structureType: STRUCTURE_ROAD, dx: 4, dy: 3 },
    { level: 7, structureType: STRUCTURE_ROAD, dx: 3, dy: 4 },
    { level: 7, structureType: STRUCTURE_ROAD, dx: 2, dy: 5 },
    { level: 7, structureType: STRUCTURE_ROAD, dx: 1, dy: 4 },
];
var labs = [
    { level: 8, structureType: STRUCTURE_LAB, dx: 2, dy: 4 },
    { level: 8, structureType: STRUCTURE_LAB, dx: 3, dy: 5 },
    { level: 8, structureType: STRUCTURE_LAB, dx: 2, dy: 3 },
    { level: 8, structureType: STRUCTURE_LAB, dx: 4, dy: 5 },
    { level: 8, structureType: STRUCTURE_LAB, dx: 3, dy: 3 },
    { level: 8, structureType: STRUCTURE_LAB, dx: 4, dy: 4 },
    { level: 8, structureType: STRUCTURE_LAB, dx: 3, dy: 2 },
    { level: 8, structureType: STRUCTURE_LAB, dx: 5, dy: 4 },
    { level: 8, structureType: STRUCTURE_LAB, dx: 4, dy: 2 },
    { level: 8, structureType: STRUCTURE_LAB, dx: 5, dy: 3 },
];
function onCompleted(room) {
    var smile = _.union(TickCache_1.__find(room, FIND_STRUCTURES, {
        filter: function (s) { return (s.structureType == STRUCTURE_RAMPART) && s.pos.isEqualTo(room.storage.pos.x - 1, room.storage.pos.y + 2); }
    }), TickCache_1.__find(room, FIND_STRUCTURES, {
        filter: function (s) { return (s.structureType == STRUCTURE_RAMPART) && s.pos.isEqualTo(room.storage.pos.x, room.storage.pos.y + 3); }
    }), TickCache_1.__find(room, FIND_STRUCTURES, {
        filter: function (s) { return (s.structureType == STRUCTURE_RAMPART) && s.pos.isEqualTo(room.storage.pos.x + 1, room.storage.pos.y + 2); }
    }));
    var eyes = _.union(TickCache_1.__find(room, FIND_STRUCTURES, {
        filter: function (s) { return (s.structureType == STRUCTURE_RAMPART) && s.pos.isEqualTo(room.storage.pos.x - 2, room.storage.pos.y - 1); }
    }), TickCache_1.__find(room, FIND_STRUCTURES, {
        filter: function (s) { return (s.structureType == STRUCTURE_RAMPART) && s.pos.isEqualTo(room.storage.pos.x + 2, room.storage.pos.y - 1); }
    }));
    var eyebrows = _.union(TickCache_1.__find(room, FIND_STRUCTURES, {
        filter: function (s) { return (s.structureType == STRUCTURE_RAMPART) && s.pos.isEqualTo(room.storage.pos.x - 3, room.storage.pos.y - 4); }
    }), TickCache_1.__find(room, FIND_STRUCTURES, {
        filter: function (s) { return (s.structureType == STRUCTURE_RAMPART) && s.pos.isEqualTo(room.storage.pos.x - 2, room.storage.pos.y - 5); }
    }), TickCache_1.__find(room, FIND_STRUCTURES, {
        filter: function (s) { return (s.structureType == STRUCTURE_RAMPART) && s.pos.isEqualTo(room.storage.pos.x - 1, room.storage.pos.y - 4); }
    }), TickCache_1.__find(room, FIND_STRUCTURES, {
        filter: function (s) { return (s.structureType == STRUCTURE_RAMPART) && s.pos.isEqualTo(room.storage.pos.x + 3, room.storage.pos.y - 4); }
    }), TickCache_1.__find(room, FIND_STRUCTURES, {
        filter: function (s) { return (s.structureType == STRUCTURE_RAMPART) && s.pos.isEqualTo(room.storage.pos.x + 2, room.storage.pos.y - 5); }
    }), TickCache_1.__find(room, FIND_STRUCTURES, {
        filter: function (s) { return (s.structureType == STRUCTURE_RAMPART) && s.pos.isEqualTo(room.storage.pos.x + 1, room.storage.pos.y - 4); }
    }));
    var publicRamparts = smile.concat(eyes, eyebrows);
    _.forEach(publicRamparts, function (r) { return r.setPublic(true); });
}
var BunkerA = {
    Name: 'BunkerA',
    Items: initialRoads.concat([
        { level: 3, structureType: STRUCTURE_TOWER, dx: 0, dy: 1 },
        { level: 4, structureType: STRUCTURE_STORAGE, dx: 0, dy: 0 },
        { level: 4, structureType: STRUCTURE_CONTAINER, dx: -1, dy: 2 }
    ], ring1Roads, ring1Ext, ring2Roads, [
        { level: 5, structureType: STRUCTURE_TOWER, dx: -1, dy: 0 },
        { level: 5, structureType: STRUCTURE_LINK, dx: 2, dy: 0 },
        { level: 5, structureType: STRUCTURE_CONTAINER, dx: 2, dy: -1 }
    ], ring2Ext, [
        { level: 7, structureType: STRUCTURE_CONTAINER, dx: -2, dy: -1 },
        { level: 7, structureType: STRUCTURE_TOWER, dx: 0, dy: -1 }
    ], ring3Roads, [
        { level: 7, structureType: STRUCTURE_EXTENSION, dx: -3, dy: -1 },
        { level: 7, structureType: STRUCTURE_EXTENSION, dx: -3, dy: -2 },
        { level: 7, structureType: STRUCTURE_EXTENSION, dx: -2, dy: -3 },
        { level: 7, structureType: STRUCTURE_EXTENSION, dx: -1, dy: -3 },
        { level: 7, structureType: STRUCTURE_EXTENSION, dx: -4, dy: -2 },
        { level: 7, structureType: STRUCTURE_EXTENSION, dx: -3, dy: -3 },
        { level: 7, structureType: STRUCTURE_EXTENSION, dx: -2, dy: -4 },
        { level: 7, structureType: STRUCTURE_EXTENSION, dx: -5, dy: -3 },
        { level: 7, structureType: STRUCTURE_EXTENSION, dx: -4, dy: -4 },
        { level: 7, structureType: STRUCTURE_EXTENSION, dx: -3, dy: -5 }
    ], Bunker_1.headRamparts, Bunker_1.layer1, [
        { level: 8, structureType: STRUCTURE_TOWER, dx: -2, dy: 2 },
        { level: 8, structureType: STRUCTURE_TOWER, dx: -2, dy: -2 },
        { level: 8, structureType: STRUCTURE_TOWER, dx: 2, dy: -2 },
        { level: 8, structureType: STRUCTURE_EXTENSION, dx: -5, dy: -1 },
        { level: 8, structureType: STRUCTURE_EXTENSION, dx: -6, dy: -2 },
        { level: 8, structureType: STRUCTURE_EXTENSION, dx: -5, dy: -4 },
        { level: 8, structureType: STRUCTURE_EXTENSION, dx: -4, dy: -5 },
        { level: 8, structureType: STRUCTURE_EXTENSION, dx: -2, dy: -6 },
        { level: 8, structureType: STRUCTURE_EXTENSION, dx: -1, dy: -5 }
    ], labRoads, [
        { level: 8, structureType: STRUCTURE_OBSERVER, dx: -5, dy: 5 }
    ], labs, Bunker_1.layer2, Bunker_1.layer3, Bunker_1.innerRamparts),
    onCompleted: onCompleted
};
function getBunkerA() {
    return BunkerA;
}
exports.default = getBunkerA;


/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var TickCache_1 = __webpack_require__(1);
var Bunker_1 = __webpack_require__(53);
var initialRoads = [
    { level: 1, structureType: STRUCTURE_ROAD, dx: -1, dy: 1 },
    { level: 1, structureType: STRUCTURE_ROAD, dx: 1, dy: 1 },
    { level: 1, structureType: STRUCTURE_ROAD, dx: -1, dy: -1 },
    { level: 1, structureType: STRUCTURE_ROAD, dx: 1, dy: -1 },
    { level: 1, structureType: STRUCTURE_ROAD, dx: 0, dy: 3 },
    { level: 1, structureType: STRUCTURE_ROAD, dx: 1, dy: 2 },
    { level: 1, structureType: STRUCTURE_ROAD, dx: 2, dy: 1 },
    { level: 1, structureType: STRUCTURE_ROAD, dx: 3, dy: 0 },
    { level: 1, structureType: STRUCTURE_ROAD, dx: 2, dy: -1 },
    { level: 1, structureType: STRUCTURE_ROAD, dx: 1, dy: -2 },
    { level: 1, structureType: STRUCTURE_ROAD, dx: 0, dy: -3 },
    { level: 1, structureType: STRUCTURE_ROAD, dx: -1, dy: -2 },
    { level: 1, structureType: STRUCTURE_ROAD, dx: -2, dy: -1 },
    { level: 1, structureType: STRUCTURE_ROAD, dx: -3, dy: 0 },
    { level: 1, structureType: STRUCTURE_ROAD, dx: -2, dy: 1 },
    { level: 1, structureType: STRUCTURE_ROAD, dx: -1, dy: 2 },
    { level: 1, structureType: STRUCTURE_ROAD, dx: 0, dy: 3 },
];
var ring1Roads = [
    { level: 7, structureType: STRUCTURE_ROAD, dx: -4, dy: 1 },
    { level: 7, structureType: STRUCTURE_ROAD, dx: -5, dy: 2 },
    { level: 7, structureType: STRUCTURE_ROAD, dx: -5, dy: 3 },
    { level: 7, structureType: STRUCTURE_ROAD, dx: -4, dy: 4 },
    { level: 7, structureType: STRUCTURE_ROAD, dx: -3, dy: 5 },
    { level: 7, structureType: STRUCTURE_ROAD, dx: -2, dy: 5 },
    { level: 7, structureType: STRUCTURE_ROAD, dx: -1, dy: 4 },
];
var ring1Ext = [
    { level: 6, structureType: STRUCTURE_EXTENSION, dx: -5, dy: 0 },
    { level: 7, structureType: STRUCTURE_EXTENSION, dx: -3, dy: 1 },
    { level: 7, structureType: STRUCTURE_EXTENSION, dx: -3, dy: 2 },
    { level: 7, structureType: STRUCTURE_EXTENSION, dx: -2, dy: 3 },
    { level: 7, structureType: STRUCTURE_EXTENSION, dx: -1, dy: 3 },
    { level: 7, structureType: STRUCTURE_EXTENSION, dx: -4, dy: 2 },
    { level: 7, structureType: STRUCTURE_EXTENSION, dx: -4, dy: 3 },
    { level: 7, structureType: STRUCTURE_EXTENSION, dx: -3, dy: 4 },
    { level: 7, structureType: STRUCTURE_EXTENSION, dx: -2, dy: 4 },
    { level: 7, structureType: STRUCTURE_EXTENSION, dx: -3, dy: 3 },
    { level: 7, structureType: STRUCTURE_EXTENSION, dx: -5, dy: 5 },
    { level: 8, structureType: STRUCTURE_EXTENSION, dx: -4, dy: 5 },
    { level: 8, structureType: STRUCTURE_EXTENSION, dx: -5, dy: 4 },
    { level: 8, structureType: STRUCTURE_EXTENSION, dx: -3, dy: 6 },
    { level: 8, structureType: STRUCTURE_EXTENSION, dx: -2, dy: 6 },
    { level: 8, structureType: STRUCTURE_EXTENSION, dx: -1, dy: 5 },
    { level: 8, structureType: STRUCTURE_EXTENSION, dx: 0, dy: 5 },
    { level: 8, structureType: STRUCTURE_EXTENSION, dx: -6, dy: 2 },
    { level: 8, structureType: STRUCTURE_EXTENSION, dx: -6, dy: 3 },
    { level: 8, structureType: STRUCTURE_EXTENSION, dx: -5, dy: 1 },
];
var ring2Roads = [
    { level: 4, structureType: STRUCTURE_ROAD, dx: 4, dy: -1 },
    { level: 4, structureType: STRUCTURE_ROAD, dx: 5, dy: -2 },
    { level: 4, structureType: STRUCTURE_ROAD, dx: 5, dy: -3 },
    { level: 4, structureType: STRUCTURE_ROAD, dx: 4, dy: -4 },
    { level: 4, structureType: STRUCTURE_ROAD, dx: 3, dy: -5 },
    { level: 4, structureType: STRUCTURE_ROAD, dx: 2, dy: -5 },
    { level: 4, structureType: STRUCTURE_ROAD, dx: 1, dy: -4 },
];
var ring2Ext = [
    { level: 3, structureType: STRUCTURE_CONTAINER, dx: 2, dy: -1 },
    { level: 2, structureType: STRUCTURE_EXTENSION, dx: 2, dy: -3 },
    { level: 2, structureType: STRUCTURE_EXTENSION, dx: 3, dy: -2 },
    { level: 2, structureType: STRUCTURE_EXTENSION, dx: 3, dy: -1 },
    { level: 2, structureType: STRUCTURE_EXTENSION, dx: 3, dy: -3 },
    { level: 2, structureType: STRUCTURE_EXTENSION, dx: 1, dy: -3 },
    { level: 3, structureType: STRUCTURE_EXTENSION, dx: 2, dy: -4 },
    { level: 3, structureType: STRUCTURE_EXTENSION, dx: 3, dy: -4 },
    { level: 3, structureType: STRUCTURE_EXTENSION, dx: 4, dy: -3 },
    { level: 3, structureType: STRUCTURE_EXTENSION, dx: 4, dy: -2 },
    { level: 3, structureType: STRUCTURE_EXTENSION, dx: 5, dy: -5 },
    { level: 4, structureType: STRUCTURE_EXTENSION, dx: 5, dy: -4 },
    { level: 4, structureType: STRUCTURE_EXTENSION, dx: 4, dy: -5 },
    { level: 4, structureType: STRUCTURE_EXTENSION, dx: 6, dy: -3 },
    { level: 4, structureType: STRUCTURE_EXTENSION, dx: 6, dy: -2 },
    { level: 4, structureType: STRUCTURE_EXTENSION, dx: 5, dy: -1 },
    { level: 4, structureType: STRUCTURE_EXTENSION, dx: 5, dy: 0 },
    { level: 4, structureType: STRUCTURE_EXTENSION, dx: 2, dy: -6 },
    { level: 4, structureType: STRUCTURE_EXTENSION, dx: 3, dy: -6 },
    { level: 4, structureType: STRUCTURE_EXTENSION, dx: 4, dy: 0 },
    { level: 4, structureType: STRUCTURE_EXTENSION, dx: 1, dy: -5 },
];
var ring3Roads = [
    { level: 5, structureType: STRUCTURE_ROAD, dx: -4, dy: -1 },
    { level: 5, structureType: STRUCTURE_ROAD, dx: -5, dy: -2 },
    { level: 5, structureType: STRUCTURE_ROAD, dx: -5, dy: -3 },
    { level: 5, structureType: STRUCTURE_ROAD, dx: -4, dy: -4 },
    { level: 5, structureType: STRUCTURE_ROAD, dx: -3, dy: -5 },
    { level: 5, structureType: STRUCTURE_ROAD, dx: -2, dy: -5 },
    { level: 5, structureType: STRUCTURE_ROAD, dx: -1, dy: -4 },
];
var ring3Ext = [
    { level: 5, structureType: STRUCTURE_EXTENSION, dx: -3, dy: -1 },
    { level: 5, structureType: STRUCTURE_EXTENSION, dx: -3, dy: -2 },
    { level: 5, structureType: STRUCTURE_EXTENSION, dx: -2, dy: -3 },
    { level: 5, structureType: STRUCTURE_EXTENSION, dx: -1, dy: -3 },
    { level: 5, structureType: STRUCTURE_EXTENSION, dx: -3, dy: -3 },
    { level: 5, structureType: STRUCTURE_EXTENSION, dx: -4, dy: -2 },
    { level: 5, structureType: STRUCTURE_EXTENSION, dx: -4, dy: -3 },
    { level: 5, structureType: STRUCTURE_EXTENSION, dx: -3, dy: -4 },
    { level: 5, structureType: STRUCTURE_EXTENSION, dx: -2, dy: -4 },
    { level: 5, structureType: STRUCTURE_EXTENSION, dx: -5, dy: -5 },
    { level: 6, structureType: STRUCTURE_EXTENSION, dx: -4, dy: 0 },
    { level: 6, structureType: STRUCTURE_EXTENSION, dx: -5, dy: -1 },
    { level: 6, structureType: STRUCTURE_EXTENSION, dx: -6, dy: -2 },
    { level: 6, structureType: STRUCTURE_EXTENSION, dx: -6, dy: -3 },
    { level: 6, structureType: STRUCTURE_EXTENSION, dx: -5, dy: -4 },
    { level: 6, structureType: STRUCTURE_EXTENSION, dx: -4, dy: -5 },
    { level: 6, structureType: STRUCTURE_EXTENSION, dx: -3, dy: -6 },
    { level: 6, structureType: STRUCTURE_EXTENSION, dx: -2, dy: -6 },
    { level: 6, structureType: STRUCTURE_EXTENSION, dx: -1, dy: -5 },
    { level: 8, structureType: STRUCTURE_EXTENSION, dx: 0, dy: 4 },
];
var cornerRoads = [
    { level: 8, structureType: STRUCTURE_ROAD, dx: -4, dy: 6 },
    { level: 8, structureType: STRUCTURE_ROAD, dx: -5, dy: 6 },
    { level: 8, structureType: STRUCTURE_ROAD, dx: -6, dy: 5 },
    { level: 8, structureType: STRUCTURE_ROAD, dx: -6, dy: 4 },
    { level: 8, structureType: STRUCTURE_ROAD, dx: -4, dy: -6 },
    { level: 8, structureType: STRUCTURE_ROAD, dx: -5, dy: -6 },
    { level: 8, structureType: STRUCTURE_ROAD, dx: -6, dy: -5 },
    { level: 8, structureType: STRUCTURE_ROAD, dx: -6, dy: -4 },
    { level: 8, structureType: STRUCTURE_ROAD, dx: 4, dy: -6 },
    { level: 8, structureType: STRUCTURE_ROAD, dx: 5, dy: -6 },
    { level: 8, structureType: STRUCTURE_ROAD, dx: 6, dy: -5 },
    { level: 8, structureType: STRUCTURE_ROAD, dx: 6, dy: -4 },
];
var labRoads = [
    { level: 6, structureType: STRUCTURE_ROAD, dx: 1, dy: 5 },
    { level: 6, structureType: STRUCTURE_ROAD, dx: 1, dy: 4 },
    { level: 6, structureType: STRUCTURE_ROAD, dx: 2, dy: 3 },
    { level: 6, structureType: STRUCTURE_ROAD, dx: 3, dy: 2 },
    { level: 6, structureType: STRUCTURE_ROAD, dx: 4, dy: 1 },
    { level: 6, structureType: STRUCTURE_ROAD, dx: 5, dy: 1 },
    { level: 6, structureType: STRUCTURE_ROAD, dx: 3, dy: 3 },
    { level: 6, structureType: STRUCTURE_ROAD, dx: 4, dy: 4 },
    { level: 6, structureType: STRUCTURE_ROAD, dx: 5, dy: 5 },
    { level: 8, structureType: STRUCTURE_ROAD, dx: 6, dy: 5 },
    { level: 8, structureType: STRUCTURE_ROAD, dx: 6, dy: 4 },
    { level: 8, structureType: STRUCTURE_ROAD, dx: 6, dy: 3 },
    { level: 8, structureType: STRUCTURE_ROAD, dx: 6, dy: 2 },
    { level: 8, structureType: STRUCTURE_ROAD, dx: 6, dy: 1 },
    { level: 8, structureType: STRUCTURE_ROAD, dx: 6, dy: 0 },
    { level: 8, structureType: STRUCTURE_ROAD, dx: 6, dy: -1 },
    { level: 8, structureType: STRUCTURE_ROAD, dx: 5, dy: 6 },
    { level: 8, structureType: STRUCTURE_ROAD, dx: 4, dy: 6 },
    { level: 8, structureType: STRUCTURE_ROAD, dx: 3, dy: 6 },
    { level: 8, structureType: STRUCTURE_ROAD, dx: 2, dy: 6 },
    { level: 8, structureType: STRUCTURE_ROAD, dx: 1, dy: 6 },
    { level: 8, structureType: STRUCTURE_ROAD, dx: 0, dy: 6 },
    { level: 8, structureType: STRUCTURE_ROAD, dx: -1, dy: 6 },
];
var edgeRoads = [
    { level: 8, structureType: STRUCTURE_ROAD, dx: -6, dy: -1 },
    { level: 8, structureType: STRUCTURE_ROAD, dx: -6, dy: 0 },
    { level: 8, structureType: STRUCTURE_ROAD, dx: -6, dy: 1 },
    { level: 8, structureType: STRUCTURE_ROAD, dx: 1, dy: -6 },
    { level: 8, structureType: STRUCTURE_ROAD, dx: -1, dy: -6 },
];
var labs = [
    { level: 8, structureType: STRUCTURE_LAB, dx: 2, dy: 5 },
    { level: 8, structureType: STRUCTURE_LAB, dx: 5, dy: 2 },
    { level: 8, structureType: STRUCTURE_LAB, dx: 2, dy: 4 },
    { level: 8, structureType: STRUCTURE_LAB, dx: 4, dy: 2 },
    { level: 8, structureType: STRUCTURE_LAB, dx: 3, dy: 4 },
    { level: 8, structureType: STRUCTURE_LAB, dx: 4, dy: 3 },
    { level: 8, structureType: STRUCTURE_LAB, dx: 3, dy: 5 },
    { level: 8, structureType: STRUCTURE_LAB, dx: 5, dy: 3 },
    { level: 8, structureType: STRUCTURE_LAB, dx: 4, dy: 5 },
    { level: 8, structureType: STRUCTURE_LAB, dx: 5, dy: 4 },
];
function onCompleted(room) {
    var smile = _.union(TickCache_1.__find(room, FIND_STRUCTURES, {
        filter: function (s) { return (s.structureType == STRUCTURE_RAMPART) && s.pos.isEqualTo(room.storage.pos.x - 1, room.storage.pos.y + 2); }
    }), TickCache_1.__find(room, FIND_STRUCTURES, {
        filter: function (s) { return (s.structureType == STRUCTURE_RAMPART) && s.pos.isEqualTo(room.storage.pos.x, room.storage.pos.y + 3); }
    }), TickCache_1.__find(room, FIND_STRUCTURES, {
        filter: function (s) { return (s.structureType == STRUCTURE_RAMPART) && s.pos.isEqualTo(room.storage.pos.x + 1, room.storage.pos.y + 2); }
    }));
    var eyes = _.union(TickCache_1.__find(room, FIND_STRUCTURES, {
        filter: function (s) { return (s.structureType == STRUCTURE_RAMPART) && s.pos.isEqualTo(room.storage.pos.x - 2, room.storage.pos.y - 1); }
    }), TickCache_1.__find(room, FIND_STRUCTURES, {
        filter: function (s) { return (s.structureType == STRUCTURE_RAMPART) && s.pos.isEqualTo(room.storage.pos.x + 2, room.storage.pos.y - 1); }
    }));
    var eyebrows = _.union(TickCache_1.__find(room, FIND_STRUCTURES, {
        filter: function (s) { return (s.structureType == STRUCTURE_RAMPART) && s.pos.isEqualTo(room.storage.pos.x - 3, room.storage.pos.y - 5); }
    }), TickCache_1.__find(room, FIND_STRUCTURES, {
        filter: function (s) { return (s.structureType == STRUCTURE_RAMPART) && s.pos.isEqualTo(room.storage.pos.x - 2, room.storage.pos.y - 5); }
    }), TickCache_1.__find(room, FIND_STRUCTURES, {
        filter: function (s) { return (s.structureType == STRUCTURE_RAMPART) && s.pos.isEqualTo(room.storage.pos.x - 1, room.storage.pos.y - 4); }
    }), TickCache_1.__find(room, FIND_STRUCTURES, {
        filter: function (s) { return (s.structureType == STRUCTURE_RAMPART) && s.pos.isEqualTo(room.storage.pos.x + 3, room.storage.pos.y - 5); }
    }), TickCache_1.__find(room, FIND_STRUCTURES, {
        filter: function (s) { return (s.structureType == STRUCTURE_RAMPART) && s.pos.isEqualTo(room.storage.pos.x + 2, room.storage.pos.y - 5); }
    }), TickCache_1.__find(room, FIND_STRUCTURES, {
        filter: function (s) { return (s.structureType == STRUCTURE_RAMPART) && s.pos.isEqualTo(room.storage.pos.x + 1, room.storage.pos.y - 4); }
    }));
    var publicRamparts = smile.concat(eyes, eyebrows);
    _.forEach(publicRamparts, function (r) { return r.setPublic(true); });
}
function getBunkerC(room) {
    return {
        Name: 'BunkerC',
        Items: [
            { level: 1, structureType: STRUCTURE_SPAWN, dx: 0, dy: -2, name: (room == null ? '??' : room.name) + "p" },
            { level: 7, structureType: STRUCTURE_SPAWN, dx: 0, dy: 2, name: (room == null ? '??' : room.name) + "s" },
            { level: 8, structureType: STRUCTURE_SPAWN, dx: -2, dy: 0, name: (room == null ? '??' : room.name) + "t" }
        ].concat(initialRoads, [
            { level: 7, structureType: STRUCTURE_TOWER, dx: -2, dy: 2 },
            { level: 5, structureType: STRUCTURE_TOWER, dx: -2, dy: -2 },
            { level: 3, structureType: STRUCTURE_TOWER, dx: 2, dy: -2 },
            { level: 8, structureType: STRUCTURE_TOWER, dx: 0, dy: -1 },
            { level: 8, structureType: STRUCTURE_TOWER, dx: -1, dy: 0 },
            { level: 8, structureType: STRUCTURE_TOWER, dx: 0, dy: 1 },
            { level: 4, structureType: STRUCTURE_STORAGE, dx: 0, dy: 0 },
            { level: 7, structureType: STRUCTURE_CONTAINER, dx: -1, dy: 2 }
        ], ring1Roads, ring1Ext, ring2Roads, [
            { level: 6, structureType: STRUCTURE_LINK, dx: 1, dy: 0 }
        ], labRoads, ring2Ext, [
            { level: 5, structureType: STRUCTURE_CONTAINER, dx: -2, dy: -1 }
        ], ring3Roads, ring3Ext, Bunker_1.headRamparts, Bunker_1.layer1, cornerRoads, edgeRoads, [
            { level: 8, structureType: STRUCTURE_TERMINAL, dx: 2, dy: 2 },
            { level: 8, structureType: STRUCTURE_OBSERVER, dx: 0, dy: -6 }
        ], labs, [
            { level: 8, structureType: STRUCTURE_FACTORY, dx: 6, dy: 1 }
        ], Bunker_1.layer2, Bunker_1.layer3, Bunker_1.innerRamparts),
        onCompleted: onCompleted
    };
}
exports.default = getBunkerC;


/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Setup_1 = __webpack_require__(18);
var ProcessList_1 = __webpack_require__(9);
function default_1(roomName, flagName, roleName, positions) {
    if (positions === void 0) { positions = 1; }
    var room = Game.rooms[roomName];
    if (_.isUndefined(room)) {
        return "No visibility on room " + roomName;
    }
    if (_.isUndefined(room.controller)) {
        return "No controller in room " + roomName;
    }
    if (!room.controller.my) {
        return "Room " + roomName + " is not yours";
    }
    var flag = Game.flags[flagName];
    if (_.isUndefined(flag)) {
        return "Flag " + flagName + " does not exist";
    }
    var setups = Setup_1.GetCreepSetups();
    if (_.isUndefined(setups[roleName])) {
        return "Setup " + roleName + " not defined";
    }
    var processList = ProcessList_1.GetProcessList();
    var hub = _.first(_.filter(processList, function (p) {
        return (p.name == '/usr/bin/flags-hub') &&
            (p.processInfo.args.length == 1) &&
            (p.processInfo.args[0] == roomName);
    }));
    if (hub == null) {
        return "Hub process for room " + roomName + " not found";
    }
    flag.memory['role'] = roleName;
    flag.memory['spawnFromRoom'] = roomName;
    if (positions != 1) {
        flag.memory['positions'] = positions;
    }
    delete hub.processInfo.awakeAtTick;
    Memory.proc[hub.id] = {};
    return "Added " + roleName + " for flag " + flagName + " (" + roomName + ")";
}
exports.default = default_1;


/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var MarketTask_1 = __webpack_require__(27);
function default_1(resource, price, amount) {
    if (_.isUndefined(resource)) {
        return "Buy what?";
    }
    if (_.isUndefined(price)) {
        return "For how much credits?";
    }
    if (_.isUndefined(amount)) {
        return "How much?";
    }
    if (_.isUndefined(Memory['MarketTasks'])) {
        Memory['MarketTasks'] = [];
    }
    var marketTasks = Memory['MarketTasks'];
    marketTasks.push({
        type: MarketTask_1.MarketTaskType.Buy,
        resource: resource,
        price: price,
        amount: amount,
        remaining: amount
    });
    return "Buy " + amount + " of " + resource + " for " + price + ", got it";
}
exports.default = default_1;


/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Guid_1 = __webpack_require__(47);
var TasksRepository_1 = __webpack_require__(11);
var CarryTask_1 = __webpack_require__(43);
function default_1(fromId, toId, resource, amount, priority) {
    if (priority === void 0) { priority = 10; }
    if (_.isUndefined(fromId)) {
        return "Where from?";
    }
    var fromStruct = Game.getObjectById(fromId);
    if (fromStruct == null) {
        return "Source structure " + fromId + " not found";
    }
    if (_.isUndefined(toId)) {
        return "Where to?";
    }
    var toStruct = Game.getObjectById(toId);
    if (toStruct == null) {
        return "Target structure " + toId + " not found";
    }
    if (_.isUndefined(resource)) {
        return "What to carry?";
    }
    if (_.isUndefined(amount)) {
        return "how much?";
    }
    if (amount <= 0) {
        return "Only positive amount is valid";
    }
    var taskObject = CarryTask_1.default.CreateCarryTaskObject(Guid_1.default.newGuid(), priority, amount, resource, fromId, toId);
    var task = new CarryTask_1.default(taskObject);
    TasksRepository_1.default.AddTask(task);
    return 'Not implemented';
}
exports.default = default_1;


/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Task_1 = __webpack_require__(6);
var TaskManager_1 = __webpack_require__(7);
var TasksRepository_1 = __webpack_require__(11);
function default_1(roomName) {
    var room = Game.rooms[roomName];
    if (!room) {
        return "No visibility on room " + roomName;
    }
    if (!room.controller) {
        return "No controller in room " + roomName;
    }
    if (!room.controller.my) {
        return "Room " + roomName + " is not yours";
    }
    if (!room.terminal) {
        return "No terminal in room " + roomName;
    }
    var factory = room.find(FIND_MY_STRUCTURES, { filter: function (s) { return s.structureType == STRUCTURE_FACTORY; } }).shift();
    if (!factory) {
        return "No factory in room " + roomName;
    }
    var unloadTasks = TasksRepository_1.default.QueryTasks(function (task) { return task.Type == Task_1.TaskType.CarryResources && !task.isCompleted() && task.fromId == factory.id; });
    var created = 0;
    if (!_.some(unloadTasks)) {
        for (var _i = 0, _a = Object.keys(factory.store); _i < _a.length; _i++) {
            var resourceType = _a[_i];
            TaskManager_1.default.AddCarryTask(factory, room.terminal, resourceType, factory.store[resourceType]);
            created++;
        }
    }
    return created + " tasks created";
}
exports.default = default_1;


/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Processes_1 = __webpack_require__(29);
var ProcessList_1 = __webpack_require__(9);
var CreepAnalyzer_1 = __webpack_require__(15);
var ClearFactory_1 = __webpack_require__(101);
var PosPack_1 = __webpack_require__(108);
var Produce_1 = __webpack_require__(109);
var Roads_1 = __webpack_require__(114);
var TestCmd_1 = __webpack_require__(118);
var Res_1 = __webpack_require__(112);
var Squad_1 = __webpack_require__(23);
var ScheduleNuke_1 = __webpack_require__(116);
var Sell_1 = __webpack_require__(117);
var Buy_1 = __webpack_require__(99);
var Carry_1 = __webpack_require__(100);
var ClearLabs_1 = __webpack_require__(54);
var ResetLabs_1 = __webpack_require__(113);
var Pgrep_1 = __webpack_require__(107);
var KillAll_1 = __webpack_require__(105);
var Load_1 = __webpack_require__(106);
var Deliver_1 = __webpack_require__(103);
var AddFlagged_1 = __webpack_require__(98);
var RemoveFlagged_1 = __webpack_require__(111);
var RoomInfo_1 = __webpack_require__(115);
var Tow_1 = __webpack_require__(119);
var FakeExpand_1 = __webpack_require__(104);
var Reboot_1 = __webpack_require__(110);
function getProcessInfoString(p, prefix) {
    var currentPrefix = _.endsWith(prefix, ' ') ?
        prefix.substring(0, prefix.length - 1) + "\u2514" :
        _.endsWith(prefix, '|') ?
            prefix.substring(0, prefix.length - 1) + "\u251C" :
            prefix;
    var childs = ProcessList_1.GetChildProcesses(p.id);
    if (_.some(childs)) {
        currentPrefix = currentPrefix + "\u252C";
    }
    var result = "" + _.padRight(currentPrefix, 5, '─') + Processes_1.formatProcessInfoLine(p);
    if (_.some(childs)) {
        _.dropRight(childs).forEach(function (child) {
            var newPrefix = prefix + "|";
            result = result + "\n" + getProcessInfoString(child, newPrefix);
        });
        var newPrefix = prefix + " ";
        result = result + "\n" + getProcessInfoString(_.last(childs), newPrefix);
    }
    return result;
}
function RegisterCommands() {
    global.exec = function (name, args) {
        return Processes_1.execl(name, args);
    };
    global.execp = function (parentId, name, args) {
        return Processes_1.execlp(parentId, name, args);
    };
    global.ps = function (id) {
        var pid = id || 1;
        var rootProcess = ProcessList_1.GetProcessById(pid);
        return ("Process List:\n" + getProcessInfoString(rootProcess, ""));
    };
    global.pgrep = Pgrep_1.default;
    global.kill = function (pid) {
        var process = ProcessList_1.GetProcessById(pid);
        if (process == null) {
            return "No process with pid " + pid;
        }
        ProcessList_1.KillProcessTree(pid);
        return "Killing process tree " + process.id + " (" + process.name + ")";
    };
    global.killAll = KillAll_1.default;
    global.roads = Roads_1.default;
    global.clearRoadSites = function (roomName) {
        var removed = 0;
        _.forEach(Game.constructionSites, function (cs) {
            if ((cs.pos.roomName == roomName) && (cs.structureType == STRUCTURE_ROAD)) {
                cs.remove();
                removed++;
            }
        });
        return removed + " sites dropped";
    };
    global.squad = Squad_1.default;
    global.tl = function (creepId) {
        var creep = Game.getObjectById(creepId);
        if (creep == null) {
            return "No creep with id " + creepId;
        }
        return "Total threat: " + JSON.stringify(CreepAnalyzer_1.CreepAnalyzer.GetThreatLevel(creep, false)) + "\nCurrent threat: " + JSON.stringify(CreepAnalyzer_1.CreepAnalyzer.GetThreatLevel(creep, true));
    };
    global.res = Res_1.default;
    global.testcmd = TestCmd_1.default;
    global.scheduleNuke = ScheduleNuke_1.default;
    global.sell = Sell_1.default;
    global.buy = Buy_1.default;
    global.produce = Produce_1.default;
    global.carry = Carry_1.default;
    global.tow = Tow_1.default;
    global.load = Load_1.default;
    global.deliver = Deliver_1.default;
    global.clearlabs = ClearLabs_1.default;
    global.clearfactory = ClearFactory_1.default;
    global.resetlabs = ResetLabs_1.default;
    global.addFlag = AddFlagged_1.default;
    global.removeFlag = RemoveFlagged_1.default;
    global.fakeExpand = FakeExpand_1.default;
    global.roomInfo = RoomInfo_1.default;
    global.reboot = Reboot_1.default;
    global.pp = PosPack_1.default;
}
exports.RegisterCommands = RegisterCommands;


/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var TaskManager_1 = __webpack_require__(7);
function default_1(resource, amount, roomName) {
    if (_.isUndefined(resource)) {
        return "What to deliver?";
    }
    if (_.isUndefined(amount)) {
        return "how much?";
    }
    if (amount <= 0) {
        return "Only positive amount is valid";
    }
    var task = TaskManager_1.default.AddDeliverTask(resource, amount, roomName);
    return "Task created: " + task.id;
}
exports.default = default_1;


/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Squad_1 = __webpack_require__(23);
function default_1(originRoomName, destinationFlag) {
    var room = Game.rooms[originRoomName];
    if (_.isUndefined(room)) {
        return "No visibility on room " + originRoomName;
    }
    if (_.isUndefined(room.controller)) {
        return "No controller in room " + originRoomName;
    }
    if (!room.controller.my) {
        return "Room " + originRoomName + " is not yours";
    }
    var flag = Game.flags[destinationFlag];
    if (_.isUndefined(flag)) {
        return "Flag " + destinationFlag + " does not exist";
    }
    var destinationRoomName = flag.pos.roomName;
    Memory.rooms[destinationRoomName] = Memory.rooms[destinationRoomName] || {};
    Memory.rooms[destinationRoomName]['templateCenter'] = flag.pos.pack();
    Memory.rooms[destinationRoomName]['templateName'] = 'BunkerC';
    Squad_1.default(originRoomName, destinationRoomName, ['claimer']);
    Squad_1.default(originRoomName, destinationRoomName, ['nomad', 'nomad']);
    return "Got it";
}
exports.default = default_1;


/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ProcessList_1 = __webpack_require__(9);
var Processes_1 = __webpack_require__(29);
function default_1(search) {
    if (search == null) {
        return "Argument required";
    }
    var result = "Killing all processes matching " + search + "\n";
    for (var _i = 0, _a = ProcessList_1.GetProcessList(); _i < _a.length; _i++) {
        var p = _a[_i];
        var args = Processes_1.argumentsString(p);
        if (args.indexOf(search) >= 0) {
            result = "" + result + Processes_1.formatProcessInfoLine(p) + "\n";
            ProcessList_1.KillProcess(p.id);
        }
    }
    return result;
}
exports.default = default_1;


/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var TaskManager_1 = __webpack_require__(7);
function default_1(roomName, resource, parts, labId) {
    var loadRoom = Game.rooms[roomName];
    if (_.isUndefined(loadRoom)) {
        return "No visibility on room " + roomName;
    }
    if (_.isUndefined(loadRoom.controller)) {
        return "No controller in room " + roomName;
    }
    if (!loadRoom.controller.my) {
        return "Room " + roomName + " is not yours";
    }
    var task = TaskManager_1.default.AddLoadTask(roomName, resource, parts, 5, labId);
    return task.id;
}
exports.default = default_1;


/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ProcessList_1 = __webpack_require__(9);
var Processes_1 = __webpack_require__(29);
function default_1(search) {
    if (search == null) {
        return "Argument required";
    }
    var result = "";
    for (var _i = 0, _a = ProcessList_1.GetProcessList(); _i < _a.length; _i++) {
        var p = _a[_i];
        var args = Processes_1.argumentsString(p);
        if (args.indexOf(search) >= 0) {
            result = result + "\n" + Processes_1.formatProcessInfoLine(p);
        }
    }
    return result;
}
exports.default = default_1;


/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function default_1(objectId) {
    if (!objectId) {
        return 'objectId required';
    }
    var object = Game.getObjectById(objectId);
    if (!object) {
        return "No object #" + objectId;
    }
    if (!object.pos) {
        return object + " has no position";
    }
    return object.pos.pack();
}
exports.default = default_1;


/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var TaskManager_1 = __webpack_require__(7);
function default_1(resource, amount, roomName) {
    if (_.isUndefined(resource)) {
        return "Produce what?";
    }
    if (!_.includes(RESOURCES_ALL, resource)) {
        return "Invalid resource " + resource;
    }
    if (_.isUndefined(amount)) {
        return "How much?";
    }
    if (_.isUndefined(roomName)) {
        return "Where?";
    }
    if (COMMODITIES[resource]) {
        TaskManager_1.default.AddProduceCommodityTask(resource, amount, roomName);
    }
    else {
        TaskManager_1.default.AddProduceTask(resource, amount, roomName);
    }
    return "Producing " + amount + " of " + resource + " in " + roomName;
}
exports.default = default_1;


/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function default_1() {
    for (var _i = 0, _a = _.values(Game.rooms); _i < _a.length; _i++) {
        var r = _a[_i];
        delete r.memory.spawnQueue;
        r.find(FIND_MY_SPAWNS).forEach(function (spawn) { if (spawn.spawning) {
            spawn.spawning.cancel();
        } });
    }
    _.forEach(Game.creeps, function (c) { return c.suicide(); });
    delete Memory.lastPid;
    delete Memory.proc;
    delete Memory.processTable;
    delete Memory.Tasks;
}
exports.default = default_1;


/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ProcessList_1 = __webpack_require__(9);
function default_1(flagName) {
    var flag = Game.flags[flagName];
    if (_.isUndefined(flag)) {
        return "Flag " + flagName + " does not exist";
    }
    var roomName = flag.memory['spawnFromRoom'];
    var processList = ProcessList_1.GetProcessList();
    var hub = _.first(_.filter(processList, function (p) {
        return (p.name == '/usr/bin/flags-hub') &&
            (p.processInfo.args.length == 1) &&
            (p.processInfo.args[0] == roomName);
    }));
    if (hub == null) {
        return "Hub process for room " + roomName + " not found";
    }
    delete flag.memory['role'];
    delete flag.memory['spawnFromRoom'];
    delete flag.memory['positions'];
    delete hub.processInfo.awakeAtTick;
    Memory.proc[hub.id] = {};
    return "Flag " + flagName + " (room " + roomName + ") removed";
}
exports.default = default_1;


/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var BoostsManager_1 = __webpack_require__(20);
var TaskManager_1 = __webpack_require__(7);
function allResources() {
    var resources = BoostsManager_1.default.GetCurrentResources();
    var want = BoostsManager_1.default.DesiredResources();
    var producing = TaskManager_1.default.QueryProduceTasks();
    function formatResource(resource, label) {
        var l = label || resource;
        var p = _.size(_.filter(producing, function (t) { return t.resource == resource; }));
        var current = (Math.floor((resources[resource] || 0) / 1000)).toString() + "k";
        var desired = (Math.floor((want[resource] || 0) / 1000)).toString() + "k";
        var color = resources[resource] < want[resource] ? 'red' : resources[resource] > 1.5 * want[resource] ? 'orange' : 'green';
        var v = current + "/" + desired;
        var produceString = p ? "(" + p + ")" : '   ';
        return "<span style=\"color: " + color + "\">" + _.padRight(l + ":", 5) + " " + _.padLeft(v, 10) + "</span> " + produceString;
    }
    var report = "Resources:";
    report = report + "\n" + formatResource('U') + "|" + formatResource('UH') + "|" + formatResource('UH2O') + "|" + formatResource('XUH2O');
    report = report + "\n                      |" + formatResource('UO') + "|" + formatResource('UHO2') + "|" + formatResource('XUHO2');
    report = report + "\n" + formatResource('K') + "|" + formatResource('KH') + "|" + formatResource('KH2O') + "|" + formatResource('XKH2O');
    report = report + "\n                      |" + formatResource('KO') + "|" + formatResource('KHO2') + "|" + formatResource('XKHO2');
    report = report + "\n" + formatResource('L') + "|" + formatResource('LH') + "|" + formatResource('LH2O') + "|" + formatResource('XLH2O');
    report = report + "\n                      |" + formatResource('LO') + "|" + formatResource('LHO2') + "|" + formatResource('XLHO2');
    report = report + "\n" + formatResource('Z') + "|" + formatResource('ZH') + "|" + formatResource('ZH2O') + "|" + formatResource('XZH2O');
    report = report + "\n                      |" + formatResource('ZO') + "|" + formatResource('ZHO2') + "|" + formatResource('XZHO2');
    report = report + "\n" + formatResource('G') + "|" + formatResource('GH') + "|" + formatResource('GH2O') + "|" + formatResource('XGH2O');
    report = report + "\n                      |" + formatResource('GO') + "|" + formatResource('GHO2') + "|" + formatResource('XGHO2');
    report = report + "\n" + formatResource('O') + "|" + _.padLeft('', 43) + "|" + formatResource('UL');
    report = report + "\n" + formatResource('H') + "|" + formatResource('OH') + "|" + _.padLeft('', 20) + "|" + formatResource('ZK');
    report = report + "\n" + formatResource('X') + "|" + formatResource('power', 'PWR') + "|" + formatResource('energy', 'ENER');
    return report;
}
function resourceLocations(resource) {
    var amounts = {};
    for (var _i = 0, _a = _.values(Game.rooms); _i < _a.length; _i++) {
        var room = _a[_i];
        if ((room.controller == null) || !room.controller.my) {
            continue;
        }
        if (room.storage != null) {
            amounts[room.name] = (amounts[room.name] || 0) + (room.storage.store[resource] || 0);
        }
        if (room.terminal != null) {
            amounts[room.name] = (amounts[room.name] || 0) + (room.terminal.store[resource] || 0);
        }
    }
    var report = "Rooms with " + resource + ":";
    for (var r in amounts) {
        if (amounts[r] > 0) {
            report = report + "\n" + r + ": " + amounts[r];
        }
    }
    report = report + "\nTotal: " + _.sum(amounts);
    return report;
}
function res(resource) {
    if (resource == null) {
        return allResources();
    }
    return resourceLocations(resource);
}
exports.default = res;


/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ClearLabs_1 = __webpack_require__(54);
function default_1() {
    var myRooms = _.filter(_.values(Game.rooms), function (r) {
        return !_.isUndefined(r.controller) &&
            r.controller.my &&
            (r.controller.level == 8) &&
            (r.terminal != null) &&
            (r.storage != null) &&
            (r.storage.pos.getRangeTo(r.terminal.pos) < 3);
    });
    var result = '';
    for (var _i = 0, myRooms_1 = myRooms; _i < myRooms_1.length; _i++) {
        var room = myRooms_1[_i];
        var cleanResult = ClearLabs_1.default(room.name, true);
        result += room.name + ": " + cleanResult + "\n";
    }
    return result;
}
exports.default = default_1;


/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var TickCache_1 = __webpack_require__(1);
var Traveler_1 = __webpack_require__(16);
var PathUtils_1 = __webpack_require__(19);
function roads(parent, remote) {
    var parentRoom = Game.rooms[parent];
    if (parentRoom == null) {
        return "No visibility on room " + parent;
    }
    if (parentRoom.controller == null || !parentRoom.controller.my) {
        return "Room " + parent + " isn't ours";
    }
    if (parentRoom.storage == null) {
        return "No storage in " + parent;
    }
    var srcPos = parentRoom.storage.pos;
    var remoteRoom = Game.rooms[remote];
    if (remoteRoom == null) {
        return "No visibility on room " + remote;
    }
    var sources = TickCache_1.__find(remoteRoom, FIND_SOURCES);
    var _loop_1 = function (source) {
        var path = Traveler_1.Traveler.findTravelPath(srcPos, source.pos, {
            allowSK: false,
            range: 1,
            ignoreCreeps: true,
            roomCallback: function (roomName, matrix) { return PathUtils_1.findCostMatrix(roomName, { pos: source.pos, range: 1 }, 18, 19, 20, true).matrix || matrix; }
        });
        var route = path.path;
        var roadLength = route.length - 2;
        for (var i = 0; i < roadLength; i++) {
            var currentStep = route[i];
            Game.rooms[currentStep.roomName].createConstructionSite(currentStep.x, currentStep.y, STRUCTURE_ROAD);
        }
    };
    for (var _i = 0, sources_1 = sources; _i < sources_1.length; _i++) {
        var source = sources_1[_i];
        _loop_1(source);
    }
    return "Ok";
}
exports.default = roads;


/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ZoningRoomInformationProvider_1 = __webpack_require__(90);
function default_1(roomName) {
    var roomInfo = ZoningRoomInformationProvider_1.default.GetRoomInfo(roomName);
    if (roomInfo == null) {
        return "Room " + roomInfo + " not found";
    }
    return JSON.stringify(roomInfo, null, 2);
}
exports.default = default_1;


/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function ScheduleNuke(roomName, pos, tick) {
    var launchRoom = Game.rooms[roomName];
    if (_.isUndefined(launchRoom)) {
        return "No visibility on room " + roomName;
    }
    if (_.isUndefined(launchRoom.controller)) {
        return "No controller in room " + roomName;
    }
    if (!launchRoom.controller.my) {
        return "Room " + roomName + " is not yours";
    }
    var nuker = _.first(launchRoom.find(FIND_STRUCTURES, { filter: function (s) { return s.structureType == STRUCTURE_NUKER; } }));
    if (_.isUndefined(nuker)) {
        return "No nuker at room " + roomName;
    }
    if (_.isUndefined(pos)) {
        return "Target not defined";
    }
    if (_.isUndefined(tick)) {
        return "Tick not defined";
    }
    var packedPosition = pos.pack();
    var scheduleItem = {
        LaunchRoomName: roomName,
        LandingPosition: packedPosition,
        LaunchTick: tick
    };
    if (_.isUndefined(Memory['NukesSchedule'])) {
        Memory['NukesSchedule'] = [];
    }
    Memory['NukesSchedule'].push(scheduleItem);
    return "Launch scheduled successfully, total " + Memory['NukesSchedule'].length + " nukes in queue";
}
exports.default = ScheduleNuke;


/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var MarketTask_1 = __webpack_require__(27);
function default_1(resource, price, amount) {
    if (_.isUndefined(resource)) {
        return "Sell what?";
    }
    if (_.isUndefined(price)) {
        return "For how much credits?";
    }
    if (_.isUndefined(amount)) {
        return "How much?";
    }
    if (_.isUndefined(Memory['MarketTasks'])) {
        Memory['MarketTasks'] = [];
    }
    var marketTasks = Memory['MarketTasks'];
    marketTasks.push({
        type: MarketTask_1.MarketTaskType.Sell,
        resource: resource,
        price: price,
        amount: amount,
        remaining: amount
    });
    return "Sell " + amount + " of " + resource + " for " + price + ", got it";
}
exports.default = default_1;


/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var RoomAnalyzer_1 = __webpack_require__(89);
function testcmd() {
    var params = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        params[_i] = arguments[_i];
    }
    if (params.length != 1) {
        return 'Range required';
    }
    return RoomAnalyzer_1.default.TowerEffect(600, params[0]);
}
exports.default = testcmd;


/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var TaskManager_1 = __webpack_require__(7);
function default_1(creepId, position, range, priority) {
    if (range === void 0) { range = 0; }
    if (priority === void 0) { priority = 10; }
    if (!creepId) {
        return "Tow whom?";
    }
    var creep = Game.getObjectById(creepId);
    if (!creep) {
        return "Tow whom?";
    }
    if (!position) {
        return "Tow where?";
    }
    var task = TaskManager_1.default.AddTowTask(creep, position, range, priority);
    return "Task created: " + task.id;
}
exports.default = default_1;


/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.roadFilter = { filter: function (s) { return s.structureType == STRUCTURE_ROAD; } };


/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Processes = __webpack_require__(29);
var TickCache_1 = __webpack_require__(1);
var Locks_1 = __webpack_require__(55);
var Prototypes_1 = __webpack_require__(178);
var Commands_1 = __webpack_require__(102);
var Planner = __webpack_require__(123);
function tick() {
    Prototypes_1.initPrototypes();
    Commands_1.RegisterCommands();
    Locks_1.flushLocks();
    TickCache_1.__flush();
    RawMemory.setActiveSegments([0, 70, 71, 72, 73, 74]);
    if (Game.cpu.getUsed() > 10) {
    }
    for (var creepName in Game.creeps) {
        Game.creeps[creepName].memory['processed'] = false;
    }
    try {
        Processes.tick();
    }
    catch (e) {
        console.log("<font color=\"red\">Processes.tick() exception: " + e.message + "\r\n" + e.stack + "</font>");
    }
    Planner.tick();
}
exports.tick = tick;


/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.default = {
    register: function () {
        var start = Game.cpu.getUsed();
        Memory;
        var end = Game.cpu.getUsed();
        this.parseTime = end - start;
        if (!Memory.disableMemhack) {
            this.memory = RawMemory._parsed;
            this.tick = Game.time;
            console.log("Initial memory parse took " + this.parseTime + " cpu (previous tick " + this.tick + ", current " + Game.time + ")");
        }
    },
    pretick: function () {
        if ((this.tick || 0) < (Game.time - 1)) {
            this.register();
            return;
        }
        if (_.isUndefined(this.memory)) {
            return;
        }
        delete global.Memory;
        global.Memory = this.memory;
        RawMemory._parsed = this.memory;
        this.tick = Game.time;
    }
};


/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Traveler_1 = __webpack_require__(91);
var CostMatrixFactory_1 = __webpack_require__(45);
var CostMatrixType_1 = __webpack_require__(0);
var FormationFactory_1 = __webpack_require__(49);
var Template_1 = __webpack_require__(52);
function processPlanner() {
    var plannerFlag = Game.flags['planner'];
    if (_.isUndefined(plannerFlag)) {
        return;
    }
}
function drawDiamond() {
    var diamondFlag = Game.flags['diamond'];
    if (_.isUndefined(diamondFlag)) {
        return;
    }
    var vis = new RoomVisual(diamondFlag.pos.roomName);
    var diamondConfig = { "name": "textExport", "buildings": { "extension": { "pos": [{ "x": 24, "y": 20 }, { "x": 26, "y": 20 }, { "x": 23, "y": 21 }, { "x": 24, "y": 21 }, { "x": 26, "y": 21 }, { "x": 27, "y": 21 }, { "x": 22, "y": 22 }, { "x": 23, "y": 22 }, { "x": 25, "y": 22 }, { "x": 27, "y": 22 }, { "x": 28, "y": 22 }, { "x": 21, "y": 23 }, { "x": 22, "y": 23 }, { "x": 24, "y": 23 }, { "x": 25, "y": 23 }, { "x": 26, "y": 23 }, { "x": 28, "y": 23 }, { "x": 29, "y": 23 }, { "x": 20, "y": 24 }, { "x": 21, "y": 24 }, { "x": 23, "y": 24 }, { "x": 24, "y": 24 }, { "x": 25, "y": 24 }, { "x": 27, "y": 24 }, { "x": 29, "y": 24 }, { "x": 30, "y": 24 }, { "x": 20, "y": 25 }, { "x": 22, "y": 25 }, { "x": 23, "y": 25 }, { "x": 24, "y": 25 }, { "x": 26, "y": 25 }, { "x": 27, "y": 25 }, { "x": 28, "y": 25 }, { "x": 30, "y": 25 }, { "x": 20, "y": 26 }, { "x": 21, "y": 26 }, { "x": 23, "y": 26 }, { "x": 25, "y": 26 }, { "x": 26, "y": 26 }, { "x": 27, "y": 26 }, { "x": 29, "y": 26 }, { "x": 30, "y": 26 }, { "x": 21, "y": 27 }, { "x": 22, "y": 27 }, { "x": 24, "y": 27 }, { "x": 25, "y": 27 }, { "x": 26, "y": 27 }, { "x": 28, "y": 27 }, { "x": 29, "y": 27 }, { "x": 22, "y": 28 }, { "x": 23, "y": 28 }, { "x": 25, "y": 28 }, { "x": 27, "y": 28 }, { "x": 28, "y": 28 }, { "x": 23, "y": 29 }, { "x": 24, "y": 29 }, { "x": 26, "y": 29 }, { "x": 27, "y": 29 }, { "x": 24, "y": 30 }, { "x": 26, "y": 30 }] }, "road": { "pos": [{ "x": 25, "y": 21 }, { "x": 24, "y": 22 }, { "x": 26, "y": 22 }, { "x": 23, "y": 23 }, { "x": 27, "y": 23 }, { "x": 22, "y": 24 }, { "x": 28, "y": 24 }, { "x": 21, "y": 25 }, { "x": 29, "y": 25 }, { "x": 22, "y": 26 }, { "x": 28, "y": 26 }, { "x": 23, "y": 27 }, { "x": 27, "y": 27 }, { "x": 24, "y": 28 }, { "x": 26, "y": 28 }, { "x": 25, "y": 29 }, { "x": 26, "y": 24 }, { "x": 24, "y": 26 }] }, "container": { "pos": [{ "x": 26, "y": 24 }, { "x": 24, "y": 26 }] }, "link": { "pos": [{ "x": 25, "y": 25 }] } } };
    for (var structure in diamondConfig.buildings) {
        for (var _i = 0, _a = diamondConfig.buildings[structure].pos; _i < _a.length; _i++) {
            var pos = _a[_i];
            vis.structure(pos.x + diamondFlag.pos.x - 25, pos.y + diamondFlag.pos.y - 25, structure, { opacity: 0.3 });
        }
    }
    vis.connectRoads({ opacity: 0.3 });
    vis.poly([
        [diamondFlag.pos.x - 5.5, diamondFlag.pos.y - 1.5],
        [diamondFlag.pos.x - 1.5, diamondFlag.pos.y - 5.5],
        [diamondFlag.pos.x + 1.5, diamondFlag.pos.y - 5.5],
        [diamondFlag.pos.x + 5.5, diamondFlag.pos.y - 1.5],
        [diamondFlag.pos.x + 5.5, diamondFlag.pos.y + 1.5],
        [diamondFlag.pos.x + 1.5, diamondFlag.pos.y + 5.5],
        [diamondFlag.pos.x - 1.5, diamondFlag.pos.y + 5.5],
        [diamondFlag.pos.x - 5.5, diamondFlag.pos.y + 1.5],
        [diamondFlag.pos.x - 5.5, diamondFlag.pos.y - 1.5],
    ]);
}
function drawSolidBase() {
    var _loop_1 = function (templateName) {
        var flag = Game.flags[templateName];
        if (!flag || (flag.secondaryColor == COLOR_GREY)) {
            return "continue";
        }
        var template = Template_1.templateFactory[templateName](flag.room);
        var op = flag.secondaryColor == COLOR_WHITE ? 0.1 : 0.3;
        var vis = new RoomVisual(flag.pos.roomName);
        var items = _.reject(template.Items, { structureType: STRUCTURE_RAMPART });
        for (var _i = 0, _a = items.filter(function (i) { return i.level <= flag.secondaryColor; }); _i < _a.length; _i++) {
            var structure = _a[_i];
            vis.structure(structure.dx + flag.pos.x, structure.dy + flag.pos.y, structure.structureType, { opacity: op });
        }
        vis.connectRoads({ opacity: 0.3 });
        if (flag.color == COLOR_GREEN) {
            flag.room.memory['templateCenter'] = flag.pos.pack();
            flag.room.memory['templateName'] = templateName;
            flag.remove();
        }
    };
    for (var _i = 0, _a = Object.keys(Template_1.templateFactory); _i < _a.length; _i++) {
        var templateName = _a[_i];
        _loop_1(templateName);
    }
}
function drawLabs() {
    var labsFlag = Game.flags['labs'];
    if (_.isUndefined(labsFlag)) {
        return;
    }
    var vis = new RoomVisual(labsFlag.pos.roomName);
    vis.poly([
        [labsFlag.pos.x + 0.5, labsFlag.pos.y - 1.5],
        [labsFlag.pos.x + 0.5, labsFlag.pos.y - 0.5],
        [labsFlag.pos.x + 1.5, labsFlag.pos.y - 0.5],
        [labsFlag.pos.x + 1.5, labsFlag.pos.y + 1.5],
        [labsFlag.pos.x + 0.5, labsFlag.pos.y + 1.5],
        [labsFlag.pos.x + 0.5, labsFlag.pos.y + 2.5],
        [labsFlag.pos.x - 1.5, labsFlag.pos.y + 2.5],
        [labsFlag.pos.x - 1.5, labsFlag.pos.y + 1.5],
        [labsFlag.pos.x - 2.5, labsFlag.pos.y + 1.5],
        [labsFlag.pos.x - 2.5, labsFlag.pos.y - 0.5],
        [labsFlag.pos.x - 1.5, labsFlag.pos.y - 0.5],
        [labsFlag.pos.x - 1.5, labsFlag.pos.y - 1.5],
        [labsFlag.pos.x + 0.5, labsFlag.pos.y - 1.5],
    ]);
}
function drawFormation() {
    var fflag = Game.flags['formation'];
    if (_.isUndefined(fflag)) {
        return;
    }
    if (fflag.color == COLOR_GREY) {
        return;
    }
    var vis = new RoomVisual(fflag.pos.roomName);
    var formation = FormationFactory_1.default.GetFormation('square3');
    var positions = formation.GetMembersPositions(fflag.pos, Math.min(fflag.color, 8));
    for (var i in positions) {
        vis.text(i.toString(), positions[i]);
    }
    var destFlag = Game.flags['fd'];
    if (_.isUndefined(destFlag)) {
        return;
    }
    if (destFlag.secondaryColor == COLOR_GREY) {
        return;
    }
    if (fflag.pos.roomName != destFlag.pos.roomName) {
        return;
    }
    function cm(roomName) {
        var baseMatrix = CostMatrixFactory_1.default.GetCostMatrix(roomName, CostMatrixType_1.CostMatrixType.Military);
        if (_.isBoolean(baseMatrix)) {
            return baseMatrix;
        }
        var matrix = baseMatrix;
        return formation.TransformCostMatrix(matrix);
    }
    var options = {
        useFindRoute: false,
        range: 0,
        allowSK: true,
        maxOps: 20000,
        roomCallback: cm
    };
    var path = Traveler_1.Traveler.findTravelPath(fflag, destFlag, options);
    if (!_.some(path.path)) {
        vis.text('?', destFlag.pos);
        console.log("No path (" + JSON.stringify(path, null, 2) + ")");
    }
    else {
        var pairs = _.filter(path.path, function (s) { return s.roomName == fflag.pos.roomName; }).map(function (s) { return [s.x, s.y]; });
        vis.poly(pairs, {
            fill: 'transparent',
            stroke: '#ff8',
            lineStyle: 'dashed',
            strokeWidth: .15,
            opacity: .5
        });
    }
}
function tick() {
    processPlanner();
    drawDiamond();
    drawLabs();
    drawSolidBase();
    drawFormation();
}
exports.tick = tick;


/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var OperatorProcess_1 = __webpack_require__(17);
var Dozer = (function (_super) {
    __extends(Dozer, _super);
    function Dozer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(Dozer.prototype, "name", {
        get: function () {
            return "/usr/bin/power-creeps/dozer";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Dozer.prototype, "powerCreepName", {
        get: function () {
            return "Dozer";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Dozer.prototype, "needRegenerateSources", {
        get: function () {
            if (this.room.find(FIND_NUKES).length) {
                var firstNukeLand = _.min(this.room.find(FIND_NUKES), 'timeToLand').timeToLand;
                return firstNukeLand >= 1000;
            }
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Dozer.prototype, "needOperateSpawns", {
        get: function () {
            if (this.room.find(FIND_NUKES).length) {
                var firstNukeLand = _.min(this.room.find(FIND_NUKES), 'timeToLand').timeToLand;
                return firstNukeLand < 1000;
            }
            return this.flag && (this.flag.color == COLOR_RED);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Dozer.prototype, "needOperateTowers", {
        get: function () {
            return this.room.memory['focusRaiseId'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Dozer.prototype, "powers", {
        get: function () {
            return [
                PWR_OPERATE_SPAWN,
                PWR_OPERATE_EXTENSION,
                PWR_OPERATE_TOWER,
                PWR_OPERATE_LAB,
                PWR_OPERATE_SPAWN,
                PWR_OPERATE_EXTENSION,
                PWR_OPERATE_TOWER,
                PWR_OPERATE_LAB,
                PWR_OPERATE_SPAWN,
                PWR_OPERATE_EXTENSION,
                PWR_OPERATE_TOWER,
                PWR_OPERATE_LAB,
                PWR_REGEN_SOURCE,
                PWR_REGEN_SOURCE,
                PWR_REGEN_SOURCE,
                PWR_OPERATE_SPAWN,
                PWR_OPERATE_LAB,
                PWR_REGEN_SOURCE,
                PWR_OPERATE_FACTORY,
                PWR_OPERATE_TOWER,
                PWR_OPERATE_OBSERVER,
                PWR_OPERATE_POWER,
                PWR_OPERATE_SPAWN,
                PWR_OPERATE_LAB,
                PWR_REGEN_SOURCE,
            ];
        },
        enumerable: true,
        configurable: true
    });
    Dozer.prototype.tick = function () {
        _super.prototype.tick.call(this);
        if (!this.PowerCreep || !this.PowerCreep.pos) {
            return;
        }
        if (Game.flags["evac" + this.room.name] && this.room.find(FIND_NUKES).length) {
            var firstNukeLand = _.min(this.room.find(FIND_NUKES), 'timeToLand').timeToLand;
            if (firstNukeLand < 50) {
                this._evacuate(Game.flags["evac" + this.room.name]);
                return;
            }
        }
        if (this.PowerCreep.ticksToLive < 100) {
            this.renew();
            return;
        }
        if (!this.room.controller.isPowerEnabled) {
            this.EnablePower();
            return;
        }
        if (!this.PowerCreep.carry[RESOURCE_OPS]) {
            this.GetOps();
            return;
        }
        if (this.needOperateSpawns && this.OperateSpawns()) {
            return;
        }
        if (this.needOperateTowers && this.OperateTowers()) {
            return;
        }
        if (this.OperateExtensions()) {
            return;
        }
        if (this.needOperateFactory && this.OperateFactory()) {
            return;
        }
        if (this.needOperatePower && this.OperatePower()) {
            return;
        }
        if (this.needRegenerateSources && this.OperateSources()) {
            return;
        }
        this.moveToPosition();
    };
    return Dozer;
}(OperatorProcess_1.default));
exports.default = Dozer;


/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var OperatorProcess_1 = __webpack_require__(17);
var Jax = (function (_super) {
    __extends(Jax, _super);
    function Jax() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(Jax.prototype, "name", {
        get: function () {
            return "/usr/bin/power-creeps/jax";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Jax.prototype, "powerCreepName", {
        get: function () {
            return "Jax";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Jax.prototype, "needRegenerateSources", {
        get: function () {
            if (this.room.find(FIND_NUKES).length) {
                var firstNukeLand = _.min(this.room.find(FIND_NUKES), 'timeToLand').timeToLand;
                return firstNukeLand >= 1000;
            }
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Jax.prototype, "needOperateSpawns", {
        get: function () {
            if (this.room.find(FIND_NUKES).length) {
                var firstNukeLand = _.min(this.room.find(FIND_NUKES), 'timeToLand').timeToLand;
                return firstNukeLand < 1000;
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Jax.prototype, "needOperateTowers", {
        get: function () {
            return this.room.memory['focusRaiseId'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Jax.prototype, "powers", {
        get: function () {
            return [
                PWR_OPERATE_SPAWN,
                PWR_OPERATE_EXTENSION,
                PWR_OPERATE_TOWER,
                PWR_OPERATE_LAB,
                PWR_OPERATE_SPAWN,
                PWR_OPERATE_EXTENSION,
                PWR_OPERATE_TOWER,
                PWR_OPERATE_LAB,
                PWR_OPERATE_SPAWN,
                PWR_OPERATE_EXTENSION,
                PWR_OPERATE_TOWER,
                PWR_OPERATE_LAB,
                PWR_REGEN_SOURCE,
                PWR_REGEN_SOURCE,
                PWR_REGEN_SOURCE,
                PWR_OPERATE_SPAWN,
                PWR_OPERATE_LAB,
                PWR_REGEN_SOURCE,
                PWR_OPERATE_FACTORY,
                PWR_OPERATE_TOWER,
                PWR_OPERATE_POWER,
                PWR_OPERATE_POWER,
                PWR_OPERATE_SPAWN,
                PWR_OPERATE_LAB,
                PWR_REGEN_SOURCE,
            ];
        },
        enumerable: true,
        configurable: true
    });
    Jax.prototype.tick = function () {
        _super.prototype.tick.call(this);
        if (!this.PowerCreep || !this.PowerCreep.pos) {
            return;
        }
        if (Game.flags["evac" + this.room.name] && this.room.find(FIND_NUKES).length) {
            var firstNukeLand = _.min(this.room.find(FIND_NUKES), 'timeToLand').timeToLand;
            if (firstNukeLand < 50) {
                this._evacuate(Game.flags["evac" + this.room.name]);
                return;
            }
        }
        if (this.PowerCreep.ticksToLive < 100) {
            this.renew();
            return;
        }
        if (!this.room.controller.isPowerEnabled) {
            this.EnablePower();
            return;
        }
        if (!this.PowerCreep.carry[RESOURCE_OPS]) {
            this.GetOps();
            return;
        }
        if (this.needOperateSpawns && this.OperateSpawns()) {
            return;
        }
        if (this.needOperateTowers && this.OperateTowers()) {
            return;
        }
        if (this.OperateExtensions()) {
            return;
        }
        if (this.needOperateFactory && this.OperateFactory()) {
            return;
        }
        if (this.needOperatePower && this.OperatePower()) {
            return;
        }
        if (this.needOperateLabs && this.OperateLabs()) {
            return;
        }
        if (this.needRegenerateSources && this.OperateSources()) {
            return;
        }
        this.moveToPosition();
    };
    return Jax;
}(OperatorProcess_1.default));
exports.default = Jax;


/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var OperatorProcess_1 = __webpack_require__(17);
var Link = (function (_super) {
    __extends(Link, _super);
    function Link() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(Link.prototype, "name", {
        get: function () {
            return "/usr/bin/power-creeps/link";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Link.prototype, "powerCreepName", {
        get: function () {
            return "Link";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Link.prototype, "needRegenerateSources", {
        get: function () {
            if (this.room.find(FIND_NUKES).length) {
                var firstNukeLand = _.min(this.room.find(FIND_NUKES), 'timeToLand').timeToLand;
                return firstNukeLand >= 1000;
            }
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Link.prototype, "needOperateSpawns", {
        get: function () {
            if (this.room.find(FIND_NUKES).length) {
                var firstNukeLand = _.min(this.room.find(FIND_NUKES), 'timeToLand').timeToLand;
                return firstNukeLand < 1000;
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Link.prototype, "needOperateTowers", {
        get: function () {
            return this.room.memory['focusRaiseId'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Link.prototype, "powers", {
        get: function () {
            return [
                PWR_OPERATE_SPAWN,
                PWR_OPERATE_EXTENSION,
                PWR_OPERATE_TOWER,
                PWR_OPERATE_LAB,
                PWR_OPERATE_SPAWN,
                PWR_OPERATE_EXTENSION,
                PWR_OPERATE_TOWER,
                PWR_OPERATE_LAB,
                PWR_OPERATE_SPAWN,
                PWR_OPERATE_EXTENSION,
                PWR_OPERATE_TOWER,
                PWR_OPERATE_LAB,
                PWR_REGEN_SOURCE,
                PWR_REGEN_SOURCE,
                PWR_REGEN_SOURCE,
                PWR_OPERATE_SPAWN,
                PWR_OPERATE_LAB,
                PWR_REGEN_SOURCE,
                PWR_OPERATE_FACTORY,
                PWR_OPERATE_POWER,
                PWR_OPERATE_OBSERVER,
                PWR_OPERATE_TERMINAL,
                PWR_OPERATE_SPAWN,
                PWR_OPERATE_LAB,
                PWR_REGEN_SOURCE,
            ];
        },
        enumerable: true,
        configurable: true
    });
    Link.prototype.tick = function () {
        _super.prototype.tick.call(this);
        if (!this.PowerCreep || !this.PowerCreep.pos) {
            return;
        }
        if (Game.flags["evac" + this.room.name] && this.room.find(FIND_NUKES).length) {
            var firstNukeLand = _.min(this.room.find(FIND_NUKES), 'timeToLand').timeToLand;
            if (firstNukeLand < 50) {
                this._evacuate(Game.flags["evac" + this.room.name]);
                return;
            }
        }
        if (this.PowerCreep.ticksToLive < 100) {
            this.renew();
            return;
        }
        if (!this.room.controller.isPowerEnabled) {
            this.EnablePower();
            return;
        }
        if (!this.PowerCreep.carry[RESOURCE_OPS]) {
            if (this.GetOps()) {
                return;
            }
        }
        if (this.needOperateSpawns && this.OperateSpawns()) {
            return;
        }
        if (this.needOperateTowers && this.OperateTowers()) {
            return;
        }
        if (this.OperateExtensions()) {
            return;
        }
        if (this.needOperateFactory && this.OperateFactory()) {
            return;
        }
        if (this.needOperatePower && this.OperatePower()) {
            return;
        }
        if (this.needOperateLabs && this.OperateLabs()) {
            return;
        }
        if (this.needRegenerateSources && this.OperateSources()) {
            return;
        }
        this.moveToPosition();
    };
    return Link;
}(OperatorProcess_1.default));
exports.default = Link;


/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var OperatorProcess_1 = __webpack_require__(17);
var Mattis = (function (_super) {
    __extends(Mattis, _super);
    function Mattis() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(Mattis.prototype, "name", {
        get: function () {
            return "/usr/bin/power-creeps/mattis";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Mattis.prototype, "powerCreepName", {
        get: function () {
            return "Mattis";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Mattis.prototype, "needRegenerateSources", {
        get: function () {
            if (this.room.find(FIND_NUKES).length) {
                var firstNukeLand = _.min(this.room.find(FIND_NUKES), 'timeToLand').timeToLand;
                return firstNukeLand >= 1000;
            }
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Mattis.prototype, "needOperateSpawns", {
        get: function () {
            if (this.room.find(FIND_NUKES).length) {
                var firstNukeLand = _.min(this.room.find(FIND_NUKES), 'timeToLand').timeToLand;
                return firstNukeLand < 1000;
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Mattis.prototype, "needOperateTowers", {
        get: function () {
            return this.room.memory['focusRaiseId'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Mattis.prototype, "powers", {
        get: function () {
            return [
                PWR_OPERATE_SPAWN,
                PWR_OPERATE_EXTENSION,
                PWR_OPERATE_TOWER,
                PWR_OPERATE_LAB,
                PWR_OPERATE_SPAWN,
                PWR_OPERATE_EXTENSION,
                PWR_OPERATE_TOWER,
                PWR_OPERATE_LAB,
                PWR_OPERATE_SPAWN,
                PWR_OPERATE_EXTENSION,
                PWR_OPERATE_TOWER,
                PWR_OPERATE_LAB,
                PWR_REGEN_SOURCE,
                PWR_REGEN_SOURCE,
                PWR_REGEN_SOURCE,
                PWR_OPERATE_LAB,
                PWR_OPERATE_SPAWN,
                PWR_REGEN_SOURCE,
                PWR_OPERATE_FACTORY,
                PWR_OPERATE_FACTORY,
                PWR_OPERATE_FACTORY,
                PWR_OPERATE_FACTORY,
                PWR_OPERATE_SPAWN,
                PWR_OPERATE_LAB,
                PWR_REGEN_SOURCE,
            ];
        },
        enumerable: true,
        configurable: true
    });
    Mattis.prototype.tick = function () {
        _super.prototype.tick.call(this);
        if (!this.PowerCreep || !this.PowerCreep.pos) {
            return;
        }
        if (Game.flags["evac" + this.room.name] && this.room.find(FIND_NUKES).length) {
            var firstNukeLand = _.min(this.room.find(FIND_NUKES), 'timeToLand').timeToLand;
            if (firstNukeLand < 50) {
                this._evacuate(Game.flags["evac" + this.room.name]);
                return;
            }
        }
        if (this.PowerCreep.ticksToLive < 100) {
            this.renew();
            return;
        }
        if (!this.room.controller.isPowerEnabled) {
            this.EnablePower();
            return;
        }
        if (!this.PowerCreep.carry[RESOURCE_OPS]) {
            this.GetOps();
            return;
        }
        if (this.needOperateSpawns && this.OperateSpawns()) {
            return;
        }
        if (this.needOperateTowers && this.OperateTowers()) {
            return;
        }
        if (this.OperateExtensions()) {
            return;
        }
        if (this.needOperatePower && this.OperatePower()) {
            return;
        }
        if (this.needOperateLabs && this.OperateLabs()) {
            return;
        }
        if (this.needRegenerateSources && this.OperateSources()) {
            return;
        }
        this.moveToPosition();
    };
    return Mattis;
}(OperatorProcess_1.default));
exports.default = Mattis;


/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var BehaviorBase_1 = __webpack_require__(2);
var CostMatrixType_1 = __webpack_require__(0);
var OperatorProcess_1 = __webpack_require__(17);
var OpsGenerator = (function (_super) {
    __extends(OpsGenerator, _super);
    function OpsGenerator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(OpsGenerator.prototype, "name", {
        get: function () {
            return "/usr/bin/ops-generator";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OpsGenerator.prototype, "powers", {
        get: function () {
            return [PWR_GENERATE_OPS, PWR_OPERATE_SPAWN, PWR_GENERATE_OPS];
        },
        enumerable: true,
        configurable: true
    });
    OpsGenerator.prototype.tick = function () {
        _super.prototype.tick.call(this);
        if (!this.PowerCreep.pos) {
            return;
        }
        if (_.sum(this.PowerCreep.carry) == this.PowerCreep.carryCapacity) {
            this.storeOps();
            return;
        }
        this.generateOps();
        if (this.PowerCreep.ticksToLive < 100) {
            if (_.sum(this.PowerCreep.carry) > 0) {
                this.storeOps();
                return;
            }
            this.renew();
            return;
        }
        this.moveToPosition();
    };
    OpsGenerator.prototype.generateOps = function () {
        if (this.PowerCreep.powers[PWR_GENERATE_OPS].cooldown) {
            return;
        }
        this.PowerCreep.usePower(PWR_GENERATE_OPS);
    };
    OpsGenerator.prototype.storeOps = function () {
        if (!this.PowerCreep.pos.isNearTo(this.room.terminal)) {
            BehaviorBase_1.default.GoToPosition(this.PowerCreep, this.room.terminal, { costMatrixType: CostMatrixType_1.CostMatrixType.Offroad, range: 1 });
            return;
        }
        this.PowerCreep.transfer(this.room.terminal, 'ops');
    };
    OpsGenerator.prototype.allowAutoshutdown = function () {
        return false;
    };
    Object.defineProperty(OpsGenerator.prototype, "needOperateTowers", {
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OpsGenerator.prototype, "needOperateSpawns", {
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OpsGenerator.prototype, "needRegenerateSources", {
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    return OpsGenerator;
}(OperatorProcess_1.default));
exports.default = OpsGenerator;


/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var BehaviorBase_1 = __webpack_require__(2);
var Process_1 = __webpack_require__(5);
var CostMatrixType_1 = __webpack_require__(0);
var PowerCreepProcess = (function (_super) {
    __extends(PowerCreepProcess, _super);
    function PowerCreepProcess() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(PowerCreepProcess.prototype, "powerCreepName", {
        get: function () {
            return this.processInfo.args[0];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PowerCreepProcess.prototype, "PowerCreep", {
        get: function () {
            return Game.powerCreeps[this.powerCreepName];
        },
        enumerable: true,
        configurable: true
    });
    PowerCreepProcess.prototype.tick = function () {
        if (!this.flag || !this.room) {
            return;
        }
        if (!this.PowerCreep || this.PowerCreep.level < this.powers.length) {
            this.createPowerCreep();
            return;
        }
        if (!this.PowerCreep.pos) {
            this.PowerCreep.spawn(this.powerSpawner);
            return;
        }
    };
    Object.defineProperty(PowerCreepProcess.prototype, "flag", {
        get: function () {
            return Game.flags[this.powerCreepName];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PowerCreepProcess.prototype, "room", {
        get: function () {
            return this.flag.room;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PowerCreepProcess.prototype, "powerSpawner", {
        get: function () {
            var room = this.room;
            return this.GetCachedObject('powerSpawn', function () { return _.first(room.find(FIND_MY_STRUCTURES, { filter: { structureType: STRUCTURE_POWER_SPAWN } })); });
        },
        enumerable: true,
        configurable: true
    });
    PowerCreepProcess.prototype.createPowerCreep = function () {
        if (!this.PowerCreep) {
            PowerCreep.create(this.powerCreepName, this.class);
            return;
        }
        if (this.PowerCreep.level < this.powers.length) {
            this.PowerCreep.upgrade(this.powers[this.PowerCreep.level]);
        }
    };
    PowerCreepProcess.prototype.renew = function () {
        if (!this.powerSpawner) {
            return;
        }
        if (!this.PowerCreep.pos.isNearTo(this.powerSpawner)) {
            BehaviorBase_1.default.GoToPosition(this.PowerCreep, this.powerSpawner, { costMatrixType: CostMatrixType_1.CostMatrixType.Offroad, range: 1 });
            return;
        }
        this.PowerCreep.renew(this.powerSpawner);
    };
    PowerCreepProcess.prototype._evacuate = function (flag) {
        if (this.PowerCreep.pos.getRangeTo(flag) <= 2) {
            return;
        }
        BehaviorBase_1.default.GoToPosition(this.PowerCreep, flag, { costMatrixType: CostMatrixType_1.CostMatrixType.Offroad, range: 2 });
    };
    return PowerCreepProcess;
}(Process_1.Process));
exports.default = PowerCreepProcess;


/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var OperatorProcess_1 = __webpack_require__(17);
var Sparks = (function (_super) {
    __extends(Sparks, _super);
    function Sparks() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(Sparks.prototype, "name", {
        get: function () {
            return "/usr/bin/power-creeps/sparks";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sparks.prototype, "powerCreepName", {
        get: function () {
            return "Sparks";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sparks.prototype, "needRegenerateSources", {
        get: function () {
            if (this.room.find(FIND_NUKES).length) {
                var firstNukeLand = _.min(this.room.find(FIND_NUKES), 'timeToLand').timeToLand;
                return firstNukeLand >= 1000;
            }
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sparks.prototype, "needOperateSpawns", {
        get: function () {
            if (this.room.find(FIND_NUKES).length) {
                var firstNukeLand = _.min(this.room.find(FIND_NUKES), 'timeToLand').timeToLand;
                return firstNukeLand < 1000;
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sparks.prototype, "needOperateTowers", {
        get: function () {
            return this.room.memory['focusRaiseId'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sparks.prototype, "powers", {
        get: function () {
            return [
                PWR_OPERATE_SPAWN,
                PWR_OPERATE_EXTENSION,
                PWR_OPERATE_TOWER,
                PWR_OPERATE_LAB,
                PWR_OPERATE_SPAWN,
                PWR_OPERATE_EXTENSION,
                PWR_OPERATE_TOWER,
                PWR_OPERATE_LAB,
                PWR_OPERATE_SPAWN,
                PWR_OPERATE_EXTENSION,
                PWR_OPERATE_TOWER,
                PWR_OPERATE_LAB,
                PWR_REGEN_SOURCE,
                PWR_REGEN_SOURCE,
                PWR_REGEN_SOURCE,
                PWR_OPERATE_SPAWN,
                PWR_OPERATE_LAB,
                PWR_REGEN_SOURCE,
                PWR_OPERATE_FACTORY,
                PWR_OPERATE_FACTORY,
                PWR_OPERATE_FACTORY,
                PWR_OPERATE_POWER,
                PWR_OPERATE_SPAWN,
                PWR_OPERATE_LAB,
                PWR_REGEN_SOURCE,
            ];
        },
        enumerable: true,
        configurable: true
    });
    Sparks.prototype.tick = function () {
        _super.prototype.tick.call(this);
        if (!this.PowerCreep || !this.PowerCreep.pos) {
            return;
        }
        if (Game.flags["evac" + this.room.name] && this.room.find(FIND_NUKES).length) {
            var firstNukeLand = _.min(this.room.find(FIND_NUKES), 'timeToLand').timeToLand;
            if (firstNukeLand < 50) {
                this._evacuate(Game.flags["evac" + this.room.name]);
                return;
            }
        }
        if (this.PowerCreep.ticksToLive < 100) {
            this.renew();
            return;
        }
        if (!this.room.controller.isPowerEnabled) {
            this.EnablePower();
            return;
        }
        if (!this.PowerCreep.carry[RESOURCE_OPS]) {
            this.GetOps();
            return;
        }
        if (this.needOperateSpawns && this.OperateSpawns()) {
            return;
        }
        if (this.needOperateTowers && this.OperateTowers()) {
            return;
        }
        if (this.OperateExtensions()) {
            return;
        }
        if (this.needOperateFactory && this.OperateFactory()) {
            return;
        }
        if (this.needOperatePower && this.OperatePower()) {
            return;
        }
        if (this.needOperateLabs && this.OperateLabs()) {
            return;
        }
        if (this.needRegenerateSources && this.OperateSources()) {
            return;
        }
        this.moveToPosition();
    };
    return Sparks;
}(OperatorProcess_1.default));
exports.default = Sparks;


/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var OperatorProcess_1 = __webpack_require__(17);
var Tank = (function (_super) {
    __extends(Tank, _super);
    function Tank() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(Tank.prototype, "name", {
        get: function () {
            return "/usr/bin/power-creeps/tank";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Tank.prototype, "powerCreepName", {
        get: function () {
            return "Tank";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Tank.prototype, "needRegenerateSources", {
        get: function () {
            if (this.room.find(FIND_NUKES).length) {
                var firstNukeLand = _.min(this.room.find(FIND_NUKES), 'timeToLand').timeToLand;
                return firstNukeLand >= 1000;
            }
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Tank.prototype, "needOperateSpawns", {
        get: function () {
            if (this.room.find(FIND_NUKES).length) {
                var firstNukeLand = _.min(this.room.find(FIND_NUKES), 'timeToLand').timeToLand;
                return firstNukeLand < 1000;
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Tank.prototype, "needOperateTowers", {
        get: function () {
            return this.room.memory['focusRaiseId'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Tank.prototype, "powers", {
        get: function () {
            return [
                PWR_OPERATE_SPAWN,
                PWR_OPERATE_EXTENSION,
                PWR_OPERATE_TOWER,
                PWR_OPERATE_LAB,
                PWR_OPERATE_SPAWN,
                PWR_OPERATE_EXTENSION,
                PWR_OPERATE_TOWER,
                PWR_OPERATE_LAB,
                PWR_OPERATE_SPAWN,
                PWR_OPERATE_EXTENSION,
                PWR_OPERATE_TOWER,
                PWR_OPERATE_LAB,
                PWR_REGEN_SOURCE,
                PWR_REGEN_SOURCE,
                PWR_REGEN_SOURCE,
                PWR_OPERATE_SPAWN,
                PWR_OPERATE_LAB,
                PWR_REGEN_SOURCE,
                PWR_OPERATE_FACTORY,
                PWR_OPERATE_FACTORY,
                PWR_OPERATE_TOWER,
                PWR_OPERATE_POWER,
                PWR_OPERATE_SPAWN,
                PWR_OPERATE_LAB,
                PWR_REGEN_SOURCE,
            ];
        },
        enumerable: true,
        configurable: true
    });
    Tank.prototype.tick = function () {
        _super.prototype.tick.call(this);
        if (!this.PowerCreep || !this.PowerCreep.pos) {
            return;
        }
        if (Game.flags["evac" + this.room.name] && this.room.find(FIND_NUKES).length) {
            var firstNukeLand = _.min(this.room.find(FIND_NUKES), 'timeToLand').timeToLand;
            if (firstNukeLand < 50) {
                this._evacuate(Game.flags["evac" + this.room.name]);
                return;
            }
        }
        if (this.PowerCreep.ticksToLive < 100) {
            this.renew();
            return;
        }
        if (!this.room.controller.isPowerEnabled) {
            this.EnablePower();
            return;
        }
        if (!this.PowerCreep.carry[RESOURCE_OPS]) {
            this.GetOps();
            return;
        }
        if (this.needOperateSpawns && this.OperateSpawns()) {
            return;
        }
        if (this.needOperateTowers && this.OperateTowers()) {
            return;
        }
        if (this.OperateExtensions()) {
            return;
        }
        if (this.needOperateFactory && this.OperateFactory()) {
            return;
        }
        if (this.needOperatePower && this.OperatePower()) {
            return;
        }
        if (this.needOperateLabs && this.OperateLabs()) {
            return;
        }
        if (this.needRegenerateSources && this.OperateSources()) {
            return;
        }
        this.moveToPosition();
    };
    return Tank;
}(OperatorProcess_1.default));
exports.default = Tank;


/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Process_1 = __webpack_require__(5);
var Config_1 = __webpack_require__(8);
var ProcessInit = (function (_super) {
    __extends(ProcessInit, _super);
    function ProcessInit() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(ProcessInit.prototype, "name", {
        get: function () {
            return '/sbin/init';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProcessInit.prototype, "subprocesses", {
        get: function () {
            var result = [];
            var rooms = _.filter(_.values(Game.rooms), function (r) {
                return r.controller &&
                    r.controller.my &&
                    ((r.controller.level == 8) ||
                        ((r.controller.level >= 5) && !!r.storage && r.storage.my && (r.energyCapacityAvailable >= 1800)) ||
                        (!!r.memory.templateCenter && !!r.memory.templateName));
            });
            if (rooms.length > 0) {
                result.push({
                    imageName: "/usr/bin/resource-balancer",
                    args: [],
                    priority: 18
                });
            }
            result.push({
                imageName: "/usr/bin/boosts-manager",
                args: [],
                priority: 25
            });
            result.push({
                imageName: "/opt/pixels",
                args: [],
                priority: 50
            });
            result.push({
                imageName: "/usr/bin/marketd",
                args: [],
                priority: 19
            });
            if (Config_1.collectStats) {
                result.push({
                    imageName: "/usr/bin/statd",
                    args: [],
                    priority: 35
                });
            }
            result.push({
                imageName: "/usr/bin/squad-hub",
                args: [],
                priority: 5
            });
            result.push({
                imageName: "/usr/bin/intershard-hub",
                args: [],
                priority: 16
            });
            result.push({
                imageName: "/usr/sbin/garbage-collector",
                args: [],
                priority: 40
            });
            result.push({
                imageName: "/usr/sbin/zone-visualizer",
                args: ['zone'],
                priority: 6
            });
            if (!_.isUndefined(Memory['NukesSchedule']) && _.some(Memory['NukesSchedule'])) {
                result.push({
                    imageName: "/usr/bin/nuke-launcher",
                    args: [],
                    priority: 7
                });
            }
            for (var _i = 0, rooms_1 = rooms; _i < rooms_1.length; _i++) {
                var r = rooms_1[_i];
                result.push({
                    imageName: "/usr/bin/permanent-room",
                    args: [r.name],
                    priority: 20
                });
            }
            if (!!Game.flags['start']) {
                result.push({
                    imageName: "/usr/bin/vis-path",
                    args: [],
                    priority: 10
                });
            }
            return result;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProcessInit.prototype, "childCheckInterval", {
        get: function () {
            return 1;
        },
        enumerable: true,
        configurable: true
    });
    ProcessInit.prototype.tick = function () {
        this._checkChildProcesses();
        this.sleep(10);
    };
    return ProcessInit;
}(Process_1.Process));
exports.ProcessInit = ProcessInit;


/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var PopulatedProcess_1 = __webpack_require__(10);
var ProcessList_1 = __webpack_require__(9);
var Setup_1 = __webpack_require__(18);
var FlaggedCreeps = (function (_super) {
    __extends(FlaggedCreeps, _super);
    function FlaggedCreeps() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = "/usr/bin/flagged-creeps";
        return _this;
    }
    FlaggedCreeps.prototype.tick = function () {
        if ((this.Flag == null) && !_.some(this._getCurrentCreeps())) {
            ProcessList_1.KillProcess(this.id);
            return;
        }
        if (this.Flag.memory['postpone'] > Game.time) {
            this.memory['recheckPopulation'] = 1 + this.Flag.memory['postpone'];
            this.memory['recheckCreeps'] = 1 + this.Flag.memory['postpone'];
            this.memory['population'] = {};
        }
        if (this.Flag.secondaryColor != COLOR_GREY) {
            this._handlePopulation();
        }
        this._handleCreeps();
    };
    FlaggedCreeps.prototype.SpawningAllowed = function () {
        if (this.Flag.memory['spawnLimit'] && this.memory['lastSpawn'] && ((this.memory['lastSpawn'] + this.Flag.memory['spawnLimit']) > Game.time)) {
            return false;
        }
        return true;
    };
    FlaggedCreeps.prototype.OnCreepSpawned = function (_name, _setupString) {
        console.log("OnCreepSpawned: " + this.Flag.name + " (" + _name + ")");
        this.memory['lastSpawn'] = Game.time;
    };
    Object.defineProperty(FlaggedCreeps.prototype, "roleName", {
        get: function () {
            return this.Flag.memory['role'] || FlaggedCreeps.flaggedRoles[this.Flag.color];
        },
        enumerable: true,
        configurable: true
    });
    FlaggedCreeps.prototype._getPopulation = function () {
        if (this.Flag.secondaryColor == COLOR_GREY) {
            return {};
        }
        if (!_.isUndefined(this.Flag.memory['postpone'])) {
            if (this.Flag.memory['postpone'] > Game.time) {
                return {};
            }
            delete this.Flag.memory['postpone'];
        }
        var result = {};
        result[this.FlagName] = {
            assignment: this.FlagName,
            positions: _.isUndefined(this.Flag.memory['positions']) ? 1 : this.Flag.memory['positions'],
            proirity: this.Flag.memory['priority'] || this.Flag.color,
            setupString: Setup_1.GetCreepSetup(this.roleName)
        };
        return result;
    };
    Object.defineProperty(FlaggedCreeps.prototype, "Flag", {
        get: function () {
            return Game.flags[this.FlagName];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlaggedCreeps.prototype, "FlagName", {
        get: function () {
            return this.processInfo.args[0];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlaggedCreeps.prototype, "ParentRoom", {
        get: function () {
            return Game.rooms[this.ParentRoomName];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlaggedCreeps.prototype, "ParentRoomName", {
        get: function () {
            return this.processInfo.args[1];
        },
        enumerable: true,
        configurable: true
    });
    FlaggedCreeps.flaggedRoles = [
        null,
        null,
        'leecher',
        'transport',
        'mobileCharger',
        'stationaryCharger',
        'builder',
        'fixer',
        'reserver',
        null,
        null
    ];
    return FlaggedCreeps;
}(PopulatedProcess_1.PopulatedProcess));
exports.default = FlaggedCreeps;


/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Process_1 = __webpack_require__(5);
var FlagsHub = (function (_super) {
    __extends(FlagsHub, _super);
    function FlagsHub() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(FlagsHub.prototype, "name", {
        get: function () {
            return "/usr/bin/flags-hub";
        },
        enumerable: true,
        configurable: true
    });
    FlagsHub.prototype.tick = function () {
        this._checkChildProcesses();
        this.sleep(1000);
    };
    Object.defineProperty(FlagsHub.prototype, "subprocesses", {
        get: function () {
            var result = [];
            for (var _i = 0, _a = this._flagsNames; _i < _a.length; _i++) {
                var flagName = _a[_i];
                result.push({
                    imageName: "/usr/bin/flagged-creeps",
                    args: [flagName, this._roomName],
                    priority: 12
                });
            }
            return result;
        },
        enumerable: true,
        configurable: true
    });
    FlagsHub.prototype.UpdateFlags = function () {
        var _this = this;
        var flags = _.filter(Game.flags, function (f) { return _this._roomName == f.memory['spawnFromRoom']; });
        this.memory['flags'] = flags.map(function (f) { return f.name; });
    };
    Object.defineProperty(FlagsHub.prototype, "_flagsNames", {
        get: function () {
            if (_.isUndefined(this.memory['flags'])) {
                this.UpdateFlags();
            }
            return this.memory['flags'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlagsHub.prototype, "_room", {
        get: function () {
            return Game.rooms[this._roomName];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlagsHub.prototype, "_roomName", {
        get: function () {
            return this.processInfo.args[0];
        },
        enumerable: true,
        configurable: true
    });
    return FlagsHub;
}(Process_1.Process));
exports.default = FlagsHub;


/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Process_1 = __webpack_require__(5);
var IntershardHub = (function (_super) {
    __extends(IntershardHub, _super);
    function IntershardHub() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(IntershardHub.prototype, "name", {
        get: function () {
            return "/usr/bin/intershard-hub";
        },
        enumerable: true,
        configurable: true
    });
    IntershardHub.prototype.tick = function () {
        this._acceptCreeps();
        this._checkChildProcesses();
    };
    Object.defineProperty(IntershardHub.prototype, "subprocesses", {
        get: function () {
            var result = [];
            for (var _i = 0, _a = this.memory['creeps']; _i < _a.length; _i++) {
                var creepName = _a[_i];
                result.push({
                    imageName: "/usr/bin/squad",
                    args: [creepName],
                    priority: 10
                });
            }
            return result;
        },
        enumerable: true,
        configurable: true
    });
    IntershardHub.prototype._getPopulation = function () {
        return {};
    };
    Object.defineProperty(IntershardHub.prototype, "childCheckInterval", {
        get: function () {
            return 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IntershardHub.prototype, "_receivingRooms", {
        get: function () {
            var result = [];
            for (var r in Game.rooms) {
                if (/^[WE]\d?0[NS]\d?0$/.test(r)) {
                    result.push(Game.rooms[r]);
                }
            }
            return result;
        },
        enumerable: true,
        configurable: true
    });
    IntershardHub.prototype._acceptCreeps = function () {
        this.memory['creeps'] = _.reject(this.memory['creeps'], function (n) { return !Game.creeps[n]; });
        for (var _i = 0, _a = this._receivingRooms; _i < _a.length; _i++) {
            var room = _a[_i];
            if (!room) {
                continue;
            }
            var creeps = room.find(FIND_MY_CREEPS);
            for (var _b = 0, creeps_1 = creeps; _b < creeps_1.length; _b++) {
                var c = creeps_1[_b];
                if (_.contains(this.memory['creeps'], c.name)) {
                    continue;
                }
                if (!c.memory['spawnedAt']) {
                    this.memory['creeps'].push(c.name);
                    continue;
                }
            }
        }
    };
    return IntershardHub;
}(Process_1.Process));
exports.default = IntershardHub;


/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Process_1 = __webpack_require__(5);
var GarbageCollector = (function (_super) {
    __extends(GarbageCollector, _super);
    function GarbageCollector() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = '/usr/sbin/garbage-collector';
        return _this;
    }
    GarbageCollector.prototype.tick = function () {
        var cleans = 0;
        for (var name in Memory.creeps) {
            if (!!Game.creeps[name]) {
                continue;
            }
            var memory = Memory.creeps[name];
            if (_.isUndefined(memory['spawnedAt']) || !_.isNumber(memory['spawnedAt']) || (Game.time > 1500 + memory['spawnedAt'])) {
                delete Memory.creeps[name];
                cleans++;
            }
        }
        console.log("GC complete (" + cleans + " creep memories erased)");
        this.sleep(100);
    };
    return GarbageCollector;
}(Process_1.Process));
exports.default = GarbageCollector;


/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Process_1 = __webpack_require__(5);
var GeneratePixelProcess = (function (_super) {
    __extends(GeneratePixelProcess, _super);
    function GeneratePixelProcess() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(GeneratePixelProcess.prototype, "name", {
        get: function () {
            return "/opt/pixels";
        },
        enumerable: true,
        configurable: true
    });
    GeneratePixelProcess.prototype.tick = function () {
    };
    return GeneratePixelProcess;
}(Process_1.Process));
exports.default = GeneratePixelProcess;


/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Process_1 = __webpack_require__(5);
var Spawn_1 = __webpack_require__(3);
var Roles_1 = __webpack_require__(66);
var LegacyRoles = (function (_super) {
    __extends(LegacyRoles, _super);
    function LegacyRoles() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(LegacyRoles.prototype, "name", {
        get: function () {
            return "/opt/bin/legacy-roles";
        },
        enumerable: true,
        configurable: true
    });
    LegacyRoles.prototype.tick = function () {
        for (var name in Memory.creeps) {
            if (!_.isUndefined(Game.creeps[name])) {
                var creep = Game.creeps[name];
                if (!creep.spawning && !creep.memory['processed']) {
                    try {
                        if ((creep.name.substr(0, 5) == 'creep') && (creep.memory.role == null)) {
                            creep.move(1);
                            creep.memory['processed'] = true;
                        }
                        else {
                            this.processCreep(creep);
                        }
                    }
                    catch (e) {
                        console.log("Exception while processing " + creep.name + ": " + e.message + "\r\n" + e.stack);
                    }
                }
                if (Game.cpu.getUsed() > (Game.cpu.tickLimit - 100)) {
                    return;
                }
            }
            else {
                delete Memory.creeps[name];
            }
        }
    };
    LegacyRoles.prototype.processCreep = function (creep) {
        if (!creep.spawning && !creep.memory['processed']) {
            try {
                var roleName = Spawn_1.getRoleByName(creep.name);
                var role = Roles_1.roles[roleName];
                if (role != null) {
                    try {
                        role.process(creep, this);
                    }
                    catch (e) {
                        console.log("Legacy " + creep.name + " invoked " + e.message + ", killing");
                        creep.suicide();
                    }
                }
                creep.memory['processed'] = true;
            }
            catch (e) {
                creep.memory['processed'] = true;
                if (e == null) {
                    console.log("<font color=\"red\">Roles.process() exception for " + creep.name + ", no details</font>");
                }
                else {
                    console.log("<font color=\"red\">Roles.process() exception for " + creep.name + ": " + e.message + "\r\n" + e.stack + "</font>");
                }
            }
        }
    };
    return LegacyRoles;
}(Process_1.Process));
exports.LegacyRoles = LegacyRoles;


/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var PopulatedProcess_1 = __webpack_require__(10);
var LinkedHarvesting = (function (_super) {
    __extends(LinkedHarvesting, _super);
    function LinkedHarvesting() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = "/usr/bin/linked-harvesting";
        return _this;
    }
    LinkedHarvesting.prototype.tick = function () {
        this._handleCreeps();
        this._handlePopulation();
    };
    Object.defineProperty(LinkedHarvesting.prototype, "Source", {
        get: function () {
            var _this = this;
            return this.GetCachedObject('sourceId', function () {
                return _.first(_this._sourcePosition.lookFor(LOOK_SOURCES));
            });
        },
        enumerable: true,
        configurable: true
    });
    LinkedHarvesting.prototype._getPopulation = function () {
        var result = {};
        var harvesterAssign = this.HarvestingPosition.pack().toString();
        result[harvesterAssign] = {
            setupString: 'leecher/13w3c7m',
            assignment: harvesterAssign,
            positions: 1,
            proirity: 2
        };
        return result;
    };
    Object.defineProperty(LinkedHarvesting.prototype, "populationCheckInterval", {
        get: function () {
            return 1500;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LinkedHarvesting.prototype, "_sourcePosition", {
        get: function () {
            return RoomPosition.unpack(this.processInfo.args[0]);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LinkedHarvesting.prototype, "HarvestingPosition", {
        get: function () {
            if (_.isUndefined(this.memory['harvestingPosition'])) {
                var link = _.first(this._sourcePosition.findInRange(FIND_STRUCTURES, 2, {
                    filter: function (s) { return s.structureType == STRUCTURE_LINK; }
                }));
                var possiblePositions = _.intersection(link.pos.around(1, { filter: function (p) { return p.isWalkable(); } }).map(function (p) { return p.pack(); }), this._sourcePosition.around(1, { filter: function (p) { return p.isWalkable(); } }).map(function (p) { return p.pack(); }));
                this.memory['harvestingPosition'] = _.first(possiblePositions);
            }
            return RoomPosition.unpack(this.memory['harvestingPosition']);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LinkedHarvesting.prototype, "ParentRoom", {
        get: function () {
            return Game.rooms[this.ParentRoomName];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LinkedHarvesting.prototype, "ParentRoomName", {
        get: function () {
            return this._sourcePosition.roomName;
        },
        enumerable: true,
        configurable: true
    });
    return LinkedHarvesting;
}(PopulatedProcess_1.PopulatedProcess));
exports.LinkedHarvesting = LinkedHarvesting;


/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Process_1 = __webpack_require__(5);
var Task_1 = __webpack_require__(6);
var TaskManager_1 = __webpack_require__(7);
var TasksRepository_1 = __webpack_require__(11);
var MarketTask_1 = __webpack_require__(27);
var ResourceBalancer_1 = __webpack_require__(34);
var Market = (function (_super) {
    __extends(Market, _super);
    function Market() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = '/usr/bin/marketd';
        return _this;
    }
    Market.prototype.tick = function () {
        if (_.isUndefined(Memory['MarketTasks'])) {
            Memory['MarketTasks'] = [];
            return;
        }
        var marketTasks1 = TaskManager_1.default.QueryMarketTasks();
        if (_.some(marketTasks1)) {
            var executedTasks = [];
            for (var _i = 0, marketTasks1_1 = marketTasks1; _i < marketTasks1_1.length; _i++) {
                var task = marketTasks1_1[_i];
                try {
                    if (task.Execute(task.room.terminal).Type != Task_1.TaskExecutionResultType.Postpone) {
                        executedTasks.push(task);
                    }
                }
                catch (e) {
                    console.log("Task " + task.id + " execute failed: " + e);
                }
            }
            TasksRepository_1.default.CleanupCompletedTasks();
            if (_.some(executedTasks)) {
                this.sleep(5);
                return;
            }
        }
        var operation = false;
        var marketTasks = Memory['MarketTasks'];
        if (_.some(marketTasks)) {
            var myRooms = _.filter(_.values(Game.rooms), function (r) {
                return !_.isUndefined(r.controller) &&
                    r.controller.my &&
                    (r.controller.level >= 6) &&
                    (r.storage != null) &&
                    (r.terminal != null) &&
                    (r.storage.pos.getRangeTo(r.terminal) < 3) &&
                    (r.terminal.cooldown == 0) &&
                    !r.memory['evac'];
            });
            var allOrders = Game.market.getAllOrders(function (o) { return o.amount >= 100; });
            var _loop_1 = function (task) {
                var matchedOrders = task.type == MarketTask_1.MarketTaskType.Buy ?
                    _.filter(allOrders, function (o) { return (o.type == ORDER_SELL) && (o.resourceType == task.resource) && (o.price <= task.price); }) :
                    _.filter(allOrders, function (o) { return (o.type == ORDER_BUY) && (o.resourceType == task.resource) && (o.price >= task.price); });
                if (!_.some(matchedOrders)) {
                    return "continue";
                }
                var sortedOrders = (task.type == MarketTask_1.MarketTaskType.Buy) ?
                    matchedOrders.sort(function (a, b) { return a.price - b.price; }) :
                    matchedOrders.sort(function (a, b) { return b.price - a.price; });
                var selectedRoom = null;
                if (task.roomName && Game.rooms[task.roomName] && Game.rooms[task.roomName].terminal && !Game.rooms[task.roomName].terminal.cooldown) {
                    selectedRoom = Game.rooms[task.roomName];
                }
                else {
                    var sortedRooms = (task.type == MarketTask_1.MarketTaskType.Buy) ?
                        myRooms.sort(function (a, b) { return ResourceBalancer_1.default.ResourceInRoom(a, task.resource) - ResourceBalancer_1.default.ResourceInRoom(b, task.resource); }) :
                        myRooms.sort(function (a, b) { return ResourceBalancer_1.default.ResourceInRoom(b, task.resource) - ResourceBalancer_1.default.ResourceInRoom(a, task.resource); });
                    selectedRoom = _.first(sortedRooms);
                }
                if (!selectedRoom || !selectedRoom.terminal || selectedRoom.terminal.cooldown || !_.includes(myRooms, selectedRoom)) {
                    return "continue";
                }
                var selectedOrder = _.first(sortedOrders);
                var tradableAbout = (task.type == MarketTask_1.MarketTaskType.Buy) ?
                    Math.min(selectedOrder.amount, task.remaining) :
                    Math.min(selectedRoom.terminal.store[task.resource] || 0, selectedOrder.amount, task.remaining);
                console.log((task.type == MarketTask_1.MarketTaskType.Buy ? 'buy' : 'sell') + " " + task.resource + ": " + matchedOrders.length + " orders found, best price " + selectedOrder.price + ", room " + selectedRoom.name + " (" + tradableAbout + "/" + ResourceBalancer_1.default.ResourceInRoom(selectedRoom, task.resource) + ")");
                if (Game.market.deal(selectedOrder.id, tradableAbout, selectedRoom.name) == OK) {
                    task.remaining -= tradableAbout;
                    operation = true;
                    _.remove(myRooms, function (r) { return r.name == selectedRoom.name; });
                }
            };
            for (var _a = 0, marketTasks_1 = marketTasks; _a < marketTasks_1.length; _a++) {
                var task = marketTasks_1[_a];
                _loop_1(task);
            }
            _.remove(marketTasks, function (t) { return t.remaining <= 0; });
        }
        if (!operation) {
            this.sleep(10);
        }
        return;
    };
    return Market;
}(Process_1.Process));
exports.default = Market;


/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var PopulatedProcess_1 = __webpack_require__(10);
var Traveler_1 = __webpack_require__(16);
var Squad_1 = __webpack_require__(73);
var CaravanMission = (function (_super) {
    __extends(CaravanMission, _super);
    function CaravanMission() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = '/usr/bin/caravan-mission';
        return _this;
    }
    CaravanMission.prototype._getPopulation = function () {
        return {};
    };
    CaravanMission.prototype.tick = function () {
        if (this.memory['allSpawned']) {
            this._handleCreeps();
        }
        else {
            this._initialLanding();
            if ((this.processInfo.executionTicks > 50) && !_.some(this._getCurrentCreeps())) {
                this._cleanupProcess();
            }
        }
    };
    CaravanMission.prototype._handleCreeps = function () {
        if (_.some(this._getCurrentCreeps())) {
            _super.prototype._handleCreeps.call(this);
        }
        else {
            this._cleanupProcess();
        }
    };
    CaravanMission.prototype._cleanupProcess = function () {
        var missionsContainer = JSON.parse(RawMemory.segments[0]);
        var missionId = this.processInfo.args[0];
        missionsContainer.missions = _.filter(missionsContainer.missions, function (m) { return m.id != missionId; });
        RawMemory.segments[0] = JSON.stringify(missionsContainer);
        console.log("Mission cleanup: " + missionId);
    };
    CaravanMission.prototype._initialLanding = function () {
        var allSpawned = true;
        for (var _i = 0, _a = this._getCurrentCreepsNames(); _i < _a.length; _i++) {
            var creepName = _a[_i];
            var creep = Game.creeps[creepName];
            if (creep != null) {
                if ((creep.memory['role'] == null) || (creep.memory['role'].startsWith('creep'))) {
                    creep.memory['role'] = CaravanMission.IdentifyCaravanCreep(creep);
                    creep.memory['assignedTo'] = this.destination.pack();
                }
                Traveler_1.Traveler.travelTo(creep, this.destination);
                creep.memory['processed'] = true;
                var portal = creep.pos.findClosestByRange(FIND_STRUCTURES, { filter: function (s) { return s.structureType == STRUCTURE_PORTAL; } });
                if ((portal != null) && (creep.pos.getRangeTo(portal) < 3)) {
                    allSpawned = false;
                }
            }
            else {
                allSpawned = false;
            }
        }
        if (allSpawned) {
            console.log("Mission " + this.processInfo.args[0] + " fully landed");
            Squad_1.formRaid(Game.creeps[_.first(this._getCurrentCreepsNames())]);
            this.memory['allSpawned'] = true;
        }
    };
    CaravanMission.prototype._handlePopulation = function () {
    };
    CaravanMission.prototype._getCurrentCreepsNames = function () {
        return this.config.creeps;
    };
    Object.defineProperty(CaravanMission.prototype, "destination", {
        get: function () {
            if (this.memory['destination'] == null) {
                var pos = new RoomPosition(this.config.data.destination.x, this.config.data.destination.y, this.config.data.destination.roomName);
                this.memory['destination'] = pos.pack();
                return pos;
            }
            return RoomPosition.unpack(this.memory['destination']);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CaravanMission.prototype, "config", {
        get: function () {
            var missionsContainer = JSON.parse(RawMemory.segments[0]);
            var missionId = this.processInfo.args[0];
            return _.first(_.filter(missionsContainer.missions, function (m) { return m.id == missionId; }));
        },
        enumerable: true,
        configurable: true
    });
    CaravanMission.IdentifyCaravanCreep = function (creep) {
        if (creep.carryCapacity > 0) {
            return 'caravanCarrier';
        }
        if (creep.getActiveBodyparts(ATTACK) > 0) {
            return 'caravanMelee';
        }
        if (creep.getActiveBodyparts(RANGED_ATTACK) > 0) {
            return 'caravanRanger';
        }
        return 'caravanHealer';
    };
    return CaravanMission;
}(PopulatedProcess_1.PopulatedProcess));
exports.default = CaravanMission;


/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Process_1 = __webpack_require__(5);
var MissionStartTracker = (function (_super) {
    __extends(MissionStartTracker, _super);
    function MissionStartTracker() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(MissionStartTracker.prototype, "name", {
        get: function () {
            return '/usr/bin/mission-start-tracker';
        },
        enumerable: true,
        configurable: true
    });
    MissionStartTracker.prototype.tick = function () {
        this._checkChildProcesses();
    };
    Object.defineProperty(MissionStartTracker.prototype, "childCheckInterval", {
        get: function () {
            return 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MissionStartTracker.prototype, "subprocesses", {
        get: function () {
            if (RawMemory.segments[0] == null) {
                return [];
            }
            var result = [];
            var missionsContainer = JSON.parse(RawMemory.segments[0]);
            for (var _i = 0, _a = missionsContainer.missions; _i < _a.length; _i++) {
                var mission = _a[_i];
                result.push({
                    imageName: "/usr/bin/" + mission.type + "-mission",
                    args: [mission.id],
                    priority: this.processInfo.priority
                });
            }
            return result;
        },
        enumerable: true,
        configurable: true
    });
    return MissionStartTracker;
}(Process_1.Process));
exports.default = MissionStartTracker;


/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Process_1 = __webpack_require__(5);
var ProcessList_1 = __webpack_require__(9);
var NukeLauncher = (function (_super) {
    __extends(NukeLauncher, _super);
    function NukeLauncher() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = '/usr/bin/nuke-launcher';
        return _this;
    }
    NukeLauncher.prototype.tick = function () {
        var schedule = Memory['NukesSchedule'];
        if (_.isUndefined(schedule) || !_.some(schedule)) {
            ProcessList_1.KillProcess(this.id);
            return;
        }
        var closest = _.first(schedule.sort(function (a, b) { return a.LaunchTick - b.LaunchTick; }));
        if (closest.LaunchTick <= Game.time) {
            this.launch(closest);
            Memory['NukesSchedule'] = _.tail(schedule);
            return;
        }
        var toSleep = closest.LaunchTick - Game.time - 10;
        if (toSleep > 0) {
            console.log("Sleeping for " + toSleep + " ticks before preparing to the next launch");
            this.sleep(toSleep);
            return;
        }
        console.log("Tick " + Game.time + ", launch countdown: " + (10 + toSleep));
    };
    NukeLauncher.prototype.launch = function (scheduleItem) {
        var nuker = _.first(Game.rooms[scheduleItem.LaunchRoomName].find(FIND_STRUCTURES, { filter: function (s) { return s.structureType == STRUCTURE_NUKER; } }));
        if (_.isUndefined(nuker)) {
            console.log("Error launching nuke from " + scheduleItem.LaunchRoomName + ": nuker not found :(");
            return;
        }
        if (nuker.energy < nuker.energyCapacity) {
            console.log("Error launching nuke from " + scheduleItem.LaunchRoomName + ": no energy in nuker :(");
            return;
        }
        if (nuker.ghodium < nuker.ghodiumCapacity) {
            console.log("Error launching nuke from " + scheduleItem.LaunchRoomName + ": no ghodium in nuker :(");
            return;
        }
        var landingPosition = RoomPosition.unpack(scheduleItem.LandingPosition);
        var result = nuker.launchNuke(landingPosition);
        var report = "Launching nuke from " + scheduleItem.LaunchRoomName + " (nuker id: " + nuker.id + ") to " + landingPosition + " (Scheduled to " + scheduleItem.LaunchTick + ", actual " + Game.time + "). Return code was " + result;
        Game.notify(report);
        console.log(report);
    };
    return NukeLauncher;
}(Process_1.Process));
exports.default = NukeLauncher;


/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var PopulatedProcess_1 = __webpack_require__(10);
var ProcessList_1 = __webpack_require__(9);
var Reserving = (function (_super) {
    __extends(Reserving, _super);
    function Reserving() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = '/usr/bin/reserving';
        return _this;
    }
    Reserving.prototype.tick = function () {
        this._updateReservationTime();
        this._handleCreeps();
        this._handlePopulation();
        if (!_.some(this._getCurrentCreeps()) && !this._reservationRequired) {
            this.sleep(this._endReservationTime - Game.time - 1000);
        }
    };
    Object.defineProperty(Reserving.prototype, "ParentRoom", {
        get: function () {
            return Game.rooms[this.ParentRoomName];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Reserving.prototype, "ParentRoomName", {
        get: function () {
            if (this.processInfo.args.length > 1) {
                return this.processInfo.args[1];
            }
            return this.GetRootRoomProcess().name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Reserving.prototype, "_minedRoom", {
        get: function () {
            return Game.rooms[this._minedRoomName];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Reserving.prototype, "_minedRoomName", {
        get: function () {
            return this.processInfo.args[0];
        },
        enumerable: true,
        configurable: true
    });
    Reserving.prototype._updateReservationTime = function () {
        if (!_.isUndefined(this._minedRoom) && !_.isUndefined(this._minedRoom.controller.reservation)) {
            this.memory['reservation-end'] = Game.time + this._minedRoom.controller.reservation.ticksToEnd;
        }
    };
    Object.defineProperty(Reserving.prototype, "_endReservationTime", {
        get: function () {
            return this.memory['reservation-end'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Reserving.prototype, "_reservationRequired", {
        get: function () {
            var remote = this.RemoteRoomProcess;
            if (!remote || !remote._room || !remote._room.controller || remote._room.controller.my) {
                return false;
            }
            if (!remote._room.controller.reservation || remote._room.controller.reservation.username != 'o4kapuk') {
                return true;
            }
            return _.isUndefined(this._endReservationTime) || (this._endReservationTime - Game.time) < 1000;
        },
        enumerable: true,
        configurable: true
    });
    Reserving.prototype._getReserverSetup = function () {
        var parts = Math.min(10, Math.floor(this.ParentRoom.energyCapacityAvailable / 650));
        return "reserver/" + parts + "k" + parts + "m";
    };
    Reserving.prototype._getPopulation = function () {
        var remote = this.RemoteRoomProcess;
        if (!this._reservationRequired || !this.ParentRoom || remote.invaded) {
            return {};
        }
        var assign = this._minedRoomName;
        return {
            assign: {
                setupString: this._getReserverSetup(),
                assignment: assign,
                positions: 1,
                proirity: 1,
            }
        };
    };
    Object.defineProperty(Reserving.prototype, "RemoteRoomProcess", {
        get: function () {
            if (!_.isUndefined(this.memory['rpId'])) {
                return ProcessList_1.GetProcessById(this.memory['rpId']);
            }
            var rootRoomProcess = this.GetProcessInParentChain("/usr/bin/remote");
            if (rootRoomProcess != null) {
                this.memory['rpId'] = rootRoomProcess.id;
            }
            return rootRoomProcess;
        },
        enumerable: true,
        configurable: true
    });
    return Reserving;
}(PopulatedProcess_1.PopulatedProcess));
exports.Reserving = Reserving;


/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var PopulatedProcess_1 = __webpack_require__(10);
var ActiveRepair = (function (_super) {
    __extends(ActiveRepair, _super);
    function ActiveRepair() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = "/usr/bin/active-repair";
        return _this;
    }
    ActiveRepair.prototype.tick = function () {
        this._handleCreeps();
        this._handlePopulation();
    };
    ActiveRepair.prototype.SpawningAllowed = function () {
        return true;
    };
    ActiveRepair.prototype._getPopulation = function () {
        var result = {};
        var workerAssign = this._defaultRepairPosition.pack().toString();
        result[workerAssign] = {
            setupString: 'boostedWorker/40wB35cC36mM3',
            assignment: workerAssign,
            positions: 1,
            proirity: 2
        };
        return result;
    };
    Object.defineProperty(ActiveRepair.prototype, "ParentRoomName", {
        get: function () {
            return this._roomName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActiveRepair.prototype, "ParentRoom", {
        get: function () {
            return this._room;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActiveRepair.prototype, "_room", {
        get: function () {
            return Game.rooms[this._roomName];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActiveRepair.prototype, "_roomName", {
        get: function () {
            return this.processInfo.args[0];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActiveRepair.prototype, "_defaultRepairPosition", {
        get: function () {
            return this._room.terminal.pos;
        },
        enumerable: true,
        configurable: true
    });
    return ActiveRepair;
}(PopulatedProcess_1.PopulatedProcess));
exports.ActiveRepair = ActiveRepair;


/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Process_1 = __webpack_require__(5);
var Template_1 = __webpack_require__(52);
var TickCache_1 = __webpack_require__(1);
var RoomProvider_1 = __webpack_require__(12);
var Config_1 = __webpack_require__(8);
var maxCSites = 15;
var Autobuilder = (function (_super) {
    __extends(Autobuilder, _super);
    function Autobuilder() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = "/usr/bin/autobuilder";
        return _this;
    }
    Autobuilder.prototype.tick = function () {
        var plannedStructures = this._getPlannedStructures();
        var csCount = this._room.find(FIND_CONSTRUCTION_SITES).length;
        if (csCount >= maxCSites) {
            this.sleep(10);
            return;
        }
        var terrain = Game.map.getRoomTerrain(this._roomName);
        var _loop_1 = function (structure) {
            if ((terrain.get(structure.pos.x, structure.pos.y) & TERRAIN_MASK_WALL) && (structure.structureType != STRUCTURE_EXTRACTOR)) {
                return "continue";
            }
            var existingCSite = this_1._room.lookForAt(LOOK_CONSTRUCTION_SITES, structure.pos.x, structure.pos.y);
            var existingStructures = this_1._room.lookForAt(LOOK_STRUCTURES, structure.pos.x, structure.pos.y);
            var structureExists = _.some(existingStructures, function (s) { return s.structureType == structure.structureType; });
            var cSiteExists = _.some(existingCSite);
            if (structureExists || cSiteExists) {
                return "continue";
            }
            var result = (structure.name == null) ?
                this_1._room.createConstructionSite(structure.pos.x, structure.pos.y, structure.structureType) :
                this_1._room.createConstructionSite(structure.pos.x, structure.pos.y, structure.structureType, structure.name);
            if (result == OK) {
                csCount++;
                RoomProvider_1.default.UpdateRoom(this_1._room);
            }
            else {
                console.log("Error creating construction site for " + structure.structureType + " at " + structure.pos + " (" + result + ")");
            }
            if (csCount >= maxCSites) {
                this_1.sleep(10);
                return { value: void 0 };
            }
        };
        var this_1 = this;
        for (var _i = 0, plannedStructures_1 = plannedStructures; _i < plannedStructures_1.length; _i++) {
            var structure = plannedStructures_1[_i];
            var state_1 = _loop_1(structure);
            if (typeof state_1 === "object")
                return state_1.value;
        }
        if (csCount == 0) {
            if (this._room.controller.level == 8) {
                console.log(this._roomName + ": building complete");
                this._template.onCompleted(this._room);
            }
            this.sleep(1000);
        }
    };
    Object.defineProperty(Autobuilder.prototype, "_room", {
        get: function () {
            return Game.rooms[this._roomName];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Autobuilder.prototype, "_roomName", {
        get: function () {
            return this.processInfo.args[0];
        },
        enumerable: true,
        configurable: true
    });
    Autobuilder.prototype._getPlannedStructures = function () {
        var _this = this;
        var roomName = this._roomName;
        var center = this._templateCenter;
        var template = this._template;
        if (template == null) {
            return null;
        }
        var items = _.filter(template.Items, function (i) { return i.level <= _this._room.controller.level; }).sort(function (a, b) { return a.level - b.level; });
        if (!Config_1.BuildConfig.AutoShield) {
            items = _.reject(items, { structureType: STRUCTURE_RAMPART });
        }
        var structures = items.map(function (i) { return { structureType: i.structureType, pos: new RoomPosition(center.x + i.dx, center.y + i.dy, roomName), name: i.name }; });
        if (this._room.controller.level >= 6) {
            var extractor = _.first(TickCache_1.__find(this._room, FIND_STRUCTURES, { filter: function (s) { return s.structureType == STRUCTURE_EXTRACTOR; } }));
            if (_.isUndefined(extractor)) {
                var mineral = _.first(TickCache_1.__find(this._room, FIND_MINERALS));
                if (!_.isUndefined(mineral)) {
                    structures.push({ structureType: STRUCTURE_EXTRACTOR, pos: mineral.pos });
                }
            }
        }
        return structures;
    };
    Object.defineProperty(Autobuilder.prototype, "_templateCenter", {
        get: function () {
            if (_.isUndefined(this._room.memory['templateCenter'])) {
                return null;
            }
            return RoomPosition.unpack(this._room.memory['templateCenter']);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Autobuilder.prototype, "_template", {
        get: function () {
            return Template_1.templateFactory[this._templateName] ? Template_1.templateFactory[this._templateName](this._room) : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Autobuilder.prototype, "_templateName", {
        get: function () {
            return this._room.memory['templateName'];
        },
        enumerable: true,
        configurable: true
    });
    return Autobuilder;
}(Process_1.Process));
exports.default = Autobuilder;


/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Room_1 = __webpack_require__(35);
var CentralMining = (function (_super) {
    __extends(CentralMining, _super);
    function CentralMining() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = '/usr/bin/central-mining';
        return _this;
    }
    CentralMining.prototype.tick = function () {
    };
    CentralMining.prototype._onInvasionStarted = function (threatLevel) {
        console.log("" + threatLevel);
    };
    CentralMining.prototype._onInvasionEnded = function () {
    };
    return CentralMining;
}(Room_1.ProcessRoom));
exports.default = CentralMining;


/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var PopulatedProcess_1 = __webpack_require__(10);
var Setup_1 = __webpack_require__(18);
var Spawn_1 = __webpack_require__(3);
var BunkerCharge = (function (_super) {
    __extends(BunkerCharge, _super);
    function BunkerCharge() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(BunkerCharge.prototype, "name", {
        get: function () {
            return "/usr/bin/bunker-charge";
        },
        enumerable: true,
        configurable: true
    });
    BunkerCharge.prototype.tick = function () {
        if (this.processInfo.executionTicks < 5) {
            this._cleanupPreviousChargers();
        }
        this._handleCreeps();
        this._handlePopulation();
    };
    BunkerCharge.prototype.SpawningAllowed = function () {
        return true;
    };
    BunkerCharge.prototype._getPopulation = function () {
        if (this._room.storage == null) {
            return {};
        }
        var storagePos = this._room.storage.pos;
        var result = {};
        var assigns = [];
        if (this._room.energyCapacityAvailable >= 1300) {
            assigns.push(new RoomPosition(storagePos.x + 1, storagePos.y - 1, storagePos.roomName).pack().toString());
        }
        if (this._room.energyCapacityAvailable >= 1800) {
            assigns.push(new RoomPosition(storagePos.x - 1, storagePos.y - 1, storagePos.roomName).pack().toString());
        }
        if (this._room.energyCapacityAvailable >= 5600) {
            assigns.push(new RoomPosition(storagePos.x - 1, storagePos.y + 1, storagePos.roomName).pack().toString());
        }
        var setup = this._maxChargerSetup;
        var _a = /^(.*)\/(.*)$/.exec(setup), behavior = _a[1];
        if (!_.some(this._getCurrentCreeps(), function (c) { return c.name.startsWith(behavior); })) {
            result[this._roomName] = {
                assignment: this._roomName,
                positions: 1,
                proirity: -16,
                setupString: this._emergencyChargerSetup
            };
        }
        for (var _i = 0, assigns_1 = assigns; _i < assigns_1.length; _i++) {
            var assign = assigns_1[_i];
            result[assign] = {
                assignment: assign,
                positions: 1,
                proirity: -15,
                setupString: setup
            };
        }
        if (this._room.storage && this._room.terminal && (this._room.storage.pos.getRangeTo(this._room.terminal.pos) <= 2)) {
            var tcAssign = new RoomPosition(storagePos.x + 1, storagePos.y + 1, storagePos.roomName).pack().toString();
            result[tcAssign] = {
                assignment: tcAssign,
                positions: 1,
                proirity: -14,
                setupString: Setup_1.GetCreepSetups()['greaterStationaryCharger']
            };
        }
        return result;
    };
    Object.defineProperty(BunkerCharge.prototype, "_maxChargerSetup", {
        get: function () {
            var segments = Math.min(Math.floor(this.ParentRoom.energyCapacityAvailable / 150), 16);
            return "combinedCharger/" + 2 * segments + "c" + segments + "m";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BunkerCharge.prototype, "_emergencyChargerSetup", {
        get: function () {
            var segments = Math.min(Math.floor(this.ParentRoom.energyAvailable / 150), 16);
            return "mobileCharger/" + 2 * segments + "c" + segments + "m";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BunkerCharge.prototype, "ParentRoomName", {
        get: function () {
            return this._roomName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BunkerCharge.prototype, "ParentRoom", {
        get: function () {
            return this._room;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BunkerCharge.prototype, "_room", {
        get: function () {
            return Game.rooms[this._roomName];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BunkerCharge.prototype, "_roomName", {
        get: function () {
            return this.processInfo.args[0];
        },
        enumerable: true,
        configurable: true
    });
    BunkerCharge.prototype._cleanupPreviousChargers = function () {
        delete this._room.memory['chargeRoutes'];
        var chargers = this._room.find(FIND_MY_CREEPS, {
            filter: function (c) { return _.includes(['squareCharger', 'stationaryCharger'], Spawn_1.getRoleByName(c.name)) && (c.carryCapacity < 1200); }
        });
        if (_.some(chargers)) {
            console.log("Cleaning up previous chargers (" + chargers.length + ")");
            _.forEach(chargers, function (c) {
                c.memory['role'] = 'pfMelee';
                c.memory['state'] = 8;
            });
        }
    };
    return BunkerCharge;
}(PopulatedProcess_1.PopulatedProcess));
exports.default = BunkerCharge;


/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var PopulatedProcess_1 = __webpack_require__(10);
var Rooms_1 = __webpack_require__(14);
var Diamond = (function (_super) {
    __extends(Diamond, _super);
    function Diamond() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(Diamond.prototype, "name", {
        get: function () {
            return "/usr/bin/diamond";
        },
        enumerable: true,
        configurable: true
    });
    Diamond.prototype.tick = function () {
        this._handleCreeps();
        this._handlePopulation();
    };
    Diamond.prototype.SpawningAllowed = function () {
        return true;
    };
    Diamond.prototype._getPopulation = function () {
        var result = {};
        if (this._diamondPosition != null) {
            var assign = this._diamondPosition.pack().toString();
            result[assign] = {
                assignment: assign,
                positions: this._room.controller.level == 8 ? 2 : 1,
                proirity: -10,
                setupString: this._room.controller.level > 6 ? 'circularCharger/16c8m' : 'circularCharger/8c4m'
            };
        }
        return result;
    };
    Object.defineProperty(Diamond.prototype, "ParentRoomName", {
        get: function () {
            return this._roomName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Diamond.prototype, "ParentRoom", {
        get: function () {
            return this._room;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Diamond.prototype, "_room", {
        get: function () {
            return Game.rooms[this._roomName];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Diamond.prototype, "_roomName", {
        get: function () {
            return this.processInfo.args[0];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Diamond.prototype, "_diamondPosition", {
        get: function () {
            if (_.isUndefined(this.memory['pos'])) {
                var pos = Rooms_1.findDiamond(this._room);
                this.memory['pos'] = pos == null ? null : pos.pack();
            }
            return this.memory['pos'] == null ? null : RoomPosition.unpack(this.memory['pos']);
        },
        enumerable: true,
        configurable: true
    });
    return Diamond;
}(PopulatedProcess_1.PopulatedProcess));
exports.Diamond = Diamond;


/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var PopulatedProcess_1 = __webpack_require__(10);
var Setup_1 = __webpack_require__(18);
var Square = (function (_super) {
    __extends(Square, _super);
    function Square() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(Square.prototype, "name", {
        get: function () {
            return "/usr/bin/square";
        },
        enumerable: true,
        configurable: true
    });
    Square.prototype.tick = function () {
        this._handleCreeps();
        this._handlePopulation();
    };
    Square.prototype.SpawningAllowed = function () {
        return true;
    };
    Square.prototype._getPopulation = function () {
        if (this._room.storage == null) {
            return {};
        }
        var storagePos = this._room.storage.pos;
        var result = {};
        if (this._room.energyCapacityAvailable >= 1300) {
            var assign1 = new RoomPosition(storagePos.x - 2, storagePos.y + 1, storagePos.roomName).pack().toString();
            result[assign1] = {
                assignment: assign1,
                positions: 1,
                proirity: -10,
                setupString: this._room.controller.level > 7 ? 'squareCharger/16c8m' : 'squareCharger/8c4m'
            };
        }
        if (this._room.energyCapacityAvailable >= 1800) {
            var assign3 = new RoomPosition(storagePos.x + 1, storagePos.y - 2, storagePos.roomName).pack().toString();
            result[assign3] = {
                assignment: assign3,
                positions: 1,
                proirity: -10,
                setupString: this._room.controller.level > 7 ? 'squareCharger/16c8m' : 'squareCharger/8c4m'
            };
        }
        if (this._room.energyCapacityAvailable >= 5600) {
            var assign2 = new RoomPosition(storagePos.x - 1, storagePos.y - 2, storagePos.roomName).pack().toString();
            result[assign2] = {
                assignment: assign2,
                positions: 1,
                proirity: -10,
                setupString: this._room.controller.level > 7 ? 'squareCharger/16c8m' : 'squareCharger/8c4m'
            };
        }
        var assigns = [];
        if (this._room.energyCapacityAvailable >= 1300) {
            assigns.push(new RoomPosition(storagePos.x - 1, storagePos.y + 1, storagePos.roomName).pack().toString());
        }
        if (this._room.energyCapacityAvailable >= 1800) {
            assigns.push(new RoomPosition(storagePos.x + 1, storagePos.y - 1, storagePos.roomName).pack().toString());
        }
        if (this._room.energyCapacityAvailable >= 5600) {
            assigns.push(new RoomPosition(storagePos.x - 1, storagePos.y - 1, storagePos.roomName).pack().toString());
        }
        for (var _i = 0, assigns_1 = assigns; _i < assigns_1.length; _i++) {
            var assign = assigns_1[_i];
            result[assign] = {
                assignment: assign,
                positions: 1,
                proirity: -15,
                setupString: Setup_1.GetCreepSetups()['stationaryCharger']
            };
        }
        if (this._room.controller.level == 8) {
            var tcAssign = new RoomPosition(storagePos.x + 1, storagePos.y + 1, storagePos.roomName).pack().toString();
            result[tcAssign] = {
                assignment: tcAssign,
                positions: 1,
                proirity: -16,
                setupString: Setup_1.GetCreepSetups()['greaterStationaryCharger']
            };
        }
        return result;
    };
    Object.defineProperty(Square.prototype, "ParentRoomName", {
        get: function () {
            return this._roomName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Square.prototype, "ParentRoom", {
        get: function () {
            return this._room;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Square.prototype, "_room", {
        get: function () {
            return Game.rooms[this._roomName];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Square.prototype, "_roomName", {
        get: function () {
            return this.processInfo.args[0];
        },
        enumerable: true,
        configurable: true
    });
    return Square;
}(PopulatedProcess_1.PopulatedProcess));
exports.Square = Square;


/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var TickCache_1 = __webpack_require__(1);
var RoomAnalyzer_1 = __webpack_require__(89);
var PopulatedProcess_1 = __webpack_require__(10);
var BasicTowers_1 = __webpack_require__(57);
var CreepAnalyzer_1 = __webpack_require__(15);
var CoordinatedDefense = (function (_super) {
    __extends(CoordinatedDefense, _super);
    function CoordinatedDefense() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = "/usr/bin/coordinated-defense";
        return _this;
    }
    CoordinatedDefense.prototype.tick = function () {
        BasicTowers_1.flushTargetLocks();
        var raid = this._planCoordinatedAttack();
        if (raid != null) {
            this._room.memory['focusFire'] = raid.target.id;
            console.log("Selected target: " + raid.target.id + " (" + raid.actors.length + " actor(s))");
            this._room.visual.circle(raid.target.pos.x, raid.target.pos.y);
            this._supportRaid();
        }
        else {
            console.log("No coordinated raid in " + this._roomName);
            _.each(this.towers, CoordinatedDefense.processTower);
        }
        this._handleCreeps();
        this._handlePopulation();
    };
    Object.defineProperty(CoordinatedDefense.prototype, "populationCheckInterval", {
        get: function () {
            return 15;
        },
        enumerable: true,
        configurable: true
    });
    CoordinatedDefense.prototype._rampartsUnderThreat = function () {
        console.log("Updating population for active defense of room " + this._roomName);
        var rampartsUnderThreat = TickCache_1.__find(this._room, FIND_MY_STRUCTURES, {
            filter: function (s) { return (function (s) { return s.structureType == STRUCTURE_RAMPART; }) &&
                s.pos.isWalkable() &&
                _.some(TickCache_1.__findInRange(s.pos, FIND_HOSTILE_CREEPS, 3)) &&
                s.pos.getRangeTo(s.room.storage) == 6; }
        });
        return rampartsUnderThreat.map(function (s) { return s.pos.pack(); });
    };
    CoordinatedDefense.prototype._planCoordinatedAttack = function () {
        var roomCombatData = RoomAnalyzer_1.default.CombatEffectiveness(this._room);
        var roomCenter = this._room.storage == null ? new RoomPosition(25, 25, this._roomName) : this._room.storage.pos;
        var currentlyFocused = Game.getObjectById(this._room.memory['focusFire']);
        if (currentlyFocused != null) {
            if ((roomCenter.getRangeTo(currentlyFocused) > 9) && (currentlyFocused.hits >= currentlyFocused.hitsMax)) {
                delete this._room.memory['focusFire'];
            }
            else {
                return null;
            }
        }
        var enemies = TickCache_1.__find(this._room, FIND_HOSTILE_CREEPS);
        for (var _i = 0, enemies_1 = enemies; _i < enemies_1.length; _i++) {
            var e = enemies_1[_i];
            var p = 50 * e.pos.x + e.pos.y;
            if (roomCombatData.hHeal[p] >= roomCombatData.myDamage[p]) {
                this._room.visual.circle(e.pos.x, e.pos.y, { fill: 'green' });
            }
            else {
                this._room.visual.circle(e.pos.x, e.pos.y, { fill: 'blue' });
            }
        }
        var senitels = TickCache_1.__find(this._room, FIND_MY_CREEPS, {
            filter: function (c) { return c.name.startsWith('senitel') || c.name.startsWith('guardian') || c.name.startsWith('assaultRanger') || c.name.startsWith('remoteMelee'); }
        });
        var enemiesUnderFire = [];
        for (var _a = 0, enemies_2 = enemies; _a < enemies_2.length; _a++) {
            var enemy = enemies_2[_a];
            enemiesUnderFire.push({
                enemy: enemy,
                threat: CreepAnalyzer_1.CreepAnalyzer.GetThreatLevel(enemy, true),
                actors: enemy.pos.findInRange(senitels, 3),
            });
        }
        if (!_.some(enemiesUnderFire)) {
            console.log(this._roomName + ": no enemies under fire");
            delete this._room.memory['focusFire'];
            return null;
        }
        enemiesUnderFire = enemiesUnderFire.sort(function (a, b) { return b.actors.length - a.actors.length; });
        var mostActors = _.first(enemiesUnderFire).actors.length;
        console.log(this._roomName + ": most actors " + mostActors);
        var log = this._room.getEventLog(false);
        var heals = _.filter(log, { event: 6 });
        console.log(enemiesUnderFire.length + " under fire, " + heals.length + " heal records");
        var possibleTargets = _.filter(enemiesUnderFire, function (e) { return e.actors.length == mostActors; })
            .sort(function (a, b) {
            var hha = _.filter(heals, function (h) { return h.data.targetId == a.enemy.id; });
            var hhb = _.filter(heals, function (h) { return h.data.targetId == b.enemy.id; });
            return hha.length - hhb.length ||
                (a.enemy.getActiveBodyparts(HEAL) - b.enemy.getActiveBodyparts(HEAL)) ||
                (a.enemy.pos.getRangeTo(roomCenter) - b.enemy.pos.getRangeTo(roomCenter)) ||
                (a.threat.EffectiveHp - b.threat.EffectiveHp) ||
                (TickCache_1.__findInRange(a.enemy.pos, FIND_HOSTILE_CREEPS, 1).length - TickCache_1.__findInRange(b.enemy.pos, FIND_HOSTILE_CREEPS, 1).length) ||
                (b.enemy.ticksToLive - a.enemy.ticksToLive);
        });
        var target = _.first(possibleTargets);
        console.log("Target selected: " + target.enemy.id + " (" + _.filter(heals, function (h) { return h.data.targetId == target.enemy.id; }).length + ")");
        return { target: target.enemy, actors: target.actors };
    };
    CoordinatedDefense.processTower = function (tower) {
        if (tower.energy < 10) {
            return;
        }
        if (tower.room.memory['stopTowers']) {
            return;
        }
        BasicTowers_1.BasicTowers.healDefenders(tower) ||
            BasicTowers_1.BasicTowers.spreadFire(tower) ||
            BasicTowers_1.BasicTowers.attackEnemies(tower, 9) ||
            BasicTowers_1.BasicTowers.healAllies(tower) ||
            BasicTowers_1.BasicTowers.repairStructures(tower) ||
            BasicTowers_1.BasicTowers.fortify(tower);
    };
    CoordinatedDefense.prototype._supportRaid = function () {
        if (this._room.memory['stopTowers']) {
            return;
        }
        var ally = Game.getObjectById(this._room.memory['focusHeal']);
        if (ally != null) {
            _.each(this.towers, function (t) { return t.heal(ally); });
        }
        var target = Game.getObjectById(this._room.memory['focusFire']);
        if (target != null) {
            _.each(this.towers, function (t) { return t.attack(target); });
            return true;
        }
        return true;
    };
    Object.defineProperty(CoordinatedDefense.prototype, "towers", {
        get: function () {
            if (_.isUndefined(this.memory['towers'])) {
                var towers = TickCache_1.__find(this._room, FIND_MY_STRUCTURES, {
                    filter: function (s) { return s.structureType === STRUCTURE_TOWER; }
                });
                this.memory['towers'] = towers.map(function (t) { return t.id; });
                return towers;
            }
            return this.memory['towers'].map(function (i) { return Game.getObjectById(i); });
        },
        enumerable: true,
        configurable: true
    });
    CoordinatedDefense.prototype.SpawningAllowed = function () {
        return true;
    };
    CoordinatedDefense.prototype._getPopulation = function () {
        var result = this._cachedPopulation() || {};
        if (this._room.controller.level < 8) {
            return result;
        }
        var positions = this._rampartsUnderThreat();
        for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {
            var p = positions_1[_i];
            var assign = p.toString();
            result[assign] = {
                setupString: 'senitel/44rR36mM3',
                assignment: assign,
                positions: 1,
                proirity: 1
            };
        }
        var skips = [];
        for (var assign in result) {
            skips.push(assign);
        }
        for (var _a = 0, skips_1 = skips; _a < skips_1.length; _a++) {
            var s = skips_1[_a];
            delete result[s];
        }
        console.log(this._roomName + ": updating defending population, new count " + _.keys(result).length);
        for (var _b = 0, _c = _.keys(result); _b < _c.length; _b++) {
            var p = _c[_b];
            var pos = RoomPosition.unpack(parseInt(p));
            this._room.visual.circle(pos.x, pos.y);
        }
        return result;
    };
    Object.defineProperty(CoordinatedDefense.prototype, "ParentRoomName", {
        get: function () {
            return this._roomName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CoordinatedDefense.prototype, "ParentRoom", {
        get: function () {
            return this._room;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CoordinatedDefense.prototype, "_room", {
        get: function () {
            return Game.rooms[this._roomName];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CoordinatedDefense.prototype, "_roomName", {
        get: function () {
            return this.processInfo.args[0];
        },
        enumerable: true,
        configurable: true
    });
    return CoordinatedDefense;
}(PopulatedProcess_1.PopulatedProcess));
exports.CoordinatedDefense = CoordinatedDefense;


/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var TickCache_1 = __webpack_require__(1);
function MakeHappy(room) {
    var allRamparts = TickCache_1.__find(room, FIND_STRUCTURES, {
        filter: function (s) { return s.structureType == STRUCTURE_RAMPART; }
    });
    var upRamparts = _.filter(allRamparts, function (s) { return s.pos.isEqualTo(room.storage.pos.x - 1, room.storage.pos.y + 2); }).concat(_.filter(allRamparts, function (s) { return s.pos.isEqualTo(room.storage.pos.x + 1, room.storage.pos.y + 2); }));
    var downRamparts = _.filter(allRamparts, function (s) { return s.pos.isEqualTo(room.storage.pos.x - 1, room.storage.pos.y + 4); }).concat(_.filter(allRamparts, function (s) { return s.pos.isEqualTo(room.storage.pos.x + 1, room.storage.pos.y + 4); }));
    var outerRamparts = _.filter(allRamparts, function (s) { return (s.pos.getRangeTo(room.storage) > 6) && (s.pos.getRangeTo(room.controller) > 1); });
    _.forEach(upRamparts, function (r) { return r.setPublic(true); });
    _.forEach(downRamparts, function (r) { return r.setPublic(false); });
    _.forEach(outerRamparts, function (r) { return r.setPublic(true); });
}
exports.MakeHappy = MakeHappy;
function MakeUnhappy(room) {
    var allRamparts = TickCache_1.__find(room, FIND_STRUCTURES, {
        filter: function (s) { return s.structureType == STRUCTURE_RAMPART; }
    });
    var upRamparts = _.filter(allRamparts, function (s) { return s.pos.isEqualTo(room.storage.pos.x - 1, room.storage.pos.y + 2); }).concat(_.filter(allRamparts, function (s) { return s.pos.isEqualTo(room.storage.pos.x + 1, room.storage.pos.y + 2); }));
    var downRamparts = _.filter(allRamparts, function (s) { return s.pos.isEqualTo(room.storage.pos.x - 1, room.storage.pos.y + 4); }).concat(_.filter(allRamparts, function (s) { return s.pos.isEqualTo(room.storage.pos.x + 1, room.storage.pos.y + 4); }));
    var outerRamparts = _.filter(allRamparts, function (s) { return (s.pos.getRangeTo(room.storage) > 6) && (s.pos.getRangeTo(room.controller) > 1); });
    _.forEach(upRamparts, function (r) { return r.setPublic(false); });
    _.forEach(downRamparts, function (r) { return r.setPublic(true); });
    _.forEach(outerRamparts, function (r) { return r.setPublic(false); });
}
exports.MakeUnhappy = MakeUnhappy;


/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var SimpleTaskProcessor_1 = __webpack_require__(58);
var Factory = (function (_super) {
    __extends(Factory, _super);
    function Factory() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(Factory.prototype, "name", {
        get: function () {
            return "/usr/bin/factory-task";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Factory.prototype, "agent", {
        get: function () {
            var task = this.task;
            return this.GetCachedObject('factory', function () {
                return _.first(task.room.find(FIND_MY_STRUCTURES, { filter: { structureType: STRUCTURE_FACTORY } }));
            });
        },
        enumerable: true,
        configurable: true
    });
    return Factory;
}(SimpleTaskProcessor_1.SimpleTaskProcessor));
exports.Factory = Factory;


/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var SimpleTaskProcessor_1 = __webpack_require__(58);
var Labs = (function (_super) {
    __extends(Labs, _super);
    function Labs() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(Labs.prototype, "name", {
        get: function () {
            return "/usr/bin/simple-labs";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Labs.prototype, "agent", {
        get: function () {
            return this.task.room.terminal;
        },
        enumerable: true,
        configurable: true
    });
    return Labs;
}(SimpleTaskProcessor_1.SimpleTaskProcessor));
exports.Labs = Labs;


/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Process_1 = __webpack_require__(5);
var Rooms_1 = __webpack_require__(14);
var Links = (function (_super) {
    __extends(Links, _super);
    function Links() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(Links.prototype, "name", {
        get: function () {
            return "/usr/bin/links";
        },
        enumerable: true,
        configurable: true
    });
    Links.prototype.tick = function () {
        this.UpdateLinksCache();
        var links = this._linksConfig;
        var usedLink = [];
        for (var structureId in links) {
            var s = Game.getObjectById(structureId);
            if (s == null) {
                delete this.memory['config'];
                delete this._room.memory['linksConfig'];
                return;
            }
            if ((s.cooldown > 0) || (s.energy < 800)) {
                continue;
            }
            var targets = links[s.id];
            for (var i = 0; i < targets.length; i++) {
                var target = Game.getObjectById(targets[i]);
                if (target == null) {
                    delete this.memory['config'];
                    delete this._room.memory['linksConfig'];
                    console.log("<font color=\"red\">No link " + targets[i] + "</font>");
                    continue;
                }
                if (!_.includes(usedLink, target.id) && (target.energy <= 26)) {
                    s.transferEnergy(target);
                    usedLink.push(target.id);
                    break;
                }
            }
        }
    };
    Links.prototype.UpdateLinksCache = function () {
        var currentLinks = this._room.find(FIND_STRUCTURES, { filter: function (s) { return s.structureType == STRUCTURE_LINK; } }).length;
        if (currentLinks != this.memory['currentLinks']) {
            this.memory['currentLinks'] = currentLinks;
            delete this.memory['config'];
            delete this._room.memory['linksConfig'];
        }
    };
    Object.defineProperty(Links.prototype, "_linksConfig", {
        get: function () {
            if (_.isUndefined(this.memory['config'])) {
                this.memory['config'] = Rooms_1.BuildLinksConfig(this._room);
            }
            return this.memory['config'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Links.prototype, "_room", {
        get: function () {
            return Game.rooms[this._roomName];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Links.prototype, "_roomName", {
        get: function () {
            return this.processInfo.args[0];
        },
        enumerable: true,
        configurable: true
    });
    return Links;
}(Process_1.Process));
exports.Links = Links;


/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var PopulatedProcess_1 = __webpack_require__(10);
var TickCache_1 = __webpack_require__(1);
var CreepSetup_1 = __webpack_require__(72);
var Setup_1 = __webpack_require__(18);
var Traveler_1 = __webpack_require__(16);
var PathUtils_1 = __webpack_require__(19);
var MineralsHarvesting = (function (_super) {
    __extends(MineralsHarvesting, _super);
    function MineralsHarvesting() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = "/usr/bin/minerals-harvesting";
        return _this;
    }
    MineralsHarvesting.prototype.tick = function () {
        this._handleCreeps();
        this._handlePopulation();
        if (this._mineral.mineralAmount == 0) {
            this._recycleHarvesters();
        }
        if ((this._container != null) && (Game.cpu.bucket > 8400)) {
            for (var _i = 0, _a = this._harvestingPositions; _i < _a.length; _i++) {
                var p = _a[_i];
                this._room.visual.circle(p.x, p.y, { fill: 'green' });
            }
            var pickup = this._pickupPosition;
            this._room.visual.text('🚛', pickup.x, pickup.y);
        }
    };
    MineralsHarvesting.prototype._recycleHarvesters = function () {
        for (var _i = 0, _a = this._getCurrentCreeps(); _i < _a.length; _i++) {
            var creep = _a[_i];
            if (creep.getActiveBodyparts(WORK)) {
                creep.memory['state'] = 255;
            }
        }
    };
    MineralsHarvesting.prototype._getPopulation = function () {
        if ((this._container == null) || (this._mineral.mineralAmount == 0)) {
            return {};
        }
        var result = {};
        var assign = this._container.pos.pack();
        result[assign] = {
            setupString: this._harvesterSetup,
            assignment: assign.toString(),
            positions: 1,
            proirity: 3
        };
        var transportsAssign = this._pickupPosition.pack().toString();
        var transportSetup = this._transportsSetup;
        result[transportsAssign] = {
            setupString: transportSetup.setup,
            assignment: transportsAssign,
            positions: transportSetup.amount,
            proirity: 4
        };
        return result;
    };
    Object.defineProperty(MineralsHarvesting.prototype, "_pickupPosition", {
        get: function () {
            if (_.isUndefined(this.memory['pickupPosition'])) {
                this.memory['pickupPosition'] = _.last(this._getRoute()).pack();
            }
            return RoomPosition.unpack(this.memory['pickupPosition']);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MineralsHarvesting.prototype, "_transportsSetup", {
        get: function () {
            var workPerHarvester = (this.ParentRoom.energyCapacityAvailable > 5300) ? 32 : 18;
            return MineralsHarvesting.CalculateTransportSetup(3 * workPerHarvester, this.routeLength, this.ParentRoom.energyCapacityAvailable);
        },
        enumerable: true,
        configurable: true
    });
    MineralsHarvesting.CalculateTransportSetup = function (harvestingWorkparts, routeLength, energyCapacityAvailable) {
        var excessTicks = 0;
        var unitsPerTick = Math.ceil(harvestingWorkparts / 6);
        var requiredCarryCapacity = Math.ceil(2 * unitsPerTick * excessTicks + 2 * unitsPerTick * routeLength);
        var requiredCarryParts = 1 + Math.ceil(requiredCarryCapacity / 50);
        var amount = 1;
        while (true) {
            var setupString = "transport/" + Math.ceil(requiredCarryParts / amount) + "c" + Math.ceil(Math.ceil(requiredCarryParts / (amount)) / 2) + "m";
            var body = CreepSetup_1.makeBody(CreepSetup_1.makeSetup(setupString));
            if ((body.length <= 50) && (Setup_1.getCost(body) <= energyCapacityAvailable)) {
                return {
                    amount: amount,
                    setup: setupString
                };
            }
            amount++;
        }
    };
    Object.defineProperty(MineralsHarvesting.prototype, "_harvesterSetup", {
        get: function () {
            return this.ParentRoom.energyCapacityAvailable > 5300 ? 'mineralLeecher/40wG12cC17mM2' : 'mineralLeecher/18w1c9m';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MineralsHarvesting.prototype, "routeLength", {
        get: function () {
            var route = this._getRoute();
            return (route == null) ? null : route.length;
        },
        enumerable: true,
        configurable: true
    });
    MineralsHarvesting.prototype._getRoute = function () {
        var _this = this;
        if (this._container == null) {
            return null;
        }
        var path = Traveler_1.Traveler.findTravelPath(this.ParentRoom.storage.pos, this._container.pos, {
            obstacles: this._harvestingPositions.map(function (p) { return { pos: p }; }),
            allowSK: false,
            range: 1,
            ignoreCreeps: true,
            roomCallback: function (roomName, matrix) { return PathUtils_1.findCostMatrix(roomName, { pos: _this._container.pos, range: 1 }, 1, 2, 10, true).matrix || matrix; }
        });
        return path.path;
    };
    Object.defineProperty(MineralsHarvesting.prototype, "_container", {
        get: function () {
            if (!_.isUndefined(this.memory['containerId'])) {
                return Game.getObjectById(this.memory['containerId']);
            }
            var container = _.first(TickCache_1.__findInRange(this._mineralPosition, FIND_STRUCTURES, 2, { filter: function (s) { return s.structureType == STRUCTURE_CONTAINER; } }));
            if (container != null) {
                this.memory['containerId'] = container.id;
            }
            return container;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MineralsHarvesting.prototype, "_harvestingPositions", {
        get: function () {
            if (this._container == null) {
                return [];
            }
            if (!_.isUndefined(this.memory['harvestPositions'])) {
                return this.memory['harvestPositions'].map(function (p) { return RoomPosition.unpack(p); });
            }
            var harvestPositions = _.intersection([this._mineralPosition.pack()].concat(this._mineralPosition.around(1, { filter: function (p) { return p.isWalkable(); } }).map(function (p) { return p.pack(); })), [this._container.pos.pack()].concat(this._container.pos.around(1, { filter: function (p) { return p.isWalkable(); } }).map(function (p) { return p.pack(); })));
            this.memory['harvestPositions'] = harvestPositions;
            return harvestPositions.map(function (p) { return RoomPosition.unpack(p); });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MineralsHarvesting.prototype, "_mineralPosition", {
        get: function () {
            return this._mineral.pos;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MineralsHarvesting.prototype, "_mineral", {
        get: function () {
            if (!_.isUndefined(this.memory['mineralId'])) {
                return Game.getObjectById(this.memory['mineralId']);
            }
            var mineral = _.first(TickCache_1.__find(this._room, FIND_MINERALS));
            this.memory['mineralId'] = mineral.id;
            return mineral;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MineralsHarvesting.prototype, "_room", {
        get: function () {
            return Game.rooms[this._roomName];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MineralsHarvesting.prototype, "_roomName", {
        get: function () {
            return this.processInfo.args[0];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MineralsHarvesting.prototype, "ParentRoom", {
        get: function () {
            return this._room;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MineralsHarvesting.prototype, "ParentRoomName", {
        get: function () {
            return this._roomName;
        },
        enumerable: true,
        configurable: true
    });
    return MineralsHarvesting;
}(PopulatedProcess_1.PopulatedProcess));
exports.default = MineralsHarvesting;


/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Task_1 = __webpack_require__(6);
var TasksRepository_1 = __webpack_require__(11);
var BoostsManager_1 = __webpack_require__(20);
var MarketTask_1 = __webpack_require__(27);
var Room_1 = __webpack_require__(35);
var Config_1 = __webpack_require__(8);
var TickCache_1 = __webpack_require__(1);
var Spawn_1 = __webpack_require__(3);
var SquareCosmetic_1 = __webpack_require__(152);
var TaskManager_1 = __webpack_require__(7);
var ChargerBase_1 = __webpack_require__(24);
var ProcessPermanentRoom = (function (_super) {
    __extends(ProcessPermanentRoom, _super);
    function ProcessPermanentRoom() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(ProcessPermanentRoom.prototype, "name", {
        get: function () {
            return "/usr/bin/permanent-room";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProcessPermanentRoom.prototype, "childCheckInterval", {
        get: function () {
            return 15;
        },
        enumerable: true,
        configurable: true
    });
    ProcessPermanentRoom.prototype.tick = function () {
        this._checkInvasion();
        this._checkChildProcesses();
        if (_.isUndefined(this._room.memory['stopSpawning'])) {
            Spawn_1.processSpawnQueue(this._room);
        }
        this.createRoomTasks();
        this.sleep(3);
    };
    ProcessPermanentRoom.prototype.createRoomTasks = function () {
        var _this = this;
        var roomName = this._roomName;
        var lootTasks = TaskManager_1.default.QueryLootTasks(this._roomName);
        var tombstones = TickCache_1.__find(this._room, FIND_TOMBSTONES, { filter: function (t) { return (t.pos.getRangeTo(_this._room.storage) > 2) && (_.sum(t.store) > 50); } });
        var _loop_1 = function (t) {
            if (!_.some(lootTasks, function (task) { return task.Position.isEqualTo(t.pos); })) {
                TaskManager_1.default.AddLootTask(t);
            }
        };
        for (var _i = 0, tombstones_1 = tombstones; _i < tombstones_1.length; _i++) {
            var t = tombstones_1[_i];
            _loop_1(t);
        }
        var resources = TickCache_1.__find(this._room, FIND_DROPPED_RESOURCES, { filter: function (r) { return (r.pos.getRangeTo(_this._room.storage) > 2) && (r.amount > 50); } });
        var _loop_2 = function (r) {
            if (!_.some(lootTasks, function (task) { return task.Position.isEqualTo(r.pos); })) {
                TaskManager_1.default.AddLootTask(r);
            }
        };
        for (var _a = 0, resources_1 = resources; _a < resources_1.length; _a++) {
            var r = resources_1[_a];
            _loop_2(r);
        }
        var factory = _.first(this._room.find(FIND_MY_STRUCTURES, { filter: { structureType: STRUCTURE_FACTORY } }));
        var shardResources = BoostsManager_1.default.GetCurrentResources();
        if (!_.isUndefined(this._room.terminal) &&
            !_.isUndefined(this._room.storage) &&
            !this._room.memory['emptyTerminal'] &&
            (this._room.storage.pos.getRangeTo(this._room.terminal.pos) < 3)) {
            var terminalEnergy = this._room.terminal.store[RESOURCE_ENERGY];
            var totalEnergy = terminalEnergy + this._room.storage.store[RESOURCE_ENERGY];
            var storageSpace = this._room.storage.storeCapacity - _.sum(this._room.storage.store);
            if (!this._room.memory.evac && factory && ((terminalEnergy < 50000) || ((totalEnergy < 260000) && (storageSpace > 100000)))) {
                var deliverTasks = _.filter(TaskManager_1.default.QueryDeliverOrBuyTasks(), { resource: 'battery' });
                if (shardResources['battery'] >= (2000 + _.sum(deliverTasks, function (t) { return t.amount; }))) {
                    if ((this._room.terminal.store['battery'] || 0) < 1000) {
                        if (!_.some(deliverTasks, function (t) { return t.roomName == _this._roomName; })) {
                            TaskManager_1.default.AddDeliverTask('battery', 1000 - (this._room.terminal.store['battery'] || 0), this._roomName);
                        }
                    }
                    else {
                        var factoryTask = TaskManager_1.default.QueryFactoryTaskForRoom(this._room);
                        if (!factoryTask) {
                            TaskManager_1.default.AddProduceCommodityTask(RESOURCE_ENERGY, 1500, this._roomName);
                        }
                    }
                }
                if (terminalEnergy < 40000) {
                    var deliverTasks_1 = TaskManager_1.default.QueryDeliverOrBuyTasks();
                    var roomName_1 = this._roomName;
                    if (!_.some(deliverTasks_1, { roomName: roomName_1 })) {
                        TaskManager_1.default.AddDeliverTask(RESOURCE_ENERGY, 10000, this._roomName);
                        console.log("Creating deliver energy task in " + this._roomName);
                    }
                    else {
                        console.log("Creating deliver energy task in " + this._roomName + " failed, " + deliverTasks_1.length + " tasks found");
                    }
                }
            }
        }
        if (!_.isUndefined(this._room.terminal) && !_.isUndefined(this._room.memory['evac'])) {
            if (_.some(_.keys(this._room.terminal.store), function (k) { return k != RESOURCE_ENERGY; })) {
                var evacTask = _.filter(TaskManager_1.default.QueryEvacuateTasks(), function (t) { return t.roomName == roomName; });
                if (!_.some(evacTask)) {
                    console.log("Creating evac task in " + this._roomName);
                    TaskManager_1.default.AddEvacuateTask(this._roomName);
                }
            }
        }
        if (!_.isUndefined(this._room.storage) && ((this._room.storage.storeCapacity - _.sum(this._room.storage.store)) < 50000)) {
            var factoryTask = TaskManager_1.default.QueryFactoryTaskForRoom(this._room);
            var batteries = (this._room.storage.store['battery'] || 0) + (this._room.terminal.store['battery'] || 0);
            if (factory && !factoryTask && (batteries < 50000)) {
                TaskManager_1.default.AddProduceCommodityTask('battery', 1000, this._roomName);
            }
            else {
                var sellTasks = TasksRepository_1.default.QueryTasks(function (t) { return (t.Type == Task_1.TaskType.SellResource) && (t.resource == RESOURCE_ENERGY) && (t.roomName == _this._roomName); });
                if (!_.some(sellTasks)) {
                    console.log("Creating sell energy task in " + this._roomName);
                    TaskManager_1.default.AddSellTask(RESOURCE_ENERGY, 10000, this._roomName);
                }
            }
        }
        if (this._room.storage && this._room.terminal && (this._room.storage.pos.getRangeTo(this._room.terminal) <= 2) && !this._room.memory['evac']) {
            _.remove(Memory['MarketTasks'], { roomName: this._roomName });
            for (var _b = 0, _c = _.keys(Config_1.MarketResourcesConfig); _b < _c.length; _b++) {
                var resource = _c[_b];
                if (resource == RESOURCE_ENERGY) {
                    continue;
                }
                var amount = (this._room.terminal.store[resource] || 0) +
                    (this._room.storage.store[resource] || 0) +
                    _(this._room.find(FIND_MY_CREEPS)).map('carry.' + resource).sum();
                if (amount < Config_1.ResourcesConfiguration.baseAmount) {
                    if (!_.some(Memory['MarketTasks'], { type: MarketTask_1.MarketTaskType.Buy, roomName: this._roomName, resource: resource })) {
                        Memory['MarketTasks'].push({
                            type: MarketTask_1.MarketTaskType.Buy,
                            resource: resource,
                            price: Config_1.MarketResourcesConfig[resource].MaxBuyPrice,
                            amount: Math.max(1000, Config_1.ResourcesConfiguration.baseAmount - amount),
                            remaining: Math.max(1000, Config_1.ResourcesConfiguration.baseAmount - amount),
                            roomName: this._roomName
                        });
                    }
                }
            }
            var _loop_3 = function (resource) {
                var amount = (this_1._room.terminal.store[resource] || 0) +
                    (this_1._room.storage.store[resource] || 0) +
                    _(this_1._room.find(FIND_MY_CREEPS)).map('carry.' + resource).sum();
                if (REACTIONS[resource] && (amount > 2 * Config_1.ResourcesConfiguration.baseAmount)) {
                    var factoryTask = TaskManager_1.default.QueryFactoryTaskForRoom(this_1._room);
                    if (factory && !factoryTask) {
                        var compressedResource = _.find(_.keys(COMMODITIES), function (r) { return !_.difference(_.keys(COMMODITIES[r].components), [resource, RESOURCE_ENERGY]).length; });
                        if (compressedResource) {
                            TaskManager_1.default.AddProduceCommodityTask(compressedResource, 6 * COMMODITIES[compressedResource].amount, this_1._roomName);
                            return "continue";
                        }
                    }
                }
                var mineral = _.first(this_1._room.find(FIND_MINERALS));
                var nativeMineral = mineral.mineralType;
                var nativeCompressed = _.find(_.keys(COMMODITIES), function (r) { return !_.difference(_.keys(COMMODITIES[r].components), [nativeMineral, RESOURCE_ENERGY]).length; });
                var desiredMultiplier = resource == nativeCompressed ? 5 : 1;
                var desiredAmount = desiredMultiplier * Config_1.AutoSell[resource];
                if (amount > desiredAmount) {
                    var price = 0.9 * _.last(Game.market.getHistory(resource)).avgPrice;
                    if (!_.some(Memory['MarketTasks'], { type: MarketTask_1.MarketTaskType.Sell, roomName: this_1._roomName, resource: resource })) {
                        Memory['MarketTasks'].push({
                            type: MarketTask_1.MarketTaskType.Sell,
                            resource: resource,
                            price: price,
                            amount: amount - desiredAmount,
                            remaining: amount - desiredAmount,
                            roomName: this_1._roomName
                        });
                    }
                }
            };
            var this_1 = this;
            for (var _d = 0, _e = _.keys(Config_1.AutoSell); _d < _e.length; _d++) {
                var resource = _e[_d];
                _loop_3(resource);
            }
            for (var _f = 0, _g = _.keys(Config_1.AutoBuy); _f < _g.length; _f++) {
                var resource = _g[_f];
                var amount = (this._room.terminal.store[resource] || 0) +
                    (this._room.storage.store[resource] || 0) +
                    _(this._room.find(FIND_MY_CREEPS)).map('carry.' + resource).sum();
                if (amount < Config_1.AutoBuy[resource]) {
                    var price = 1.1 * _.last(Game.market.getHistory(resource)).avgPrice;
                    if (!_.some(Memory['MarketTasks'], { type: MarketTask_1.MarketTaskType.Sell, roomName: this._roomName, resource: resource })) {
                        Memory['MarketTasks'].push({
                            type: MarketTask_1.MarketTaskType.Buy,
                            resource: resource,
                            price: price,
                            amount: Config_1.AutoBuy[resource] - amount,
                            remaining: Config_1.AutoBuy[resource] - amount,
                            roomName: this._roomName
                        });
                    }
                }
            }
        }
    };
    Object.defineProperty(ProcessPermanentRoom.prototype, "subprocesses", {
        get: function () {
            var result = [];
            var roomConfig = Config_1.getRoomConfig(this._roomName);
            if (!roomConfig) {
                return [];
            }
            if (this._room.controller.level >= 3) {
                if (this.invaded || this._room.memory['forceDef']) {
                    result.push({
                        imageName: "/usr/bin/coordinated-defense",
                        args: [this._roomName],
                        priority: 4
                    });
                }
                else {
                    result.push({
                        imageName: "/usr/bin/basic-towers",
                        args: [this._roomName],
                        priority: 20 - Math.floor(_.isUndefined(this._room.storage) ? 0 : this._room.storage.store.energy / 50000)
                    });
                }
            }
            if (!_.isUndefined(this._room.memory['templateCenter']) && !_.isUndefined(this._room.memory['templateName'])) {
                result.push({
                    imageName: "/usr/bin/autobuilder",
                    args: [this._roomName],
                    priority: 25
                });
            }
            result.push({
                imageName: "/usr/bin/flags-hub",
                args: [this._roomName],
                priority: 21
            });
            if (_.isUndefined(this._room.storage) || !this._room.storage.my) {
                return result;
            }
            if ((this._room.controller.level >= 5) && (roomConfig.ChargeLayout == Config_1.ChargeLayout.Diamond)) {
                result.push({
                    imageName: "/usr/bin/diamond",
                    args: [this._roomName],
                    priority: 11
                });
            }
            if (_.includes(Config_1.bunkerTypes, roomConfig.ChargeLayout) && (this._room.energyCapacityAvailable >= 1300)) {
                if (_.includes([Config_1.ChargeLayout.BunkerA, Config_1.ChargeLayout.BunkerC], roomConfig.ChargeLayout)) {
                    result.push({
                        imageName: "/usr/bin/bunker-charge",
                        args: [this._roomName],
                        priority: 11
                    });
                }
                else {
                    result.push({
                        imageName: "/usr/bin/square",
                        args: [this._roomName],
                        priority: 11
                    });
                }
            }
            result.push({
                imageName: "/usr/bin/working",
                args: [this._roomName],
                priority: 15
            });
            if ((this._room.controller.level == 8) && (!_.isUndefined(this._room.memory['forceScan']) || _.some(roomConfig.TributeScans) || _.some(roomConfig.PowerScans))) {
                result.push({
                    imageName: "/usr/bin/scand",
                    args: [this._roomName],
                    priority: 16
                });
            }
            if (this._room.controller.level >= 5) {
                result.push({
                    imageName: "/usr/bin/links",
                    args: [this._roomName],
                    priority: 17
                });
            }
            var task = TaskManager_1.default.QueryProduceTaskForRoom(this._room);
            if (task) {
                result.push({
                    imageName: "/usr/bin/simple-labs",
                    args: [task.id],
                    priority: 19
                });
            }
            var factoryTask = TaskManager_1.default.QueryFactoryTaskForRoom(this._room);
            if (factoryTask) {
                result.push({
                    imageName: "/usr/bin/factory-task",
                    args: [factoryTask.id],
                    priority: 19
                });
            }
            if ((this._room.storage != null) && (this._room.energyCapacityAvailable >= 1300)) {
                for (var _i = 0, _a = TickCache_1.__find(this._room, FIND_SOURCES); _i < _a.length; _i++) {
                    var source = _a[_i];
                    var srcLinks = source.pos.findInRange(FIND_STRUCTURES, 2, { filter: function (s) { return (s.structureType == STRUCTURE_LINK) && s.isActive() && ChargerBase_1.ChargerBase._hasAnyClientLink(s); } });
                    if (_.some(srcLinks)) {
                        result.push({
                            imageName: "/usr/bin/linked-harvesting",
                            args: [source.pos.pack()],
                            priority: 16
                        });
                    }
                    else {
                    }
                }
            }
            if (this.invaded) {
                if (this._room.controller.level == 8) {
                }
            }
            var remotes = this._room.memory['remotes'];
            if ((remotes != null) && _.some(remotes)) {
                for (var _b = 0, remotes_1 = remotes; _b < remotes_1.length; _b++) {
                    var remote = remotes_1[_b];
                    result.push({
                        imageName: "/usr/bin/remote",
                        args: [remote],
                        priority: 26
                    });
                }
            }
            if ((this._room.storage != null) && (this._room.storage.store.energy > 160000)) {
                if ((this.powerSpawner != null) &&
                    (this._room.terminal != null) &&
                    ((this._room.terminal.store[RESOURCE_POWER] > 0) || (this.powerSpawner.power > 0))) {
                    result.push({
                        imageName: "/usr/bin/process-power",
                        args: [this._roomName],
                        priority: 22 - Math.floor(this._room.storage.store.energy / 50000)
                    });
                }
            }
            if (this._room.energyCapacityAvailable >= 2300) {
                var extractor = _.first(TickCache_1.__find(this._room, FIND_STRUCTURES, { filter: function (s) { return s.structureType == STRUCTURE_EXTRACTOR; } }));
                var mineral = _.first(TickCache_1.__find(this._room, FIND_MINERALS));
                if ((extractor != null) && (mineral != null) && (mineral.mineralAmount > 0)) {
                    result.push({
                        imageName: "/usr/bin/minerals-harvesting",
                        args: [this._roomName],
                        priority: 13
                    });
                }
            }
            if (this._room.controller.level < 8) {
                if (!_.isUndefined(this._room.memory['terminalUpgrade']) &&
                    !_.isUndefined(this._room.terminal) &&
                    (this._room.terminal.pos.getRangeTo(this._room.controller) < 5) &&
                    (this._room.memory['terminalUpgrade'] == true)) {
                    result.push({
                        imageName: "/usr/bin/terminal-upgrade",
                        args: [this._roomName],
                        priority: 10
                    });
                }
                else {
                    if ((this._room.controller.level < 6) && this._room.memory['containerUpgrade']) {
                        var container = _.first(TickCache_1.__findInRange(this._room.controller.pos, FIND_STRUCTURES, 2, { filter: { structureType: STRUCTURE_CONTAINER } }));
                        if (container != null) {
                            result.push({
                                imageName: "/usr/bin/container-upgrade",
                                args: [this._roomName],
                                priority: 10
                            });
                        }
                    }
                }
            }
            return result;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProcessPermanentRoom.prototype, "powerSpawner", {
        get: function () {
            var _this = this;
            return this.GetCachedObject('powerSpawn', function () { return _.first(TickCache_1.__find(_this._room, FIND_MY_STRUCTURES, { filter: { structureType: STRUCTURE_POWER_SPAWN } })); });
        },
        enumerable: true,
        configurable: true
    });
    ProcessPermanentRoom.prototype._onInvasionStarted = function () {
        var roomConfig = Config_1.getRoomConfig(this._roomName);
        if (_.includes(Config_1.bunkerTypes, roomConfig.ChargeLayout)) {
            SquareCosmetic_1.MakeUnhappy(this._room);
        }
    };
    ProcessPermanentRoom.prototype._onInvasionEnded = function () {
        var roomConfig = Config_1.getRoomConfig(this._roomName);
        if (_.includes(Config_1.bunkerTypes, roomConfig.ChargeLayout)) {
            SquareCosmetic_1.MakeHappy(this._room);
        }
    };
    return ProcessPermanentRoom;
}(Room_1.ProcessRoom));
exports.ProcessPermanentRoom = ProcessPermanentRoom;


/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Process_1 = __webpack_require__(5);
var Task_1 = __webpack_require__(6);
var TasksRepository_1 = __webpack_require__(11);
var TickCache_1 = __webpack_require__(1);
var TaskManager_1 = __webpack_require__(7);
var ProcessPower = (function (_super) {
    __extends(ProcessPower, _super);
    function ProcessPower() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(ProcessPower.prototype, "name", {
        get: function () {
            return "/usr/bin/process-power";
        },
        enumerable: true,
        configurable: true
    });
    ProcessPower.prototype.tick = function () {
        var _this = this;
        if ((this._room.controller == null) || !this._room.controller.my) {
            return;
        }
        var powerSpawn = this._powerSpawner;
        if (powerSpawn == null) {
            this.sleep(1000);
            return;
        }
        if (this._room.storage.store[RESOURCE_ENERGY] < 90000) {
            var deliverTasks = TaskManager_1.default.QueryDeliverOrBuyTasks();
            if (!_.some(deliverTasks, function (t) { return (t.roomName == _this._roomName) && (t.resource == RESOURCE_ENERGY); })) {
                TaskManager_1.default.AddDeliverTask(RESOURCE_ENERGY, 10000, this._roomName);
            }
        }
        if ((powerSpawn.power > 0) && (powerSpawn.energy >= POWER_SPAWN_ENERGY_RATIO)) {
            powerSpawn.processPower();
            return;
        }
        var powerTasks = TasksRepository_1.default.QueryTasks(function (t) { return (t.Type == Task_1.TaskType.LoadPower) && (t.roomName == _this._roomName); });
        if (!_.some(powerTasks) && ((this._powerSpawner.power > 0) || (!_.isUndefined(this._room.terminal.store[RESOURCE_POWER]) && (this._room.terminal.store[RESOURCE_POWER] > 0)))) {
            console.log("Adding load power task for " + this._roomName);
            TaskManager_1.default.AddLoadPowerTask(this._roomName);
        }
        this.sleep(10);
    };
    Object.defineProperty(ProcessPower.prototype, "_powerSpawner", {
        get: function () {
            if (!_.isUndefined(this.memory['psId'])) {
                return Game.getObjectById(this.memory['psId']);
            }
            var powerSpawn = _.first(TickCache_1.__find(this._room, FIND_STRUCTURES, {
                filter: function (s) { return s.structureType == STRUCTURE_POWER_SPAWN; }
            }));
            if (powerSpawn != null) {
                this.memory['psId'] = powerSpawn.id;
            }
            return powerSpawn;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProcessPower.prototype, "_room", {
        get: function () {
            return Game.rooms[this._roomName];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProcessPower.prototype, "_roomName", {
        get: function () {
            return this.processInfo.args[0];
        },
        enumerable: true,
        configurable: true
    });
    return ProcessPower;
}(Process_1.Process));
exports.ProcessPower = ProcessPower;


/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var PopulatedProcess_1 = __webpack_require__(10);
var ProcessList_1 = __webpack_require__(9);
var InfrastructurePlanner_1 = __webpack_require__(36);
var Delivering = (function (_super) {
    __extends(Delivering, _super);
    function Delivering() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = '/usr/bin/delivering';
        return _this;
    }
    Delivering.prototype.tick = function () {
        this._handleCreeps();
        this._handlePopulation();
    };
    Delivering.prototype.getRoute = function () {
        var sourcePosition = RoomPosition.unpack(this.processInfo.args[0]);
        var spSym = sourcePosition.spack();
        var remote = this.RemoteRoomProcess;
        if (!remote) {
            console.log("No remote for " + this.name + " " + this.processInfo.args[0]);
            return null;
        }
        var routes = remote.routes;
        return _.first(_.filter(routes, function (r) { return _.startsWith(r, spSym); }));
    };
    Object.defineProperty(Delivering.prototype, "HarvestPosition", {
        get: function () {
            if (_.isUndefined(this.memory['harvestPos'])) {
                var route = this.getRoute();
                if (route == null) {
                    return null;
                }
                var pos = InfrastructurePlanner_1.default.HarvestPosition(route);
                if (pos == null) {
                    return null;
                }
                this.memory['harvestPos'] = pos.pack();
                return pos;
            }
            return RoomPosition.unpack(this.memory['harvestPos']);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Delivering.prototype, "UnloadPosition", {
        get: function () {
            if (_.isUndefined(this.memory['unloadPos'])) {
                var route = this.getRoute();
                if (route == null) {
                    return null;
                }
                var pos = InfrastructurePlanner_1.default.UnloadPosition(route);
                if (pos == null) {
                    return null;
                }
                this.memory['unloadPos'] = pos.pack();
                return pos;
            }
            return RoomPosition.unpack(this.memory['unloadPos']);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Delivering.prototype, "UnloadStructure", {
        get: function () {
            if (_.isUndefined(this.memory['unloadStructure'])) {
                var unloadPos = this.UnloadPosition;
                if (unloadPos == null) {
                    return null;
                }
                var structure = _.first(unloadPos.findInRange(FIND_STRUCTURES, 1, { filter: function (s) { return _.includes([STRUCTURE_STORAGE, STRUCTURE_TERMINAL], s.structureType); } }));
                if (structure == null) {
                    return null;
                }
                this.memory['unloadStructure'] = structure.id;
                return structure;
            }
            return Game.getObjectById(this.memory['unloadStructure']);
        },
        enumerable: true,
        configurable: true
    });
    Delivering.prototype._getPopulation = function () {
        var remote = this.RemoteRoomProcess;
        if (!remote || !remote._roomName || !remote._room || remote.invaded || !this.Container) {
            return {};
        }
        var result = {};
        var setup = this._calculateTransportSetup();
        if (setup != null) {
            result[remote._roomName] = {
                assignment: this.processInfo.args[0],
                positions: setup.amount,
                setupString: setup.setup,
                proirity: 6
            };
        }
        return result;
    };
    Object.defineProperty(Delivering.prototype, "Container", {
        get: function () {
            if (_.isUndefined(this.memory['containerId'])) {
                var harvestPos = this.HarvestPosition;
                if (!Game.rooms[harvestPos.roomName]) {
                    return null;
                }
                var container_1 = _.first(harvestPos.findInRange(FIND_STRUCTURES, 0, { filter: { structureType: STRUCTURE_CONTAINER } }));
                if (container_1 == null) {
                    return null;
                }
                this.memory['containerId'] = container_1.id;
                return container_1;
            }
            var container = Game.getObjectById(this.memory['containerId']);
            if (!container) {
                delete this.memory['containerId'];
            }
            return container;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Delivering.prototype, "RemoteRoomProcess", {
        get: function () {
            if (!_.isUndefined(this.memory['rpId'])) {
                return ProcessList_1.GetProcessById(this.memory['rpId']);
            }
            var rootRoomProcess = this.GetProcessInParentChain("/usr/bin/remote");
            if (rootRoomProcess != null) {
                this.memory['rpId'] = rootRoomProcess.id;
            }
            return rootRoomProcess;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Delivering.prototype, "RouteLength", {
        get: function () {
            if (_.isUndefined(this.memory['routeLength'])) {
                var route = this.getRoute();
                if (route == null) {
                    return null;
                }
                this.memory['routeLength'] = route.length / 2;
            }
            return this.memory['routeLength'];
        },
        enumerable: true,
        configurable: true
    });
    Delivering.prototype._calculateTransportSetup = function () {
        var remote = this.RemoteRoomProcess;
        var parentRoom = remote.GetRootRoomProcess()._room;
        var excessTicks = 0;
        var unitsPerTick = this.processInfo.args[1];
        var routeLength = this.RouteLength;
        if (routeLength == null) {
            return null;
        }
        var requiredCarryCapacity = Math.ceil(2 * unitsPerTick * excessTicks + 2 * unitsPerTick * routeLength);
        var segments = Math.min(Math.floor(parentRoom.energyCapacityAvailable / 150), 16);
        var requiredTransports = Math.ceil(requiredCarryCapacity / (segments * 100));
        return {
            amount: requiredTransports,
            setup: "deliverer/" + 2 * segments + "c" + segments + "m"
        };
    };
    return Delivering;
}(PopulatedProcess_1.PopulatedProcess));
exports.default = Delivering;


/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var PopulatedProcess_1 = __webpack_require__(10);
var ProcessList_1 = __webpack_require__(9);
var InfrastructurePlanner_1 = __webpack_require__(36);
var Harvesting = (function (_super) {
    __extends(Harvesting, _super);
    function Harvesting() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = '/usr/bin/harvesting';
        return _this;
    }
    Harvesting.prototype.tick = function () {
        this._handleCreeps();
        this._handlePopulation();
    };
    Harvesting.prototype.getRoute = function () {
        var sourcePosition = RoomPosition.unpack(this.processInfo.args[0]);
        var spSym = sourcePosition.spack();
        var remote = this.RemoteRoomProcess;
        var routes = remote.routes;
        return _.first(_.filter(routes, function (r) { return _.startsWith(r, spSym); }));
    };
    Object.defineProperty(Harvesting.prototype, "HarvestPosition", {
        get: function () {
            if (_.isUndefined(this.memory['harvestPos'])) {
                var route = this.getRoute();
                if (route == null) {
                    return null;
                }
                var pos = InfrastructurePlanner_1.default.HarvestPosition(route);
                if (pos == null) {
                    return null;
                }
                this.memory['harvestPos'] = pos.pack();
                return pos;
            }
            return RoomPosition.unpack(this.memory['harvestPos']);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Harvesting.prototype, "Source", {
        get: function () {
            if (_.isUndefined(this.memory['sourceId'])) {
                var sourcePosition = RoomPosition.unpack(this.processInfo.args[0]);
                if (!Game.rooms[sourcePosition.roomName]) {
                    return null;
                }
                var source = _.first(sourcePosition.findInRange(FIND_SOURCES, 0));
                if (source == null) {
                    return null;
                }
                this.memory['sourceId'] = source.id;
                return source;
            }
            return Game.getObjectById(this.memory['sourceId']);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Harvesting.prototype, "Container", {
        get: function () {
            if (_.isUndefined(this.memory['containerId'])) {
                var harvestPos = this.HarvestPosition;
                if (!Game.rooms[harvestPos.roomName]) {
                    return null;
                }
                var container = _.first(harvestPos.findInRange(FIND_STRUCTURES, 0, { filter: { structureType: STRUCTURE_CONTAINER } }));
                if (container == null) {
                    return null;
                }
                this.memory['containerId'] = container.id;
                return container;
            }
            return Game.getObjectById(this.memory['containerId']);
        },
        enumerable: true,
        configurable: true
    });
    Harvesting.prototype._getPopulation = function () {
        var remote = this.RemoteRoomProcess;
        if (!remote || !remote._roomName || !remote._room || remote.invaded || !this.Container) {
            return {};
        }
        if (remote._roomName == null) {
            return {};
        }
        if (remote._room == null) {
            return {};
        }
        if (remote.invaded) {
            return {};
        }
        var result = {};
        result[remote._roomName] = {
            assignment: this.processInfo.args[0],
            positions: 1,
            setupString: 'harvester/16w2c9m',
            proirity: 2
        };
        return result;
    };
    Object.defineProperty(Harvesting.prototype, "RemoteRoomProcess", {
        get: function () {
            if (!_.isUndefined(this.memory['rpId'])) {
                return ProcessList_1.GetProcessById(this.memory['rpId']);
            }
            var rootRoomProcess = this.GetProcessInParentChain("/usr/bin/remote");
            if (rootRoomProcess != null) {
                this.memory['rpId'] = rootRoomProcess.id;
            }
            return rootRoomProcess;
        },
        enumerable: true,
        configurable: true
    });
    return Harvesting;
}(PopulatedProcess_1.PopulatedProcess));
exports.default = Harvesting;


/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ProcessList_1 = __webpack_require__(9);
var PopulatedProcess_1 = __webpack_require__(10);
var RoadStatus_1 = __webpack_require__(28);
var InfrastructureWorking = (function (_super) {
    __extends(InfrastructureWorking, _super);
    function InfrastructureWorking() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = '/usr/bin/infrastructure-working';
        return _this;
    }
    InfrastructureWorking.prototype.tick = function () {
        this._handleCreeps();
        this._handlePopulation();
    };
    InfrastructureWorking.prototype._getPopulation = function () {
        var remote = this.RemoteRoomProcess;
        if (!remote || !remote._roomName || !remote._room || remote.invaded || remote.invaderCore) {
            return {};
        }
        var status = remote.GetRoadStatus();
        if (status == RoadStatus_1.RoadStatus.Healthy) {
            return {};
        }
        var result = {};
        if (remote.containers.length != remote.sourcesPositions.length) {
            result[remote._roomName] = {
                assignment: remote._roomName,
                positions: 1,
                setupString: 'infrastructureWorker/30wB314cC36mM3',
                proirity: 10
            };
        }
        else {
            result[remote._roomName] = {
                assignment: remote._roomName,
                positions: 1,
                setupString: 'weakerInfrastructureWorker/15w15c15m',
                proirity: 10
            };
        }
        return result;
    };
    Object.defineProperty(InfrastructureWorking.prototype, "RemoteRoomProcess", {
        get: function () {
            if (!_.isUndefined(this.memory['rpId'])) {
                return ProcessList_1.GetProcessById(this.memory['rpId']);
            }
            var rootRoomProcess = this.GetProcessInParentChain("/usr/bin/remote");
            if (rootRoomProcess != null) {
                this.memory['rpId'] = rootRoomProcess.id;
            }
            return rootRoomProcess;
        },
        enumerable: true,
        configurable: true
    });
    InfrastructureWorking.prototype.getNextObject = function () {
        var tiles = this.unprocessedTiles;
        var currentTile = (tiles == null || tiles.length < 2) ? null : RoomPosition.sunpack("" + tiles[0] + tiles[1]);
        while ((currentTile != null) && currentTile.isEdge()) {
            this.nextTile();
            tiles = this.unprocessedTiles;
            currentTile = (tiles == null || tiles.length < 2) ? null : RoomPosition.sunpack("" + tiles[0] + tiles[1]);
        }
        var nextTile = (tiles == null || tiles.length < 4) ? null : RoomPosition.sunpack("" + tiles[2] + tiles[3]);
        var currentObject = currentTile == null ? null : this.ensure(currentTile);
        if (nextTile != null) {
            this.ensure(nextTile);
        }
        return currentObject;
    };
    InfrastructureWorking.prototype.nextTile = function () {
        this.memory['tiles'] = this.memory['tiles'].substr(2);
    };
    InfrastructureWorking.prototype.ensure = function (pos) {
        if (!Game.rooms[pos.roomName]) {
            return new RoomObject(pos.x, pos.y, pos.roomName);
        }
        var remote = this.RemoteRoomProcess;
        var here = pos.look();
        var containerSiteItem = _.first(_.filter(here, function (i) { return (i.type == LOOK_CONSTRUCTION_SITES) && (i.constructionSite.structureType == STRUCTURE_CONTAINER); }));
        if (_.some(remote.harvestPositions, function (p) { return p.isEqualTo(pos); }) &&
            !_.some(here, function (i) { return (i.type == LOOK_STRUCTURES) && (i.structure.structureType == STRUCTURE_CONTAINER); }) &&
            (containerSiteItem == null)) {
            pos.createConstructionSite(STRUCTURE_CONTAINER);
            return new RoomObject(pos.x, pos.y, pos.roomName);
        }
        if (containerSiteItem != null) {
            return containerSiteItem.constructionSite;
        }
        var roadItem = _.first(_.filter(here, function (i) { return (i.type == LOOK_STRUCTURES) && (i.structure.structureType == STRUCTURE_ROAD); }));
        var roadSiteItem = _.first(_.filter(here, function (i) { return (i.type == LOOK_CONSTRUCTION_SITES) && (i.constructionSite.structureType == STRUCTURE_ROAD); }));
        if (roadItem != null) {
            return roadItem.structure;
        }
        if (roadSiteItem != null) {
            return roadSiteItem.constructionSite;
        }
        var result = pos.createConstructionSite(STRUCTURE_ROAD);
        if (result != OK) {
            console.log("Error creating construction site at " + pos + ": " + result);
        }
        return new RoomObject(pos.x, pos.y, pos.roomName);
    };
    Object.defineProperty(InfrastructureWorking.prototype, "unprocessedTiles", {
        get: function () {
            var remote = this.RemoteRoomProcess;
            if (!Game.rooms[remote._roomName]) {
                return null;
            }
            if (_.isUndefined(this.memory['tiles']) || (this.memory['tiles'].length == 0)) {
                this.memory['tiles'] = this.findTiles();
            }
            return this.memory['tiles'];
        },
        enumerable: true,
        configurable: true
    });
    InfrastructureWorking.prototype.findTiles = function () {
        var remote = this.RemoteRoomProcess;
        if (remote.GetRoadStatus() == RoadStatus_1.RoadStatus.Healthy) {
            return '';
        }
        var routes = remote.routes.map(function (p) { return _.filter(RoomPosition.unpackPath(p), function (t) { return !t.isEdge() && _.every(remote.sourcesPositions, function (sp) { return !sp.isEqualTo(t); }); }); });
        routes.forEach(function (r) { return r.reverse(); });
        return RoomPosition.packPath(_(routes).flatten().map(function (p) { return p.pack(); }).uniq().map(RoomPosition.unpack).value());
    };
    return InfrastructureWorking;
}(PopulatedProcess_1.PopulatedProcess));
exports.default = InfrastructureWorking;


/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Room_1 = __webpack_require__(35);
var RoomProvider_1 = __webpack_require__(12);
var InfrastructurePlanner_1 = __webpack_require__(36);
var RoadStatus_1 = __webpack_require__(28);
var Remote = (function (_super) {
    __extends(Remote, _super);
    function Remote() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = '/usr/bin/remote';
        return _this;
    }
    Remote.prototype.tick = function () {
        this._checkInvasion();
        this._checkChildProcesses();
        if (!this.DrawVisuals()) {
            this.sleep(10);
        }
    };
    Object.defineProperty(Remote.prototype, "roomInformation", {
        get: function () {
            return RoomProvider_1.default.GetRoomData(this._roomName);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Remote.prototype, "childCheckInterval", {
        get: function () {
            return 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Remote.prototype, "subprocesses", {
        get: function () {
            var result = [];
            if (this.threatLevel > 7000) {
                result.push({
                    imageName: "/usr/bin/remote-defend",
                    args: this.processInfo.args,
                    priority: 11
                });
            }
            if (!this._room || !this.roomInformation) {
                result.push({
                    imageName: "/usr/bin/remote-scouting",
                    args: [this._roomName],
                    priority: Game.rooms[this._roomName] ? 20 : 15
                });
            }
            if (this.roomInformation == null) {
                return result;
            }
            if (this._room == null) {
                return result;
            }
            if (this.invaderCore) {
                result.push({
                    imageName: "/usr/bin/remove-core",
                    args: [this._roomName],
                    priority: 11
                });
                return result;
            }
            var containers = this.containers;
            if (this._room && _.some(containers) || this._room.controller && this._room.controller.reservation && this._room.controller.reservation.username != 'o4kapuk') {
                var root = this.GetRootRoomProcess();
                if (!this._room.controller || !this._room.controller.my) {
                    result.push({
                        imageName: "/usr/bin/reserving",
                        args: [this._roomName, root._roomName],
                        priority: 11
                    });
                }
                var srcPos = this.sourcesPositions;
                var _loop_1 = function (s) {
                    if (_.some(containers, function (c) { return c.pos.isNearTo(s); })) {
                        var assign = s.pack().toString();
                        result.push({
                            imageName: "/usr/bin/harvesting",
                            args: [assign, 10],
                            priority: 17
                        });
                        result.push({
                            imageName: "/usr/bin/delivering",
                            args: [assign, 10],
                            priority: 15
                        });
                    }
                };
                for (var _i = 0, srcPos_1 = srcPos; _i < srcPos_1.length; _i++) {
                    var s = srcPos_1[_i];
                    _loop_1(s);
                }
            }
            if ((this.sourcesPositions.length != containers.length) || (this.GetRoadStatus() != RoadStatus_1.RoadStatus.Healthy)) {
                result.push({
                    imageName: "/usr/bin/infrastructure-working",
                    args: [this._roomName],
                    priority: 11
                });
            }
            return result;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Remote.prototype, "sourcesPositions", {
        get: function () {
            if (this.roomInformation == null) {
                return null;
            }
            return this.roomInformation.SourcesPositions;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Remote.prototype, "containers", {
        get: function () {
            return _.compact(this.harvestPositions.map(function (p) {
                return _.first(p.findInRange(FIND_STRUCTURES, 0, { filter: { structureType: STRUCTURE_CONTAINER } }));
            }));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Remote.prototype, "invaderCore", {
        get: function () {
            return _.first(this._room.find(FIND_STRUCTURES, { filter: { structureType: STRUCTURE_INVADER_CORE } }));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Remote.prototype, "endingRoads", {
        get: function () {
            return _.compact(this.harvestPositions.map(function (p) {
                return _.first(p.findInRange(FIND_STRUCTURES, 0, { filter: { structureType: STRUCTURE_ROAD } }));
            }));
        },
        enumerable: true,
        configurable: true
    });
    Remote.prototype.GetRoadStatus = function () {
        if (this.containers.length != this.sourcesPositions.length) {
            return RoadStatus_1.RoadStatus.Broken;
        }
        if (_.isUndefined(this.memory['roadStatus'])) {
            this.memory['roadStatus'] = RoadStatus_1.RoadStatus.Healthy;
        }
        return this.memory['roadStatus'];
    };
    Remote.prototype.SetRoadStatus = function (newStatus) {
        if ((newStatus != RoadStatus_1.RoadStatus.WornOut) || (this.memory['roadStatus'] != RoadStatus_1.RoadStatus.Broken)) {
            this.memory['roadStatus'] = newStatus;
        }
    };
    Object.defineProperty(Remote.prototype, "harvestPositions", {
        get: function () {
            if (this.routes == null) {
                return null;
            }
            return this.routes.map(function (r) { return InfrastructurePlanner_1.default.HarvestPosition(r); });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Remote.prototype, "routes", {
        get: function () {
            if (_.isUndefined(this.memory['routes'])) {
                var r = InfrastructurePlanner_1.default.PlanRoutes(this.GetRootRoomProcess()._roomName, this._roomName);
                if (r == null) {
                    return null;
                }
                this.memory['routes'] = r;
            }
            return this.memory['routes'];
        },
        enumerable: true,
        configurable: true
    });
    Remote.prototype._onInvasionStarted = function () {
        delete this.memory['recheckChilds'];
        console.log("Room " + this._roomName + " invaded, threat level " + this.threatLevel);
    };
    Remote.prototype._onInvasionEnded = function () {
        delete this.memory['recheckChilds'];
        console.log("Invasion at " + this._roomName + " gone");
    };
    Remote.prototype.DrawVisuals = function () {
        if (!this._room) {
            return false;
        }
        var remoteFlag = Game.flags['remote'];
        if (!(remoteFlag != null && remoteFlag.pos.roomName == this._roomName)) {
            return false;
        }
        Remote.drawInfrastructure(this.routes);
        return true;
    };
    Remote.drawInfrastructure = function (routes, style) {
        if (routes == null) {
            return;
        }
        if (style == null) {
            style = {
                fill: 'transparent',
                stroke: '#8ff',
                lineStyle: 'dashed',
                strokeWidth: .15,
                opacity: .5
            };
        }
        for (var _i = 0, routes_1 = routes; _i < routes_1.length; _i++) {
            var r = routes_1[_i];
            var path = RoomPosition.unpackPath(r);
            var rooms = _.groupBy(path, function (p) { return p.roomName; });
            for (var room in rooms) {
                var visual = new RoomVisual(room);
                visual.poly(rooms[room], style);
            }
            var harvestPos = RoomPosition.sunpack("" + r[2] + r[3]);
            var hv = new RoomVisual(harvestPos.roomName);
            hv.circle(harvestPos);
        }
    };
    return Remote;
}(Room_1.ProcessRoom));
exports.default = Remote;


/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var PopulatedProcess_1 = __webpack_require__(10);
var ProcessList_1 = __webpack_require__(9);
var RemoteDefend = (function (_super) {
    __extends(RemoteDefend, _super);
    function RemoteDefend() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(RemoteDefend.prototype, "name", {
        get: function () {
            return "/usr/bin/remote-defend";
        },
        enumerable: true,
        configurable: true
    });
    RemoteDefend.prototype.tick = function () {
        this._handleCreeps();
        this._handlePopulation();
    };
    RemoteDefend.prototype._getPopulation = function () {
        var result = {};
        var threat = this.parentProcess.threatLevel;
        if ((threat > 250000) && (this.ParentRoom.controller.level > 6)) {
            result[this._roomName] = {
                assignment: this._roomName,
                positions: 1,
                proirity: 1,
                setupString: 'remoteDefender/16m30r1h'
            };
            return result;
        }
        if ((threat > 7000) && (this.ParentRoom.energyCapacityAvailable >= 2300)) {
            result[this._roomName] = {
                assignment: this._roomName,
                positions: 1,
                proirity: 1,
                setupString: 'remoteDefender/11m10r1h'
            };
            return result;
        }
        if ((threat > 7000) && (this.ParentRoom.energyCapacityAvailable >= 1800)) {
            result[this._roomName] = {
                assignment: this._roomName,
                positions: 1,
                proirity: 1,
                setupString: 'remoteDefender/8m7r1h'
            };
            return result;
        }
        return result;
    };
    Object.defineProperty(RemoteDefend.prototype, "_room", {
        get: function () {
            return Game.rooms[this._roomName];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RemoteDefend.prototype, "_roomName", {
        get: function () {
            return this.processInfo.args[0];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RemoteDefend.prototype, "parentProcess", {
        get: function () {
            return ProcessList_1.GetProcessById(this.processInfo.parentId);
        },
        enumerable: true,
        configurable: true
    });
    return RemoteDefend;
}(PopulatedProcess_1.PopulatedProcess));
exports.default = RemoteDefend;


/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var PopulatedProcess_1 = __webpack_require__(10);
var ProcessList_1 = __webpack_require__(9);
var RemoteScouting = (function (_super) {
    __extends(RemoteScouting, _super);
    function RemoteScouting() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = '/usr/bin/remote-scouting';
        return _this;
    }
    RemoteScouting.prototype.tick = function () {
        this._handleCreeps();
        this._handlePopulation();
    };
    RemoteScouting.prototype._getPopulation = function () {
        var remote = this.RemoteRoomProcess;
        if (remote == null) {
            return {};
        }
        if (remote._roomName == null) {
            return {};
        }
        var result = {};
        result[remote._roomName] = {
            assignment: remote._roomName,
            positions: 1,
            setupString: 'scout/1m',
            proirity: 1
        };
        return result;
    };
    Object.defineProperty(RemoteScouting.prototype, "RemoteRoomProcess", {
        get: function () {
            if (!_.isUndefined(this.memory['rpId'])) {
                return ProcessList_1.GetProcessById(this.memory['rpId']);
            }
            var rootRoomProcess = this.GetProcessInParentChain("/usr/bin/remote");
            if (rootRoomProcess != null) {
                this.memory['rpId'] = rootRoomProcess.id;
            }
            return rootRoomProcess;
        },
        enumerable: true,
        configurable: true
    });
    RemoteScouting.prototype.allowAutoshutdown = function () {
        return true;
    };
    return RemoteScouting;
}(PopulatedProcess_1.PopulatedProcess));
exports.default = RemoteScouting;


/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ProcessList_1 = __webpack_require__(9);
var PopulatedProcess_1 = __webpack_require__(10);
var RemoveCore = (function (_super) {
    __extends(RemoveCore, _super);
    function RemoveCore() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = '/usr/bin/remove-core';
        return _this;
    }
    RemoveCore.prototype.tick = function () {
        this._handleCreeps();
        this._handlePopulation();
    };
    RemoveCore.prototype._getPopulation = function () {
        var remote = this.RemoteRoomProcess;
        if (!remote || !remote._roomName || !remote._room || remote.invaded || !remote.invaderCore) {
            return {};
        }
        return _a = {},
            _a[remote._roomName] = {
                assignment: remote._roomName,
                positions: 1,
                proirity: 4,
                setupString: 'unboostedMelee/25m25a'
            },
            _a;
        var _a;
    };
    Object.defineProperty(RemoveCore.prototype, "RemoteRoomProcess", {
        get: function () {
            if (!_.isUndefined(this.memory['rpId'])) {
                return ProcessList_1.GetProcessById(this.memory['rpId']);
            }
            var rootRoomProcess = this.GetProcessInParentChain("/usr/bin/remote");
            if (rootRoomProcess != null) {
                this.memory['rpId'] = rootRoomProcess.id;
            }
            return rootRoomProcess;
        },
        enumerable: true,
        configurable: true
    });
    return RemoveCore;
}(PopulatedProcess_1.PopulatedProcess));
exports.default = RemoveCore;


/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Process_1 = __webpack_require__(5);
var TickCache_1 = __webpack_require__(1);
var Config_1 = __webpack_require__(8);
var TributeTracker_1 = __webpack_require__(37);
var ScanType;
(function (ScanType) {
    ScanType["Tribute"] = "tribute";
    ScanType["Power"] = "power";
})(ScanType || (ScanType = {}));
var Scand = (function (_super) {
    __extends(Scand, _super);
    function Scand() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = '/usr/bin/scand';
        return _this;
    }
    Scand.prototype.tick = function () {
        if (!_.isUndefined(this._room.memory['forceScan'])) {
            this.observer.observeRoom(this._room.memory['forceScan']);
            if (!_.isUndefined(Game.rooms[this._room.memory['forceScan']])) {
                this._alertOnBoosts(Game.rooms[this._room.memory['forceScan']]);
            }
            return;
        }
        var currentScan = this.currentScan;
        if (currentScan == null) {
            return;
        }
        if (_.isUndefined(Game.rooms[currentScan.roomName])) {
            if (this.observer != null) {
                this.observer.observeRoom(currentScan.roomName);
            }
            return;
        }
        if (this.processScan(currentScan)) {
            this.scanCompleted();
        }
    };
    Scand.prototype._alertOnBoosts = function (room) {
        var labs = room.find(FIND_STRUCTURES, { filter: function (s) { return s.structureType == STRUCTURE_LAB; } });
        if (_.some(labs, function (l) { return l.mineralType == RESOURCE_CATALYZED_GHODIUM_ALKALIDE; }) &&
            _.some(labs, function (l) { return l.mineralType == RESOURCE_CATALYZED_ZYNTHIUM_ALKALIDE; }) &&
            _.some(labs, function (l) { return l.mineralType == RESOURCE_CATALYZED_LEMERGIUM_ALKALIDE; })) {
            console.log('<script>window.open("https://youtu.be/YYE7oFg-qlQ?t=5", "siren")</script>snd');
            this.sleep(1500);
        }
    };
    Object.defineProperty(Scand.prototype, "_room", {
        get: function () {
            return Game.rooms[this._roomName];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Scand.prototype, "_roomName", {
        get: function () {
            return this.processInfo.args[0];
        },
        enumerable: true,
        configurable: true
    });
    Scand.prototype.processScan = function (scan) {
        var room = Game.rooms[scan.roomName];
        if (room == null) {
            return false;
        }
        switch (scan.type) {
            case ScanType.Tribute:
                return this.processTributeScan(room);
            case ScanType.Power:
                return this.processPowerScan(room);
        }
        return true;
    };
    Scand.prototype.processTributeScan = function (room) {
        var mineral = _.first(TickCache_1.__find(room, FIND_MINERALS));
        if (mineral == null) {
            console.log("Mineral not found in room " + room.name);
            return false;
        }
        if (_.isUndefined(this.memory['prev'])) {
            this.memory['prev'] = {};
        }
        var previousValues = this.memory['prev'];
        if (_.isUndefined(previousValues[room.name])) {
            previousValues[room.name] = mineral.mineralAmount;
            return true;
        }
        if (previousValues[room.name] == mineral.mineralAmount) {
            return true;
        }
        var harvested = Math.max(0, previousValues[room.name] - mineral.mineralAmount);
        if (harvested > 0) {
            TributeTracker_1.default.CountHarvested(room.name, harvested);
            console.log("Mineral (" + mineral.mineralType + ") harvested in " + room.name + ": " + harvested);
        }
        previousValues[room.name] = mineral.mineralAmount;
        return true;
    };
    Scand.prototype.processPowerScan = function (room) {
        var bank = _.first(TickCache_1.__find(room, FIND_STRUCTURES, {
            filter: function (s) { return s.structureType == STRUCTURE_POWER_BANK; }
        }));
        if (bank != null) {
            console.log("Power found at " + bank.pos);
        }
        return true;
    };
    Object.defineProperty(Scand.prototype, "currentScan", {
        get: function () {
            var scanQueue = this.memory['scanQueue'] || [];
            if (!_.some(scanQueue)) {
                var config = Config_1.getRoomConfig(this._roomName);
                if (!_.isUndefined(config.TributeScans)) {
                    for (var _i = 0, _a = config.TributeScans; _i < _a.length; _i++) {
                        var roomName = _a[_i];
                        scanQueue.push({
                            roomName: roomName,
                            type: ScanType.Tribute
                        });
                    }
                }
                if (!_.isUndefined(config.PowerScans)) {
                    for (var _b = 0, _c = config.PowerScans; _b < _c.length; _b++) {
                        var roomName = _c[_b];
                        scanQueue.push({
                            roomName: roomName,
                            type: ScanType.Power
                        });
                    }
                }
                if (scanQueue.length > 0) {
                    console.log(this._roomName + ": refilled scan queue (" + scanQueue.length + " items added)");
                }
                this.memory['scanQueue'] = scanQueue;
                this.sleep(50);
                return null;
            }
            return _.first(scanQueue);
        },
        enumerable: true,
        configurable: true
    });
    Scand.prototype.scanCompleted = function () {
        var scanQueue = this.memory['scanQueue'];
        var completedScan = scanQueue.shift();
        console.log(this._roomName + ": scan of " + completedScan.roomName + " (type " + completedScan.type.toString() + ") completed");
    };
    Object.defineProperty(Scand.prototype, "observer", {
        get: function () {
            if (this._room == null) {
                return null;
            }
            if (_.isUndefined(this.memory['observerId'])) {
                var observer = _.first(TickCache_1.__find(this._room, FIND_STRUCTURES, {
                    filter: function (s) { return s.structureType == STRUCTURE_OBSERVER; }
                }));
                if (observer != null) {
                    this.memory['observerId'] = observer.id;
                }
                return observer;
            }
            return Game.getObjectById(this.memory['observerId']);
        },
        enumerable: true,
        configurable: true
    });
    return Scand;
}(Process_1.Process));
exports.default = Scand;


/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var PopulatedProcess_1 = __webpack_require__(10);
var TickCache_1 = __webpack_require__(1);
var Config_1 = __webpack_require__(8);
var CreepAnalyzer_1 = __webpack_require__(15);
var invadersCache = {};
var SimpleActiveDefense = (function (_super) {
    __extends(SimpleActiveDefense, _super);
    function SimpleActiveDefense() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = "/usr/bin/simple-active-defense";
        return _this;
    }
    SimpleActiveDefense.prototype.tick = function () {
        this._checkChildProcesses();
        this._handleCreeps();
        this._handlePopulation();
    };
    Object.defineProperty(SimpleActiveDefense.prototype, "subprocesses", {
        get: function () {
            return [];
        },
        enumerable: true,
        configurable: true
    });
    SimpleActiveDefense.prototype.SpawningAllowed = function () {
        return true;
    };
    SimpleActiveDefense.prototype._getPopulation = function () {
        var result = {};
        if (this._hasLoadedBoost(RESOURCE_CATALYZED_UTRIUM_ACID, 44 * 30) &&
            this._hasLoadedBoost(RESOURCE_CATALYZED_ZYNTHIUM_ALKALIDE, 300) &&
            (this._summaryThreat > 30000000)) {
            result["melee" + this._roomName] = {
                setupString: 'boostedDefender/44aA36mM3',
                assignment: "melee" + this._roomName,
                positions: 1,
                proirity: -1
            };
        }
        if (this._hasLoadedBoost(RESOURCE_CATALYZED_KEANIUM_ALKALIDE, 44 * 30) &&
            this._hasLoadedBoost(RESOURCE_CATALYZED_ZYNTHIUM_ALKALIDE, 300) &&
            (this._summaryThreat > 30000000)) {
            result["rng" + this._roomName] = {
                setupString: 'boostedRangedDefender/44rR36mM3',
                assignment: "rng" + this._roomName,
                positions: 1,
                proirity: -1
            };
        }
        return result;
    };
    Object.defineProperty(SimpleActiveDefense.prototype, "_summaryThreat", {
        get: function () {
            var hostileCreeps = this._invaders;
            var summaryThreat = 0;
            for (var _i = 0, hostileCreeps_1 = hostileCreeps; _i < hostileCreeps_1.length; _i++) {
                var c = hostileCreeps_1[_i];
                summaryThreat += CreepAnalyzer_1.CreepAnalyzer.GetThreatNumber(CreepAnalyzer_1.CreepAnalyzer.GetThreatLevel(c, false));
            }
            return summaryThreat;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleActiveDefense.prototype, "_invaders", {
        get: function () {
            if (_.isUndefined(invadersCache[this.id])) {
                invadersCache[this.id] = TickCache_1.__find(this._room, FIND_HOSTILE_CREEPS, {
                    filter: function (c) { return !_.isUndefined(c.owner) && !_.isUndefined(c.owner.username) && (c.owner.username != 'Invader') && !_.includes(Config_1.alliedPlayers, c.owner.username); }
                });
            }
            return _.compact(invadersCache[this.id].map(function (c) { return Game.getObjectById(c.id); }));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleActiveDefense.prototype, "ParentRoomName", {
        get: function () {
            return this._roomName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleActiveDefense.prototype, "ParentRoom", {
        get: function () {
            return this._room;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleActiveDefense.prototype, "_room", {
        get: function () {
            return Game.rooms[this._roomName];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleActiveDefense.prototype, "_roomName", {
        get: function () {
            return this.processInfo.args[0];
        },
        enumerable: true,
        configurable: true
    });
    SimpleActiveDefense.prototype._hasLoadedBoost = function (boost, amount) {
        return _.some(TickCache_1.__find(this._room, FIND_STRUCTURES, {
            filter: function (s) { return (s.structureType == STRUCTURE_LAB) && (s.mineralType == boost) && (s.mineralAmount >= amount); }
        }));
    };
    return SimpleActiveDefense;
}(PopulatedProcess_1.PopulatedProcess));
exports.SimpleActiveDefense = SimpleActiveDefense;


/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var UpgradeBase_1 = __webpack_require__(59);
var TickCache_1 = __webpack_require__(1);
var TaskManager_1 = __webpack_require__(7);
var TasksRepository_1 = __webpack_require__(11);
var Task_1 = __webpack_require__(6);
var ContainerUpgrade = (function (_super) {
    __extends(ContainerUpgrade, _super);
    function ContainerUpgrade() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = '/usr/bin/container-upgrade';
        return _this;
    }
    ContainerUpgrade.prototype.tick = function () {
        if (this._room.controller.level == 8) {
            this.recycleCreeps();
        }
        if (this._room.controller.level < 6) {
            this._deliverEnergy();
        }
        else {
            this._doCleanups();
        }
        this._handlePopulation();
        this._handleCreeps();
    };
    ContainerUpgrade.prototype.EnergySources = function () {
        return [this._container];
    };
    ContainerUpgrade.prototype.recycleCreeps = function () {
        for (var _i = 0, _a = this._getCurrentCreeps(); _i < _a.length; _i++) {
            var c = _a[_i];
            c.drop(RESOURCE_ENERGY);
            c.memory['state'] = 255;
        }
    };
    ContainerUpgrade.prototype._deliverEnergy = function () {
        var _this = this;
        if ((this._container != null) &&
            (this._container.store[RESOURCE_ENERGY] <= (this._container.storeCapacity - this._maxHaulerCapacity))) {
            var localCarryTasks = TasksRepository_1.default.QueryTasks(function (task) { return (task.Type == Task_1.TaskType.CarryResources && task.to.id) == (_this._container.id) && !_.some(task.agents); });
            if (!_.some(localCarryTasks)) {
                TaskManager_1.default.AddCarryTask(this._room.storage, this._container, RESOURCE_ENERGY, this._maxHaulerCapacity);
            }
            if (this._container.store[RESOURCE_ENERGY] == 0) {
                this.memory['needHauler'] = true;
            }
        }
    };
    ContainerUpgrade.prototype._doCleanups = function () {
        if (this._container == null) {
            return;
        }
        if (this._container.store[RESOURCE_ENERGY] == 0) {
            this.recycleCreeps();
        }
    };
    ContainerUpgrade.prototype._getPopulation = function () {
        if (!this._room.memory['containerUpgrade']) {
            return {};
        }
        if (_.isUndefined(this._room.storage)) {
            return {};
        }
        if (this._room.storage.store[RESOURCE_ENERGY] < 10000) {
            return {};
        }
        if (this._container == null) {
            return {};
        }
        if (this._room.controller.level >= 6) {
            return {};
        }
        var result = {};
        var positions = this._getPositions();
        var amount = Math.min(positions.length, Math.floor(this._room.storage.store[RESOURCE_ENERGY] / 10000));
        if (positions.length > amount) {
            positions = _.slice(positions, 0, amount);
        }
        var setup = this._createSetup();
        for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {
            var p = positions_1[_i];
            var assign = p.toString();
            result[assign] = {
                assignment: assign,
                positions: 1,
                proirity: 6,
                setupString: setup
            };
        }
        if (!_.isUndefined(this.memory['needHauler']) && this.memory['needHauler']) {
            result[this._roomName] = {
                assignment: this._roomName,
                positions: 1,
                proirity: 5,
                setupString: this._maxHaulerSetup()
            };
        }
        return result;
    };
    ContainerUpgrade.prototype._getAllPositions = function () {
        return this._container.pos.around(1, { filter: function (p) { return p.isWalkable(); } }).map(function (p) { return p.pack(); });
    };
    Object.defineProperty(ContainerUpgrade.prototype, "_container", {
        get: function () {
            var that = this;
            return this.GetCachedObject('container', function () { return that._findContainer(); }, 10000);
        },
        enumerable: true,
        configurable: true
    });
    ContainerUpgrade.prototype._findContainer = function () {
        var room = this._room;
        return _.first(TickCache_1.__findInRange(room.controller.pos, FIND_STRUCTURES, 2, { filter: { structureType: STRUCTURE_CONTAINER } }));
    };
    ContainerUpgrade.prototype._createSetup = function () {
        var staticCost = 50;
        var segmentCost = 250;
        var segmentsAvailable = Math.floor((this._room.energyCapacityAvailable - staticCost) / segmentCost);
        return "praiser/" + 2 * segmentsAvailable + "w1c" + segmentsAvailable + "m";
    };
    Object.defineProperty(ContainerUpgrade.prototype, "_maxHaulerCapacity", {
        get: function () {
            return this._maxHaulerSegments * 100;
        },
        enumerable: true,
        configurable: true
    });
    return ContainerUpgrade;
}(UpgradeBase_1.default));
exports.default = ContainerUpgrade;


/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var TaskManager_1 = __webpack_require__(7);
var ProcessList_1 = __webpack_require__(9);
var BoostsManager_1 = __webpack_require__(20);
var UpgradeBase_1 = __webpack_require__(59);
var TickCache_1 = __webpack_require__(1);
var TasksRepository_1 = __webpack_require__(11);
var Task_1 = __webpack_require__(6);
var BehaviorBase_1 = __webpack_require__(2);
var CostMatrixType_1 = __webpack_require__(0);
var TerminalUpgrade = (function (_super) {
    __extends(TerminalUpgrade, _super);
    function TerminalUpgrade() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = '/usr/bin/terminal-upgrade';
        return _this;
    }
    TerminalUpgrade.prototype.tick = function () {
        var _this = this;
        if (!this._room.terminal) {
            ProcessList_1.KillProcess(this.id);
            return;
        }
        if (this._room.controller.level == 8 && this._room.terminal.pos.getRangeTo(this._room.storage) > 2) {
            var localCarryTasks = TasksRepository_1.default.QueryTasks(function (task) { return (task.Type == Task_1.TaskType.CarryResources) && (task.from == _this._room.terminal) && !task.isCompleted(); });
            if (!_.some(localCarryTasks)) {
                TaskManager_1.default.AddCarryTask(this._room.terminal, this._room.storage, RESOURCE_ENERGY, this._room.terminal.store[RESOURCE_ENERGY]);
            }
            for (var _i = 0, _a = this._getCurrentCreeps(); _i < _a.length; _i++) {
                var c = _a[_i];
                c.transfer(this._room.terminal, RESOURCE_ENERGY);
                c.memory['state'] = 255;
            }
        }
        else {
            var that_1 = this;
            var needEnergy = this.GetCachedValue('needEnergy', function () { return Math.min(that_1._getAllPositions().length * 20000, 250000); });
            if (this._haveEnergy < needEnergy) {
                var deliverTasks = TaskManager_1.default.QueryDeliverOrBuyTasks();
                var deliverHereTasks = _.filter(deliverTasks, function (t) { return (t.roomName == _this._roomName) && (t.resource == RESOURCE_ENERGY); });
                console.log("Deliver tasks: " + deliverHereTasks.length + "/" + deliverTasks.length);
                if (!_.some(deliverHereTasks)) {
                    console.log("Adding task to deliver");
                    TaskManager_1.default.AddDeliverTask(RESOURCE_ENERGY, 40000, this._roomName);
                }
            }
        }
        this._handlePopulation();
        this._handleCreeps();
        this._drawVisuals();
    };
    TerminalUpgrade.prototype.EnergySources = function () {
        return [this._room.terminal].concat(this._additionalContainers);
    };
    Object.defineProperty(TerminalUpgrade.prototype, "_haveEnergy", {
        get: function () {
            var haveEnergy = this._room.terminal.store[RESOURCE_ENERGY];
            if (this._room.storage && this._room.storage.pos.getRangeTo(this._room.terminal) <= 2) {
                haveEnergy += this._room.storage.store[RESOURCE_ENERGY];
            }
            return haveEnergy;
        },
        enumerable: true,
        configurable: true
    });
    TerminalUpgrade.prototype._drawVisuals = function () {
        for (var _i = 0, _a = this._canistersPositions; _i < _a.length; _i++) {
            var p = _a[_i];
            this._room.visual.text('⛽', RoomPosition.unpack(p));
        }
        var upgraders = this._getPositions();
        for (var _b = 0, upgraders_1 = upgraders; _b < upgraders_1.length; _b++) {
            var p = upgraders_1[_b];
            this._room.visual.text('↟', RoomPosition.unpack(p));
        }
        if (this.memory['lastProgress']) {
            var upgradePower = this._room.controller.progress - this.memory['lastProgress'];
            var toNextLevel = this._room.controller.progressTotal - this._room.controller.progress;
            var ticks = Math.ceil(toNextLevel / upgradePower);
            var _c = this._room.controller.pos, x = _c.x, y = _c.y;
            x += 0.5 * Math.sign(x - this._room.terminal.pos.x);
            y += 0.5 * Math.sign(y - this._room.terminal.pos.y);
            this._room.visual.text(ticks.toString(), x, y, { align: 'center', size: 0.4, color: '#80ff80', opacity: 0.7, backgroundColor: '#808080', backgroundPadding: 0.01 });
        }
        this.memory['lastProgress'] = this._room.controller.progress;
    };
    TerminalUpgrade.prototype._getPopulation = function () {
        var result = {};
        if (this._room.terminal == null) {
            return {};
        }
        if (this._room.controller.level == 8) {
            return {};
        }
        if (this._room.find(FIND_NUKES).length) {
            var firstNukeLand = _.min(this._room.find(FIND_NUKES), 'timeToLand').timeToLand;
            if (firstNukeLand < 1000) {
                return {};
            }
        }
        var resources = BoostsManager_1.default.GetCurrentResources();
        var work = (resources[RESOURCE_CATALYZED_GHODIUM_ACID] > 3000) ? 'wU3' : 'w';
        var setup = this._room.energyCapacityAvailable > 5300 ? "praiser/40" + work + "2c8m" : "praiser/20" + work + "1c5m";
        var positions = this._getPositions();
        var amount = Math.min(positions.length, Math.floor(this._haveEnergy / 15000));
        if (positions.length > amount) {
            positions = _.slice(positions, 0, amount);
        }
        for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {
            var p = positions_1[_i];
            var assign = p.toString();
            result[assign] = {
                assignment: assign,
                positions: 1,
                proirity: 7,
                setupString: setup
            };
        }
        for (var _a = 0, _b = this._canistersPositions; _a < _b.length; _a++) {
            var p = _b[_a];
            var assign = p.toString();
            result[assign] = {
                assignment: assign,
                positions: 1,
                proirity: 5,
                setupString: "upgradingCanister/" + (this._room.energyCapacityAvailable > 5300 ? 20 : 10) + "c1m"
            };
        }
        if (this._room.storage.pos.getRangeTo(this._room.terminal.pos) > 25) {
            result[this._roomName] = {
                assignment: this._roomName,
                positions: 1,
                proirity: 5,
                setupString: this._maxHaulerSetup()
            };
        }
        return result;
    };
    Object.defineProperty(TerminalUpgrade.prototype, "_canistersPositions", {
        get: function () {
            var result = [];
            for (var _i = 0, _a = this._additionalContainers; _i < _a.length; _i++) {
                var container = _a[_i];
                var position = _.first(_.intersection(container.pos.around(1, { filter: function (p) { return p.isWalkable(); } }).map(function (p) { return p.pack(); }), this._room.terminal.pos.around(1, { filter: function (p) { return p.isWalkable(); } }).map(function (p) { return p.pack(); })));
                if (position != null) {
                    result.push(position);
                }
            }
            return result;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TerminalUpgrade.prototype, "_additionalContainers", {
        get: function () {
            var terminal = this._room.terminal;
            return _.compact(this.GetCachedObjects('addContainer', function () { return TickCache_1.__findInRange(terminal.pos, FIND_STRUCTURES, 2, { filter: { structureType: STRUCTURE_CONTAINER } }); }));
        },
        enumerable: true,
        configurable: true
    });
    TerminalUpgrade.prototype._getAllPositions = function () {
        var _this = this;
        var result = this._room.terminal.pos.around(1, { filter: function (p) { return p.isWalkable() && (p.getRangeTo(_this._room.controller) <= 3); } }).map(function (p) { return p.pack(); });
        for (var _i = 0, _a = this._additionalContainers; _i < _a.length; _i++) {
            var container = _a[_i];
            result = result.concat(container.pos.around(1, { filter: function (p) { return p.isWalkable() && (p.getRangeTo(_this._room.controller) <= 3); } }).map(function (p) { return p.pack(); }));
        }
        var costs = {};
        _.forEach(this._canistersPositions, function (p) { return costs[p] = Infinity; });
        _.forEach(result, function (p) { return costs[p] = 64; });
        if (!this.memory['cache']['denyPos']) {
            var path = BehaviorBase_1.default.FindPath(this._room.storage.pos, this._room.terminal.pos, { costMatrixType: CostMatrixType_1.CostMatrixType.HalfSpeed, range: 1, addCosts: costs });
            this.memory['cache']['denyPos'] = _.intersection(path.path.map(function (p) { return p.pack(); }), result);
        }
        return _.without.apply(_, [_.uniq(result)].concat(this._canistersPositions, this.memory['cache']['denyPos']));
    };
    return TerminalUpgrade;
}(UpgradeBase_1.default));
exports.default = TerminalUpgrade;


/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Process_1 = __webpack_require__(5);
var BattleFieldAnalyzer_1 = __webpack_require__(92);
var VisualizeBattleField = (function (_super) {
    __extends(VisualizeBattleField, _super);
    function VisualizeBattleField() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(VisualizeBattleField.prototype, "name", {
        get: function () {
            return "/usr/bin/vis-bf";
        },
        enumerable: true,
        configurable: true
    });
    VisualizeBattleField.prototype.tick = function () {
        var threats = BattleFieldAnalyzer_1.BattleFieldAnalyzer.threatsCurrentMatrix(this._room);
        var room = this._room;
        _.forEach(room.storage.pos.around(10), function (p) {
            room.visual.text(threats.my[p.x][p.y].RangedThreat.toString(), p.x - 0.3, p.y - 0.3, {
                color: '#7777ff',
                opacity: 0.9,
                size: 0.4,
                align: 'left'
            });
            room.visual.text(threats.my[p.x][p.y].HealThreat.toString(), p.x - 0.3, p.y + 0.3, {
                color: '#77ff77',
                opacity: 0.9,
                size: 0.4,
                align: 'left'
            });
        });
    };
    Object.defineProperty(VisualizeBattleField.prototype, "_room", {
        get: function () {
            return Game.rooms[this._roomName];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VisualizeBattleField.prototype, "_roomName", {
        get: function () {
            return this.processInfo.args[0];
        },
        enumerable: true,
        configurable: true
    });
    return VisualizeBattleField;
}(Process_1.Process));
exports.VisualizeBattleField = VisualizeBattleField;


/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var BoostsManager_1 = __webpack_require__(20);
var PopulatedProcess_1 = __webpack_require__(10);
var Spawn_1 = __webpack_require__(3);
var Working = (function (_super) {
    __extends(Working, _super);
    function Working() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = "/usr/bin/working";
        return _this;
    }
    Working.prototype.tick = function () {
        this._handleCreeps();
        this._handlePopulation();
    };
    Working.prototype._getPopulation = function () {
        var result = {};
        if (_.isUndefined(this._room.storage) || (this._room.storage.store[RESOURCE_ENERGY] < 20000)) {
            return result;
        }
        if (this._room.energyCapacityAvailable < 1300) {
            return result;
        }
        var boostedNomads = this._room.find(FIND_MY_CREEPS, {
            filter: function (c) { return Spawn_1.getRoleByName(c.name) == 'boostedNomad'; }
        });
        if (_.some(boostedNomads)) {
            return result;
        }
        var nukes = this._room.find(FIND_NUKES);
        var amount = Math.floor((this._room.storage.store[RESOURCE_ENERGY]) / 150000);
        if (this._room.memory['powerSaving'] && !nukes.length) {
            amount = 0;
        }
        if (amount == 0) {
            if ((this._room.controller.level == 8) && (this._room.controller.ticksToDowngrade < 100000)) {
                amount = 1;
            }
            var cSites = this._room.find(FIND_MY_CONSTRUCTION_SITES, { filter: function (cs) { return !_.includes([STRUCTURE_ROAD, STRUCTURE_RAMPART, STRUCTURE_WALL], cs.structureType); } });
            if (_.some(cSites)) {
                amount = 1;
            }
        }
        if ((amount > 1) && (Game.cpu.bucket < 5000)) {
            amount = 1;
        }
        if (nukes.length || (this._room.controller.level >= 6) && _.isUndefined(this._room.terminal)) {
            amount = Math.min(3, Math.max(amount, nukes.length));
        }
        var setup = this._maxWorkerSetup;
        if (this._room.controller.level == 8 && nukes.length >= 5) {
            var boosts = BoostsManager_1.default.GetCurrentResources();
            if (boosts && (boosts['XLH2O'] > 3000) && (boosts['XKH2O'] > 3000) && (boosts['XZHO2'] > 3000)) {
                setup = "boostedWorker/40wB34cC36mM3";
            }
        }
        if (amount > 0) {
            result[this._roomName] = {
                setupString: setup,
                assignment: this._roomName,
                positions: amount,
                proirity: 2
            };
        }
        return result;
    };
    Object.defineProperty(Working.prototype, "_heavyWorkerSetup", {
        get: function () {
            var segments = Math.min(Math.floor(this.ParentRoom.energyCapacityAvailable / 200), 15);
            return "worker/" + segments + "w" + segments + "c" + segments + "m";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Working.prototype, "_maxWorkerSetup", {
        get: function () {
            var segments = Math.min(Math.floor(this.ParentRoom.energyCapacityAvailable / 200), 15);
            return "worker/" + segments + "w" + segments + "c" + segments + "m";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Working.prototype, "_room", {
        get: function () {
            return Game.rooms[this._roomName];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Working.prototype, "_roomName", {
        get: function () {
            return this.processInfo.args[0];
        },
        enumerable: true,
        configurable: true
    });
    return Working;
}(PopulatedProcess_1.PopulatedProcess));
exports.default = Working;


/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var PopulatedProcess_1 = __webpack_require__(10);
var ProcessList_1 = __webpack_require__(9);
var Squad_1 = __webpack_require__(26);
var SquadRepository_1 = __webpack_require__(51);
var BehaviorBase_1 = __webpack_require__(2);
var CostMatrixType_1 = __webpack_require__(0);
var keepTTL = 1350;
var Squad = (function (_super) {
    __extends(Squad, _super);
    function Squad() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = '/usr/bin/squad';
        return _this;
    }
    Squad.prototype.tick = function () {
        var _this = this;
        if (this.processInfo.args.length == 1) {
            var squadId = this.processInfo.args[0];
            var squad = SquadRepository_1.default.GetById(squadId);
            if (squad) {
                if (!_.some(_.compact(squad.Members)) && (squad.State != Squad_1.SquadState.Spawning)) {
                    SquadRepository_1.default.CleanupSquads();
                    return;
                }
                squad.tick();
                return;
            }
        }
        if (_.isUndefined(this.memory['squadCompleted'])) {
            var names = this._getCurrentCreepsNames();
            var notReady = _.filter(names, function (n) { return !_this._creepReady(n); });
            if (_.some(notReady)) {
                this._prepareSquad(names);
                return;
            }
            else {
                this.memory['squadCompleted'] = 1;
                for (var _i = 0, names_1 = names; _i < names_1.length; _i++) {
                    var n = names_1[_i];
                    delete Game.creeps[n].room.memory['reservedSpawn'];
                }
            }
        }
        this._handleCreeps();
    };
    Squad.prototype.SpawningAllowed = function () {
        return true;
    };
    Squad.prototype._creepReady = function (creepName) {
        if (_.isUndefined(Game.creeps[creepName])) {
            return false;
        }
        var creep = Game.creeps[creepName];
        if (creep.spawning) {
            return false;
        }
        if (creep.getActiveBodyparts(CLAIM) > 0) {
            return true;
        }
        var spawns = this._getSpawners(creep.room);
        if (!_.some(spawns)) {
            return true;
        }
        if (creep.ticksToLive < keepTTL) {
            return false;
        }
        return true;
    };
    Squad.prototype._prepareSquad = function (creepNames) {
        var creeps = _.compact(creepNames.map(function (n) { return Game.creeps[n]; }));
        if (!_.some(creeps)) {
            return;
        }
        var spawns = this._getSpawners(_.first(creeps).room);
        var spawnInfo = creepNames.map(function (name) {
            var creep = Game.creeps[name];
            if (creep == null) {
                return {
                    creep: undefined,
                    spawn: undefined,
                    remaining: undefined,
                    directions: undefined
                };
            }
            var spawn = _.first(_.filter(spawns, function (s) { return (s.spawning != null) && (s.spawning.name == name); }));
            if (spawn == null) {
                return {
                    creep: creep,
                    spawn: undefined,
                    remaining: undefined,
                    directions: undefined
                };
            }
            return {
                creep: creep,
                spawn: spawn,
                remaining: spawn.spawning.remainingTime,
                directions: spawn.spawning.directions
            };
        });
        if (_.every(spawnInfo, function (s) { return (s.creep != null) && ((s.remaining <= 1) || (!s.creep.spawning)); })) {
            _.forEach(spawnInfo, function (s) {
                if (s.spawn != null) {
                    var freePos = s.spawn.pos.around(1, { filter: function (p) { return p.isFree(); } });
                    s.spawn.spawning.setDirections(freePos.map(function (p) { return s.spawn.pos.getDirectionTo(p); }));
                }
            });
        }
        ;
        _.forEach(spawnInfo, function (s) {
            if ((s.spawn != null) && _.isUndefined(s.directions)) {
                var blockPos = _.first(s.spawn.pos.around(1, { filter: function (p) { return !p.isWalkable(); } }));
                s.spawn.spawning.setDirections([s.spawn.pos.getDirectionTo(blockPos)]);
            }
        });
        var spawnedCreeps = _.filter(creepNames.map(function (n) { return Game.creeps[n]; }), function (c) { return !_.isUndefined(c) && !c.spawning; });
        for (var _i = 0, spawnedCreeps_1 = spawnedCreeps; _i < spawnedCreeps_1.length; _i++) {
            var creep = spawnedCreeps_1[_i];
            if (creep.ticksToLive < keepTTL) {
                this._keepTTL(creep);
            }
            creep.memory['processed'] = true;
        }
    };
    Squad.prototype._keepTTL = function (creep) {
        var freeSpawn = this._getReservedSpawn(creep.room);
        if (!freeSpawn) {
            return;
        }
        if (freeSpawn.spawning == null) {
            if (creep.pos.isNearTo(freeSpawn)) {
                freeSpawn.renewCreep(creep);
            }
            else {
                BehaviorBase_1.default.GoToPosition(creep, freeSpawn.pos, { range: 1, costMatrixType: CostMatrixType_1.CostMatrixType.FullSpeed });
            }
        }
        else {
            var waitingPosition = _.first(creep.room.storage.pos.around(5, {
                filter: function (p) { return (p.getRangeTo(Game.rooms[p.roomName].storage) == 5) && (p.isEqualTo(creep.pos) || p.isFree()); }
            }));
            if (!creep.pos.isEqualTo(waitingPosition)) {
                BehaviorBase_1.default.GoToPosition(creep, waitingPosition, { range: 0, costMatrixType: CostMatrixType_1.CostMatrixType.FullSpeed });
            }
        }
    };
    Squad.prototype._getSpawners = function (room) {
        if (_.isUndefined(this.memory['spawnCache'])) {
            this.memory['spawnCache'] = {};
        }
        if (_.isUndefined(this.memory['spawnCache'][room.name])) {
            var spawns = room.find(FIND_MY_SPAWNS, { filter: function (s) { return s.isActive(); } });
            this.memory['spawnCache'][room.name] = spawns.map(function (s) { return s.id; });
        }
        return this.memory['spawnCache'][room.name].map(function (i) { return Game.getObjectById(i); });
    };
    Squad.prototype._getReservedSpawn = function (room) {
        if (_.isUndefined(room.memory['reservedSpawn'])) {
            var spawners = this._getSpawners(room);
            if (!_.some(spawners)) {
                return null;
            }
            room.memory['reservedSpawn'] = _.last(spawners).id;
        }
        return Game.getObjectById(room.memory['reservedSpawn']);
    };
    Squad.prototype._handleCreeps = function () {
        if (_.some(this._getCurrentCreeps())) {
            _super.prototype._handleCreeps.call(this);
        }
        else {
            if (this.processInfo.executionTicks > 1500) {
                for (var _i = 0, _a = this._getCurrentCreepsNames(); _i < _a.length; _i++) {
                    var n = _a[_i];
                    delete Memory.creeps[n];
                }
                ProcessList_1.KillProcess(this.id);
            }
        }
    };
    Squad.prototype._getPopulation = function () {
        return {};
    };
    Squad.prototype._getCurrentCreepsNames = function () {
        return this.processInfo.args;
    };
    return Squad;
}(PopulatedProcess_1.PopulatedProcess));
exports.default = Squad;


/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Process_1 = __webpack_require__(5);
var SquadHub = (function (_super) {
    __extends(SquadHub, _super);
    function SquadHub() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = '/usr/bin/squad-hub';
        return _this;
    }
    SquadHub.prototype.tick = function () {
        this.sleep(100);
    };
    return SquadHub;
}(Process_1.Process));
exports.default = SquadHub;


/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Process_1 = __webpack_require__(5);
var TickCache_1 = __webpack_require__(1);
var Statd = (function (_super) {
    __extends(Statd, _super);
    function Statd() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = "/usr/bin/statd";
        return _this;
    }
    Statd.prototype.tick = function () {
        var stats = {};
        stats.cpu = {};
        stats.cpu[Game.shard.name] = Game.cpu;
        stats.gcl = Game.gcl;
        if (Game.shard.name == 'shard0') {
            stats.heap = this.gatherHeapStats();
        }
        stats.memory = {};
        stats.memory[Game.shard.name] = {
            used: RawMemory.get().length
        };
        stats.market = {
            credits: Game.market.credits,
            num_orders: Game.market.orders ? Object.keys(Game.market.orders).length : 0,
        };
        stats.roomSummary = {};
        var myRooms = _.filter(Game.rooms, function (r) { return !_.isUndefined(r.controller) && r.controller.my && (r.controller.level >= 4); });
        _.forEach(myRooms, function (room) {
            var roomStats = {
                room_name: Game.shard.name + "_" + room.name,
                controller_level: room.controller.level,
                controller_progress: room.controller.progress,
                controller_needed: room.controller.progressTotal,
                controller_downgrade: room.controller.ticksToDowngrade,
                controller_blocked: room.controller.upgradeBlocked,
                energy_avail: room.energyAvailable,
                energy_cap: room.energyCapacityAvailable,
                has_storage: room.storage != null,
                storage_energy: room.storage ? room.storage.store[RESOURCE_ENERGY] : 0,
                storage_minerals: room.storage ? _.sum(room.storage.store) - room.storage.store[RESOURCE_ENERGY] : 0,
                has_terminal: room.terminal != null,
                terminal_energy: room.terminal ? room.terminal.store[RESOURCE_ENERGY] : 0,
                terminal_minerals: room.terminal ? _.sum(room.terminal.store) - room.terminal.store[RESOURCE_ENERGY] : 0,
                spawns_spawning: _.sum(TickCache_1.__find(room, FIND_MY_SPAWNS), function (s) { return s.spawning == null ? 0 : 1; })
            };
            stats.roomSummary[Game.shard.name + "_" + room.name] = roomStats;
        });
        RawMemory.segments[99] = JSON.stringify(stats);
        this.sleep(3);
    };
    Statd.prototype.gatherHeapStats = function () {
        if (Game.cpu["getHeapStatistics"] === undefined) {
            console.log("Heap statistics missing, are we still running in IVM?");
            return null;
        }
        var heap = Game.cpu.getHeapStatistics();
        function toMB(number) {
            return Math.round(number / 1000000);
        }
        return {
            used: toMB(heap.total_heap_size + heap.externally_allocated_size),
            limit: toMB(heap.heap_size_limit),
            local: toMB(heap.total_heap_size),
            external: toMB(heap.externally_allocated_size)
        };
    };
    return Statd;
}(Process_1.Process));
exports.Statd = Statd;


/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Process_1 = __webpack_require__(5);
var PerformanceTest = (function (_super) {
    __extends(PerformanceTest, _super);
    function PerformanceTest() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(PerformanceTest.prototype, "name", {
        get: function () {
            return "/tmp/performance-test";
        },
        enumerable: true,
        configurable: true
    });
    PerformanceTest.prototype.tick = function () {
        var cpuBefore = Game.cpu.getUsed();
        var memoryString = JSON.stringify(Memory);
        var cpuAfter = Game.cpu.getUsed();
        console.log("<font color=\"green\">" + Math.floor((memoryString.length) / 1024) + "k at " + Math.floor(100 * (cpuAfter - cpuBefore)) / 100 + "</font>");
    };
    PerformanceTest.prototype.gcTest = function () {
        var statBefore = Game.cpu.getHeapStatistics();
        var cpuBefore = Game.cpu.getUsed();
        gc(false);
        var statsAfter = Game.cpu.getHeapStatistics();
        var cpuAfter = Game.cpu.getUsed();
        console.log("<font color=\"green\">" + Math.floor((statBefore.used_heap_size - statsAfter.used_heap_size) / 1024 / 1024) + " MB at " + Math.floor(100 * (cpuAfter - cpuBefore)) / 100 + "</font>");
    };
    PerformanceTest.prototype.allowAutoshutdown = function () {
        return false;
    };
    return PerformanceTest;
}(Process_1.Process));
exports.default = PerformanceTest;


/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var BehaviorBase_1 = __webpack_require__(2);
var Process_1 = __webpack_require__(5);
var CostMatrixType_1 = __webpack_require__(0);
var TestPowerCreepsMover = (function (_super) {
    __extends(TestPowerCreepsMover, _super);
    function TestPowerCreepsMover() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(TestPowerCreepsMover.prototype, "name", {
        get: function () {
            return "/tmp/powercreeps-mover";
        },
        enumerable: true,
        configurable: true
    });
    TestPowerCreepsMover.prototype.tick = function () {
        var args = this.processInfo.args;
        _.forEach(Game.powerCreeps, function (pc) {
            if (!_.includes(args, pc.name)) {
                return;
            }
            if (!pc.pos) {
                return;
            }
            var flag = Game.flags[pc.name];
            if (!flag) {
                return;
            }
            if (flag.pos.isEqualTo(pc.pos)) {
                return;
            }
            BehaviorBase_1.default.GoToPosition(pc, flag.pos, { costMatrixType: CostMatrixType_1.CostMatrixType.Offroad, range: 0 });
        });
    };
    TestPowerCreepsMover.prototype.allowAutoshutdown = function () {
        return false;
    };
    return TestPowerCreepsMover;
}(Process_1.Process));
exports.default = TestPowerCreepsMover;


/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Process_1 = __webpack_require__(5);
var VisualizePath = (function (_super) {
    __extends(VisualizePath, _super);
    function VisualizePath() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = "/usr/bin/vis-path";
        return _this;
    }
    VisualizePath.prototype.tick = function () {
        if (!Game.flags['start'] || !Game.flags['end']) {
            return;
        }
        var src = Game.flags['start'].pos;
        var dst = Game.flags['end'].pos;
        var ret = PathFinder.search(src, dst, {
            maxOps: 100000,
            maxRooms: 64,
        });
        var path = ret.path;
        var color = ret.incomplete ? '#f88' : '#8f8';
        var positions = _.groupBy(path, function (p) { return p.roomName; });
        for (var segment in positions) {
            var vis = new RoomVisual(segment);
            vis.poly(positions[segment], {
                fill: 'transparent',
                stroke: color,
                lineStyle: 'dashed',
                strokeWidth: .25,
                opacity: .5
            });
        }
        if (ret.incomplete) {
            var pos = Game.flags['start'].pos;
            var vis = new RoomVisual(pos.roomName);
            vis.text(ret.ops + " ops (cost " + ret.cost + ")", pos);
        }
    };
    return VisualizePath;
}(Process_1.Process));
exports.VisualizePath = VisualizePath;


/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var RoomPositionPrototypes_1 = __webpack_require__(179);
var RoomVisualPrototypes_1 = __webpack_require__(180);
function initPrototypes() {
    RoomPositionPrototypes_1.initRoomPositionPrototypes();
    RoomVisualPrototypes_1.initRoomVisualPrototypes();
}
exports.initPrototypes = initPrototypes;


/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var TickCache_1 = __webpack_require__(1);
var PathUtils_1 = __webpack_require__(19);
var roomNameRegex = /^([WE])(\d+)([NS])(\d+)$/;
var bitmasksRight1 = 1;
var bitmasksRight6 = 63;
var bitmasksRight7 = 127;
var bitmasksRight8 = 255;
function initRoomPositionPrototypes() {
    RoomPosition.prototype.spack = function () {
        var parseResult = roomNameRegex.exec(this.roomName);
        if (!parseResult) {
            throw new Error("Malformed roomName: " + this.roomName + " in RoomPosition: " + JSON.stringify(this));
        }
        var str = parseResult[0], WE = parseResult[1], longitude = parseResult[2], NS = parseResult[3], latitude = parseResult[4];
        if (_.isUndefined(str)) {
            throw new Error("Regexp undefined in RoomPosition: " + this.toString());
        }
        var uint32 = 0;
        uint32 <<= 1;
        uint32 |= 1;
        uint32 <<= 1;
        uint32 |= (WE === "W") ? 0 : 1;
        uint32 <<= 7;
        uint32 |= parseInt(longitude, 10);
        uint32 <<= 1;
        uint32 |= (NS === "N") ? 0 : 1;
        uint32 <<= 7;
        uint32 |= parseInt(latitude, 10);
        uint32 <<= 6;
        uint32 |= this.x;
        uint32 <<= 6;
        uint32 |= this.y;
        return String.fromCodePoint(Math.floor(uint32 / 32768)) + String.fromCodePoint(uint32 % 32768);
    };
    RoomPosition.sunpack = function (str) {
        var uint32 = (str.codePointAt(0) * 32768) + str.codePointAt(1);
        var y = uint32 & bitmasksRight6;
        uint32 >>>= 6;
        var x = uint32 & bitmasksRight6;
        uint32 >>>= 6;
        var latitude = uint32 & bitmasksRight7;
        uint32 >>>= 7;
        var NS = uint32 & bitmasksRight1;
        uint32 >>>= 1;
        var longitude = uint32 & bitmasksRight7;
        uint32 >>>= 7;
        var WE = uint32 & bitmasksRight1;
        uint32 >>>= 1;
        var alwaysOne = uint32 & bitmasksRight1;
        uint32 >>>= 1;
        if (uint32) {
            throw new Error("uint32 not fully consumed when unpacking: " + uint32 + " ");
        }
        if (alwaysOne !== 1) {
            throw new Error("The always-one bit was not one: " + alwaysOne);
        }
        var roomName = (["W", "E"][WE] + longitude +
            ["N", "S"][NS] + latitude);
        return new RoomPosition(x, y, roomName);
    };
    RoomPosition.packPath = function (positions) {
        return _.reduce(positions, function (s, p) { return "" + s + p.spack(); }, '');
    };
    RoomPosition.unpackPath = function (path) {
        if ((path.length % 2) != 0) {
            throw new Error("Invalid path " + path);
        }
        var result = [];
        for (var i = 0; i < path.length; i += 2) {
            result.push(RoomPosition.sunpack(path[i] + path[i + 1]));
        }
        return result;
    };
    RoomPosition.prototype.packLocal = function (extData) {
        var uint32 = extData || 0;
        uint32 <<= 6;
        uint32 |= this.x;
        uint32 <<= 6;
        uint32 |= this.y;
        var result = String.fromCodePoint(uint32 + 32);
        return result;
    };
    RoomPosition.unpackLocal = function (packed, roomName, options) {
        var uint32 = packed.codePointAt(0);
        if (uint32 < 32) {
            throw new Error("Invalid uint value " + uint32);
        }
        uint32 = uint32 - 32;
        var y = uint32 & bitmasksRight6;
        uint32 >>>= 6;
        var x = uint32 & bitmasksRight6;
        uint32 >>>= 6;
        if (uint32 != 0) {
            options.extData = uint32;
        }
        return new RoomPosition(x, y, roomName);
    };
    RoomPosition.prototype.pack = function () {
        var parseResult = roomNameRegex.exec(this.roomName);
        if (!parseResult) {
            throw new Error("Malformed roomName: " + this.roomName + "  in RoomPosition: " + JSON.stringify(this));
        }
        var str = parseResult[0], WE = parseResult[1], longitude = parseResult[2], NS = parseResult[3], latitude = parseResult[4];
        if (_.isUndefined(str)) {
            throw new Error("Regexp undefined in RoomPosition: " + JSON.stringify(this));
        }
        var uint32 = 0;
        uint32 <<= 1;
        uint32 |= 1;
        uint32 <<= 6;
        uint32 |= this.x;
        uint32 <<= 6;
        uint32 |= this.y;
        uint32 <<= 1;
        uint32 |= (WE === "W") ? 0 : 1;
        uint32 <<= 8;
        uint32 |= parseInt(longitude, 10);
        uint32 <<= 1;
        uint32 |= (NS === "N") ? 0 : 1;
        uint32 <<= 8;
        uint32 |= parseInt(latitude, 10);
        return uint32;
    };
    RoomPosition.unpack = function (uint32) {
        var latitude = uint32 & bitmasksRight8;
        uint32 >>>= 8;
        var NS = uint32 & bitmasksRight1;
        uint32 >>>= 1;
        var longitude = uint32 & bitmasksRight8;
        uint32 >>>= 8;
        var WE = uint32 & bitmasksRight1;
        uint32 >>>= 1;
        var y = uint32 & bitmasksRight6;
        uint32 >>>= 6;
        var x = uint32 & bitmasksRight6;
        uint32 >>>= 6;
        var alwaysOne = uint32 & bitmasksRight1;
        uint32 >>>= 1;
        if (uint32) {
            throw new Error("uint32 not fully consumed when unpacking: " + uint32 + " ");
        }
        if (alwaysOne !== 1) {
            throw new Error("The always-one bit was not one: " + alwaysOne + " (argument was " + uint32 + ")");
        }
        var roomName = (["W", "E"][WE] + longitude +
            ["N", "S"][NS] + latitude);
        return new RoomPosition(x, y, roomName);
    };
    RoomPosition.prototype.around = function (range, opts) {
        var minX = Math.max(0, this.x - range);
        var maxX = Math.min(49, this.x + range);
        var minY = Math.max(0, this.y - range);
        var maxY = Math.min(49, this.y + range);
        var result = [];
        for (var i = minX; i <= maxX; i++) {
            for (var j = minY; j <= maxY; j++) {
                result.push(new RoomPosition(i, j, this.roomName));
            }
        }
        return opts == null ? result : _.filter(result, opts.filter);
    };
    RoomPosition.prototype.isWalkable = function () {
        var objects = this.look();
        var haveRoad = _.some(objects, function (o) { return !!o.structure && (o.structure.structureType == STRUCTURE_ROAD); });
        if (!haveRoad && (Game.map.getRoomTerrain(this.roomName).get(this.x, this.y) == TERRAIN_MASK_WALL)) {
            return false;
        }
        return !_.some(objects, function (o) { return !!o.structure && !PathUtils_1.structureIsWalkable(o.structure); }) &&
            !_.some(objects, function (o) { return !!o.constructionSite && o.constructionSite.my && !PathUtils_1.structureIsWalkable(o.constructionSite); });
    };
    RoomPosition.prototype.isFree = function () {
        return this.isWalkable() && !_.some(TickCache_1.__findInRange(this, FIND_CREEPS, 0)) && !_.some(TickCache_1.__findInRange(this, FIND_POWER_CREEPS, 0));
    };
    RoomPosition.prototype.isEdge = function () {
        return this.x == 0 || this.y == 0 || this.x == 49 || this.y == 49;
    };
}
exports.initRoomPositionPrototypes = initRoomPositionPrototypes;


/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function initRoomVisualPrototypes() {
    var colors = {
        gray: '#555555',
        light: '#AAAAAA',
        road: '#666',
        energy: '#FFE87B',
        power: '#F53547',
        dark: '#181818',
        outline: '#8FBB93',
        speechText: '#000000',
        speechBackground: '#2ccf3b'
    };
    RoomVisual.prototype.structure = function (x, y, type, opts) {
        if (opts === void 0) { opts = {}; }
        opts = Object.assign({
            opacity: 1
        }, opts);
        switch (type) {
            case STRUCTURE_EXTENSION:
                this.circle(x, y, {
                    radius: 0.5,
                    fill: colors.dark,
                    stroke: colors.outline,
                    strokeWidth: 0.05,
                    opacity: opts.opacity
                });
                this.circle(x, y, {
                    radius: 0.35,
                    fill: colors.gray,
                    opacity: opts.opacity
                });
                break;
            case STRUCTURE_SPAWN:
                this.circle(x, y, {
                    radius: 0.65,
                    fill: colors.dark,
                    stroke: '#CCCCCC',
                    strokeWidth: 0.10,
                    opacity: opts.opacity
                });
                this.circle(x, y, {
                    radius: 0.40,
                    fill: colors.energy,
                    opacity: opts.opacity
                });
                break;
            case STRUCTURE_POWER_SPAWN:
                this.circle(x, y, {
                    radius: 0.65,
                    fill: colors.dark,
                    stroke: colors.power,
                    strokeWidth: 0.10,
                    opacity: opts.opacity
                });
                this.circle(x, y, {
                    radius: 0.40,
                    fill: colors.energy,
                    opacity: opts.opacity
                });
                break;
            case STRUCTURE_LINK:
                {
                    var outer = [
                        [0.0, -0.5],
                        [0.4, 0.0],
                        [0.0, 0.5],
                        [-0.4, 0.0]
                    ];
                    var inner = [
                        [0.0, -0.3],
                        [0.25, 0.0],
                        [0.0, 0.3],
                        [-0.25, 0.0]
                    ];
                    outer = relPoly(x, y, outer);
                    inner = relPoly(x, y, inner);
                    outer.push(outer[0]);
                    inner.push(inner[0]);
                    this.poly(outer, {
                        fill: colors.dark,
                        stroke: colors.outline,
                        strokeWidth: 0.05,
                        opacity: opts.opacity
                    });
                    this.poly(inner, {
                        fill: colors.gray,
                        stroke: false,
                        opacity: opts.opacity
                    });
                    break;
                }
            case STRUCTURE_TERMINAL:
                {
                    var outer = [
                        [0.0, -0.8],
                        [0.55, -0.55],
                        [0.8, 0.0],
                        [0.55, 0.55],
                        [0.0, 0.8],
                        [-0.55, 0.55],
                        [-0.8, 0.0],
                        [-0.55, -0.55],
                    ];
                    var inner = [
                        [0.0, -0.65],
                        [0.45, -0.45],
                        [0.65, 0.0],
                        [0.45, 0.45],
                        [0.0, 0.65],
                        [-0.45, 0.45],
                        [-0.65, 0.0],
                        [-0.45, -0.45],
                    ];
                    outer = relPoly(x, y, outer);
                    inner = relPoly(x, y, inner);
                    outer.push(outer[0]);
                    inner.push(inner[0]);
                    this.poly(outer, {
                        fill: colors.dark,
                        stroke: colors.outline,
                        strokeWidth: 0.05,
                        opacity: opts.opacity
                    });
                    this.poly(inner, {
                        fill: colors.light,
                        stroke: false,
                        opacity: opts.opacity
                    });
                    this.rect(x - 0.45, y - 0.45, 0.9, 0.9, {
                        fill: colors.gray,
                        stroke: colors.dark,
                        strokeWidth: 0.1,
                        opacity: opts.opacity
                    });
                    break;
                }
            case STRUCTURE_LAB:
                this.circle(x, y - 0.025, {
                    radius: 0.55,
                    fill: colors.dark,
                    stroke: colors.outline,
                    strokeWidth: 0.05,
                    opacity: opts.opacity
                });
                this.circle(x, y - 0.025, {
                    radius: 0.40,
                    fill: colors.gray,
                    opacity: opts.opacity
                });
                this.rect(x - 0.45, y + 0.3, 0.9, 0.25, {
                    fill: colors.dark,
                    stroke: false,
                    opacity: opts.opacity
                });
                {
                    var box = [
                        [-0.45, 0.3],
                        [-0.45, 0.55],
                        [0.45, 0.55],
                        [0.45, 0.3],
                    ];
                    box = relPoly(x, y, box);
                    this.poly(box, {
                        stroke: colors.outline,
                        strokeWidth: 0.05,
                        opacity: opts.opacity
                    });
                }
                break;
            case STRUCTURE_TOWER:
                this.circle(x, y, {
                    radius: 0.6,
                    fill: colors.dark,
                    stroke: colors.outline,
                    strokeWidth: 0.05,
                    opacity: opts.opacity
                });
                this.rect(x - 0.4, y - 0.3, 0.8, 0.6, {
                    fill: colors.gray,
                    opacity: opts.opacity
                });
                this.rect(x - 0.2, y - 0.9, 0.4, 0.5, {
                    fill: colors.light,
                    stroke: colors.dark,
                    strokeWidth: 0.07,
                    opacity: opts.opacity
                });
                break;
            case STRUCTURE_ROAD:
                this.circle(x, y, {
                    radius: 0.175,
                    fill: colors.road,
                    stroke: false,
                    opacity: opts.opacity
                });
                if (!this.roads)
                    this.roads = [];
                this.roads.push([x, y]);
                break;
            case STRUCTURE_RAMPART:
                this.circle(x, y, {
                    radius: 0.65,
                    fill: '#434C43',
                    stroke: '#5D735F',
                    strokeWidth: 0.10,
                    opacity: opts.opacity
                });
                break;
            case STRUCTURE_WALL:
                this.circle(x, y, {
                    radius: 0.40,
                    fill: colors.dark,
                    stroke: colors.light,
                    strokeWidth: 0.05,
                    opacity: opts.opacity
                });
                break;
            case STRUCTURE_STORAGE:
                this.circle(x, y, {
                    fill: colors.energy,
                    radius: 0.35,
                    stroke: colors.dark,
                    strokeWidth: 0.20,
                    opacity: opts.opacity
                });
                break;
            case STRUCTURE_OBSERVER:
                this.circle(x, y, {
                    fill: colors.dark,
                    radius: 0.45,
                    stroke: colors.outline,
                    strokeWidth: 0.05,
                    opacity: opts.opacity
                });
                this.circle(x + 0.225, y, {
                    fill: colors.outline,
                    radius: 0.20,
                    opacity: opts.opacity
                });
                break;
            case STRUCTURE_NUKER:
                var outline = [
                    [0, -1],
                    [-0.47, 0.2],
                    [-0.5, 0.5],
                    [0.5, 0.5],
                    [0.47, 0.2],
                    [0, -1],
                ];
                outline = relPoly(x, y, outline);
                this.poly(outline, {
                    stroke: colors.outline,
                    strokeWidth: 0.05,
                    fill: colors.dark,
                    opacity: opts.opacity
                });
                var inline = [
                    [0, -.80],
                    [-0.40, 0.2],
                    [0.40, 0.2],
                    [0, -.80],
                ];
                inline = relPoly(x, y, inline);
                this.poly(inline, {
                    stroke: colors.outline,
                    strokeWidth: 0.01,
                    fill: colors.gray,
                    opacity: opts.opacity
                });
                break;
            case STRUCTURE_CONTAINER:
                this.rect(x - 0.225, y - 0.3, 0.45, 0.6, {
                    fill: "yellow",
                    opacity: opts.opacity,
                    stroke: colors.dark,
                    strokeWidth: 0.10,
                });
                break;
            default:
                this.circle(x, y, {
                    fill: colors.light,
                    radius: 0.35,
                    stroke: colors.dark,
                    strokeWidth: 0.20,
                    opacity: opts.opacity
                });
                break;
        }
    };
    var dirs = [
        [],
        [0, -1],
        [1, -1],
        [1, 0],
        [1, 1],
        [0, 1],
        [-1, 1],
        [-1, 0],
        [-1, -1]
    ];
    RoomVisual.prototype.connectRoads = function (opts) {
        var _this = this;
        if (opts === void 0) { opts = {}; }
        var color = opts.color || colors.road || 'white';
        if (!this.roads)
            return;
        this.roads.forEach(function (r) {
            var _loop_1 = function (i) {
                var d = dirs[i];
                var c = [r[0] + d[0], r[1] + d[1]];
                var rd = _.some(_this.roads, function (r) { return r[0] == c[0] && r[1] == c[1]; });
                if (rd) {
                    _this.line(r[0], r[1], c[0], c[1], {
                        color: color,
                        width: 0.35,
                        opacity: opts.opacity || 1
                    });
                }
            };
            for (var i = 1; i <= 4; i++) {
                _loop_1(i);
            }
        });
    };
    RoomVisual.prototype.speech = function (text, x, y, opts) {
        if (opts === void 0) { opts = {}; }
        var textcolor = !!opts.color ? opts.color : colors.speechText;
        var opacity = !!opts.opacity ? opts.opacity : 1;
        var fontstring = '';
        var pointer = [
            [-0.2, -0.8],
            [0.2, -0.8],
            [0, -0.3]
        ];
        pointer = relPoly(x, y, pointer);
        pointer.push(pointer[0]);
        this.poly(pointer, {
            opacity: opacity,
            strokeWidth: 0.0
        });
        this.text(text, x, y - 1, {
            color: textcolor,
            backgroundPadding: 0.1,
            opacity: opacity,
            font: fontstring
        });
    };
    function relPoly(x, y, poly) {
        return poly.map(function (p) {
            p[0] += x;
            p[1] += y;
            return p;
        });
    }
}
exports.initRoomVisualPrototypes = initRoomVisualPrototypes;


/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var TickCache_1 = __webpack_require__(1);
function findDamagedStructures(room) {
    return TickCache_1.__find(room, FIND_STRUCTURES, {
        filter: function (s) { return (((s.hitsMax - s.hits) > 1000) && (s.structureType != STRUCTURE_WALL) && (s.structureType != STRUCTURE_RAMPART)); }
    }).sort(function (a, b) { return b.hitsMax + a.hits - b.hits - a.hitsMax; });
}
function getRepairQueue(room) {
    if (!_.isUndefined(room.memory.nextRepairCheck) && (room.memory.nextRepairCheck > Game.time)) {
        return [];
    }
    var currentQueue;
    if (_.isUndefined(room.memory.repairQueue) || (room.memory.repairQueue == null) || (room.memory.repairQueue.length == 0)) {
        currentQueue = findDamagedStructures(room);
        if (currentQueue.length == 0) {
            room.memory.nextRepairCheck = 500 + Game.time;
        }
    }
    else {
        try {
            currentQueue = room.memory.repairQueue.map(function (id) { return Game.getObjectById(id); });
        }
        catch (e) {
            currentQueue = [];
        }
    }
    var firstToRepair = _.first(currentQueue);
    while ((currentQueue.length > 0) &&
        ((firstToRepair == null) || (firstToRepair.hits == firstToRepair.hitsMax))) {
        currentQueue = currentQueue.splice(1);
        firstToRepair = _.first(currentQueue);
    }
    try {
        room.memory.repairQueue = currentQueue.map(function (s) { return s.id; });
    }
    catch (e) {
        room.memory.repairQueue = [];
    }
    return currentQueue;
}
exports.getRepairQueue = getRepairQueue;


/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var TickCache_1 = __webpack_require__(1);
var RoutedCharger_1 = __webpack_require__(38);
var Spawn_1 = __webpack_require__(3);
var CircularCharger = (function (_super) {
    __extends(CircularCharger, _super);
    function CircularCharger() {
        var _this = _super.call(this) || this;
        _this.name = 'circularCharger';
        _this._myInitialPositionRange = 1;
        return _this;
    }
    CircularCharger.prototype._getMyInitialPosition = function (creep) {
        var flag = RoutedCharger_1.RoutedCharger._assignedTo(creep);
        var pos = (flag == null) ?
            RoomPosition.unpack(parseInt(Spawn_1.getAssignmentByName(creep.name))) :
            _.first(TickCache_1.__findInRange(flag.pos, FIND_STRUCTURES, 1, { filter: function (s) { return s.structureType == STRUCTURE_LINK; } })).pos;
        return pos;
    };
    return CircularCharger;
}(RoutedCharger_1.RoutedCharger));
exports.CircularCharger = CircularCharger;


/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var BehaviorBase_1 = __webpack_require__(2);
var Role_Base_1 = __webpack_require__(4);
var Rooms_1 = __webpack_require__(14);
var Task_1 = __webpack_require__(6);
var TaskManager_1 = __webpack_require__(7);
var TasksRepository_1 = __webpack_require__(11);
var TickCache_1 = __webpack_require__(1);
var CostMatrixType_1 = __webpack_require__(0);
var ChargerBase_1 = __webpack_require__(24);
var RoutedCharger_1 = __webpack_require__(38);
var STATE_COMBINEDCHARGER_INIT = 1;
var STATE_COMBINEDCHARGER_WORK = 2;
var STATE_COMBINEDCHARGER_WALK = 3;
var STATE_COMBINEDCHARGER_TASK = 4;
var STATE_COMBINEDCHARGER_WAIT = 5;
var STATE_COMBINEDCHARGER_ENER = 6;
var CombinedCharger = (function (_super) {
    __extends(CombinedCharger, _super);
    function CombinedCharger() {
        var _this = _super.call(this) || this;
        _this.name = 'combinedCharger';
        _this[STATE_COMBINEDCHARGER_INIT] = _this._moveToInitialPosition;
        _this[STATE_COMBINEDCHARGER_WORK] = _this._work;
        _this[STATE_COMBINEDCHARGER_WALK] = _this._walk;
        _this[STATE_COMBINEDCHARGER_TASK] = _this._task;
        _this[STATE_COMBINEDCHARGER_WAIT] = _this._wait;
        _this[STATE_COMBINEDCHARGER_ENER] = _this._obtainEnergy;
        return _this;
    }
    CombinedCharger.prototype._walk = function (creep) {
        if (creep.pos.isEqualTo(Role_Base_1.RoleBase._getMyAssignmentPosition(creep))) {
            if (this._allCharged(creep)) {
                this._setState(creep, STATE_COMBINEDCHARGER_WORK);
                return false;
            }
            if (this._work(creep)) {
                return true;
            }
        }
        return _super.prototype._walk.call(this, creep);
    };
    CombinedCharger.prototype._haveWork = function (creep) {
        if (!this._allCharged(creep) ||
            this._haveLinkToProcess(creep) ||
            this._haveSpawnToCharge(creep, 300) ||
            this._haveTowersToCharge(creep, 500)) {
            return true;
        }
        var pos = this._getMyInitialPosition(creep);
        var container = this._getCachedObject(creep, 'containerId', function (creep) { return _.first(TickCache_1.__findInRange(pos || creep.pos, FIND_STRUCTURES, 1, {
            filter: function (s) { return s.structureType == STRUCTURE_CONTAINER; }
        })); }, true);
        if ((container != null) && (container.store[RESOURCE_ENERGY] == 0)) {
            return true;
        }
        var tombstone = _.first(TickCache_1.__findInRange(pos, FIND_TOMBSTONES, 1, {
            filter: function (t) { return _.sum(t.store) > 100; }
        }));
        return tombstone != null;
    };
    CombinedCharger.prototype._haveLinkToProcess = function (creep) {
        var myLinks = this._getMyLinks(creep);
        if (myLinks == null) {
            return false;
        }
        for (var i = 0; i < myLinks.length; i++) {
            var link = myLinks[i];
            if (link != null) {
                if ((!this._hasAnyServerLink(link) || ChargerBase_1.ChargerBase._hasAnyEmptyClientLink(link)) && (link.energy < link.energyCapacity)) {
                    return true;
                }
                if (this._hasAnyServerLink(link) && !ChargerBase_1.ChargerBase._hasAnyEmptyClientLink(link) && (link.energy > 0)) {
                    return true;
                }
            }
        }
        return false;
    };
    CombinedCharger.prototype._haveTowersToCharge = function (creep, limit) {
        var myPosition = this._getMyInitialPosition(creep);
        var allTowers = this._process.GetCachedObjects('towers', function () { return TickCache_1.__find(creep.room, FIND_MY_STRUCTURES, {
            filter: { structureType: STRUCTURE_TOWER }
        }); });
        var towers = _.filter(allTowers, function (t) { return myPosition.isNearTo(t); });
        if (_.some(towers)) {
            var towerToCharge = _.first(towers.sort(function (a, b) { return a.energy - b.energy; }));
            if (towerToCharge != null) {
                return towerToCharge.energy < limit;
            }
        }
        return false;
    };
    CombinedCharger.prototype._haveSpawnToCharge = function (creep, limit) {
        return null != this._findUnchargedSpawn(creep, limit);
    };
    CombinedCharger.prototype._work = function (creep) {
        var myPos = Role_Base_1.RoleBase._getMyAssignmentPosition(creep);
        if (!creep.pos.isEqualTo(myPos)) {
            BehaviorBase_1.default.GoToPosition(creep, myPos, { costMatrixType: CostMatrixType_1.CostMatrixType.HalfSpeed });
            return true;
        }
        var stationaryTasks = this._freeInventory(creep) ||
            this._cleanupLink(creep) ||
            this._pickup(creep) ||
            this._pickupTombstones(creep) ||
            this._cleanupContainer(creep) ||
            this._chargeSpawns(creep, 300) ||
            this._chargeLink(creep) ||
            this._chargeTowers(creep, 500) ||
            this._takeEnergy(creep) ||
            this._refillContainer(creep, 1000);
        if (stationaryTasks) {
            return true;
        }
        if (!this._allCharged(creep)) {
            this._setState(creep, STATE_COMBINEDCHARGER_WALK);
            return false;
        }
        if (this._queryTask(creep)) {
            this._setState(creep, STATE_COMBINEDCHARGER_TASK);
            if ((creep.carry[RESOURCE_ENERGY] > 0)) {
                creep.transfer(creep.room.storage, RESOURCE_ENERGY);
                return true;
            }
            return false;
        }
        var idleTasks = this._refillContainer(creep, 2000) ||
            this._chargeTowers(creep, 900) ||
            this._chargeSpawns(creep, 300);
        if (idleTasks) {
            return true;
        }
        return this._idle(creep) || true;
    };
    CombinedCharger.prototype._pickupTombstones = function (creep) {
        var tombstone = _.first(TickCache_1.__findInRange(creep.pos, FIND_TOMBSTONES, 1, {
            filter: function (t) { return _.sum(t.store) > 0; }
        }));
        if (tombstone == null) {
            return false;
        }
        if (_.sum(creep.carry) > 0) {
            creep.transfer(creep.room.storage, _.last(_.keys(creep.carry)));
            return true;
        }
        creep.withdraw(tombstone, _.last(_.keys(tombstone.store)));
        return true;
    };
    CombinedCharger.prototype._pickup = function (creep) {
        var resources = TickCache_1.__find(creep.room, FIND_DROPPED_RESOURCES);
        var near = _.filter(resources, function (r) { return creep.pos.isNearTo(r); });
        if (!_.some(near)) {
            return false;
        }
        if (_.sum(creep.carry) > 0) {
            creep.transfer(creep.room.storage, _.last(_.keys(creep.carry)));
            return true;
        }
        var mineral = _.first(_.filter(near, function (r) { return r.resourceType != RESOURCE_ENERGY; }));
        if (mineral != null) {
            creep.pickup(mineral);
            return true;
        }
        creep.pickup(_.first(near));
        return true;
    };
    CombinedCharger.prototype._queryTask = function (creep) {
        if (creep.ticksToLive < 50) {
            return false;
        }
        var task = TaskManager_1.default.QueryLocalHaulerTask(creep);
        if (task != null) {
            creep.memory['taskId'] = task.id;
            task.AssignTo(creep);
            return true;
        }
        return false;
    };
    CombinedCharger.prototype._task = function (creep) {
        if (_.isUndefined(creep.memory['taskId'])) {
            this._setState(creep, STATE_COMBINEDCHARGER_INIT);
            return false;
        }
        var task = TasksRepository_1.default.GetById(creep.memory['taskId']);
        if (task == null) {
            delete creep.memory['taskId'];
            this._setState(creep, STATE_COMBINEDCHARGER_INIT);
            return false;
        }
        var result = task.Execute(creep);
        if (result.Type == Task_1.TaskExecutionResultType.Postpone) {
            delete creep.memory['taskId'];
            task.Unassign(creep);
            this._setState(creep, STATE_COMBINEDCHARGER_INIT);
            return false;
        }
        if (result.Type == Task_1.TaskExecutionResultType.Continue) {
            return true;
        }
        if (result.Type == Task_1.TaskExecutionResultType.Completed) {
            delete creep.memory['taskId'];
            task.Unassign(creep);
            TasksRepository_1.default.CleanupCompletedTasks();
            if (!this._queryTask(creep) || this._haveWork(creep) && (creep.room.storage.store[RESOURCE_ENERGY] > creep.carryCapacity)) {
                delete creep.memory['taskId'];
                task.Unassign(creep);
                this._setState(creep, STATE_COMBINEDCHARGER_INIT);
                return false;
            }
            return true;
        }
        console.log("Unexpected result for creep " + creep.name + ": " + JSON.stringify(result));
        creep.say('?');
        return true;
    };
    CombinedCharger.prototype._freeInventory = function (creep) {
        var mineral = this._carryMineral(creep);
        if (mineral) {
            creep.transfer(this._getMainStorage(creep), mineral);
            return true;
        }
        if (creep.carry[RESOURCE_POWER]) {
            creep.transfer(this._getMainStorage(creep), RESOURCE_POWER);
            return true;
        }
        return false;
    };
    CombinedCharger.prototype._obtainEnergy = function (creep) {
        if (!creep.pos.isNearTo(creep.room.terminal)) {
            BehaviorBase_1.default.GoToPosition(creep, creep.room.terminal, { costMatrixType: CostMatrixType_1.CostMatrixType.HalfSpeed, range: 1 });
            return true;
        }
        creep.withdraw(creep.room.terminal, RESOURCE_ENERGY);
        this._setState(creep, STATE_COMBINEDCHARGER_INIT);
        return false;
    };
    CombinedCharger.prototype._takeEnergy = function (creep) {
        if (creep.carry[RESOURCE_ENERGY] == creep.carryCapacity) {
            return false;
        }
        var storage = this._getMainStorage(creep);
        if (storage.store[RESOURCE_ENERGY] < creep.carryCapacity) {
            if (creep.room.terminal) {
                creep.transfer(storage, RESOURCE_ENERGY);
                this._setState(creep, STATE_COMBINEDCHARGER_ENER);
                return true;
            }
            creep.say(':(');
            return true;
        }
        creep.withdraw(storage, RESOURCE_ENERGY);
        return true;
    };
    CombinedCharger.prototype._cleanupLink = function (creep) {
        var myLinks = this._getMyLinks(creep);
        if (myLinks == null) {
            return false;
        }
        for (var i = 0; i < myLinks.length; i++) {
            var link = myLinks[i];
            if ((link == null) || (link.energy == 0) || ChargerBase_1.ChargerBase._hasAnyEmptyClientLink(link) || !this._hasAnyServerLink(link)) {
                continue;
            }
            if (_.sum(creep.carry) == creep.carryCapacity) {
                creep.transfer(this._getMainStorage(creep), RESOURCE_ENERGY);
                return true;
            }
            creep.withdraw(link, RESOURCE_ENERGY);
            return true;
        }
        return false;
    };
    CombinedCharger.prototype._chargeLink = function (creep) {
        var myLinks = this._getMyLinks(creep);
        if (myLinks == null) {
            return false;
        }
        for (var i = 0; i < myLinks.length; i++) {
            var link = myLinks[i];
            if ((link != null) && (!this._hasAnyServerLink(link) || ChargerBase_1.ChargerBase._hasAnyEmptyClientLink(link)) && (link.energy < link.energyCapacity)) {
                if ((creep.carry[RESOURCE_ENERGY] < (link.energyCapacity - link.energy)) && (_.sum(creep.carry) < creep.carryCapacity)) {
                    return this._takeEnergy(creep);
                }
                creep.transfer(link, RESOURCE_ENERGY);
                return true;
            }
        }
        return false;
    };
    CombinedCharger.prototype._cleanupContainer = function (creep) {
        var container = this._getCachedObject(creep, 'containerId', function (creep) { return _.first(TickCache_1.__findInRange(creep.pos, FIND_STRUCTURES, 1, {
            filter: function (s) { return s.structureType == STRUCTURE_CONTAINER; }
        })); }, true);
        if (container == null) {
            return false;
        }
        if (_.sum(container.store) > container.store[RESOURCE_ENERGY]) {
            if (_.sum(creep.carry) == creep.carryCapacity) {
                creep.transfer(this._getMainStorage(creep), RESOURCE_ENERGY);
                return true;
            }
            creep.withdraw(container, _.last(_.keys(container.store)));
            return true;
        }
        return false;
    };
    CombinedCharger.prototype._findMyCurrentPath = function (creep, startPos) {
        var myPosition = this._getMyInitialPosition(creep);
        var roomRoutes = Rooms_1.getChargeRoutes(Game.rooms[myPosition.roomName]);
        var myRoutes = roomRoutes[myPosition.pack()];
        return myRoutes[startPos.pack()];
    };
    CombinedCharger.prototype._getMainStorage = function (creep) {
        return creep.room.storage;
    };
    return CombinedCharger;
}(RoutedCharger_1.RoutedCharger));
exports.default = CombinedCharger;


/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ChargerBase_1 = __webpack_require__(24);
var TickCache_1 = __webpack_require__(1);
var BehaviorBase_1 = __webpack_require__(2);
var CostMatrixType_1 = __webpack_require__(0);
var MobileCharger = (function (_super) {
    __extends(MobileCharger, _super);
    function MobileCharger() {
        var _this = _super.call(this) || this;
        _this.name = 'mobileCharger';
        _this._findEnergySource = function (creep) {
            var res = creep.pos.findClosestByPath(FIND_DROPPED_RESOURCES, { filter: function (r) { return (r.resourceType == RESOURCE_ENERGY) && (r.amount >= 100); } });
            if (res != null) {
                return res;
            }
            if ((creep.room.terminal != null) && creep.room.memory['emptyTerminal']) {
                return creep.room.terminal;
            }
            var structs = TickCache_1.__find(creep.room, FIND_STRUCTURES, {
                filter: function (s) {
                    return _.includes([STRUCTURE_CONTAINER, STRUCTURE_STORAGE, STRUCTURE_TERMINAL], s.structureType) && (s.store.energy >= (creep.carryCapacity - _.sum(creep.carry))) ||
                        ((s.structureType == STRUCTURE_LINK) && (s.energy >= (creep.carryCapacity - _.sum(creep.carry))));
                }
            });
            if (_.some(structs)) {
                return creep.pos.findClosestByPath(structs, {
                    ignoreCreeps: true
                });
            }
            var source = _.first(TickCache_1.__find(creep.room, FIND_SOURCES).sort(function (a, b) { return (b.energy - a.energy) || (a.ticksToRegeneration - b.ticksToRegeneration); }));
            if ((source.energy == 0) && (creep.carry[RESOURCE_ENERGY] > 0)) {
                creep.memory['state'] = 1 + creep.memory['state'];
            }
            return source;
        };
        _this[1] = function (c) { return _this._travelToAssignment(c, CostMatrixType_1.CostMatrixType.Offroad); };
        _this[2] = _this._charge;
        _this[3] = _this._chargeExtensions;
        return _this;
    }
    MobileCharger.prototype._getMyInitialPosition = function (creep) {
        return ChargerBase_1.ChargerBase._assignedTo(creep).pos;
    };
    MobileCharger.prototype._charge = function (creep) {
        if ((creep.carry.energy == creep.carryCapacity) && (creep.carryCapacity > 0)) {
            delete creep.memory['energyStorageId'];
            this._nextState(creep);
            return false;
        }
        var source = this._getCachedObject(creep, 'energyStorageId', this._findEnergySource);
        if (source == null) {
            delete creep.memory['energyStorageId'];
            if (creep.carry[RESOURCE_ENERGY] > 0) {
                this._nextState(creep);
                return true;
            }
            return this._idle(creep);
        }
        if (!creep.pos.isNearTo(source)) {
            BehaviorBase_1.default.GoToPosition(creep, source.pos, { costMatrixType: CostMatrixType_1.CostMatrixType.HalfSpeed, range: 1 });
            return true;
        }
        if (source instanceof Resource) {
            creep.pickup(source);
            delete creep.memory['energyStorageId'];
            return true;
        }
        if (source instanceof Source) {
            if (creep.harvest(source) == ERR_NOT_ENOUGH_RESOURCES) {
                delete creep.memory['energyStorageId'];
            }
            return true;
        }
        creep.withdraw(source, RESOURCE_ENERGY);
        delete creep.memory['energyStorageId'];
        return true;
    };
    MobileCharger.prototype._chargeExtensions = function (creep) {
        if (creep.carry[RESOURCE_ENERGY] == 0) {
            this._prevState(creep);
            return false;
        }
        var chargeTarget;
        if (_.isUndefined(creep.memory['extId'])) {
            var ext = this._findChargeStructure(creep);
            if (ext == null) {
                this._idle(creep);
                return true;
            }
            creep.memory['extId'] = ext.id;
            chargeTarget = ext;
        }
        else {
            chargeTarget = Game.getObjectById(creep.memory['extId']);
        }
        if (chargeTarget == null) {
            this._prevState(creep);
            return true;
        }
        if (!creep.pos.isNearTo(chargeTarget)) {
            BehaviorBase_1.default.GoToPosition(creep, chargeTarget.pos, { costMatrixType: CostMatrixType_1.CostMatrixType.HalfSpeed, range: 1 });
            return true;
        }
        creep.transfer(chargeTarget, RESOURCE_ENERGY);
        delete creep.memory['extId'];
        return true;
    };
    MobileCharger.prototype._findChargeStructure = function (creep) {
        var exts = creep.room.find(FIND_MY_STRUCTURES, {
            filter: function (s) {
                return _.includes([STRUCTURE_EXTENSION], s.structureType) &&
                    (s.energy < s.energyCapacity);
            }
        });
        if (!_.some(exts)) {
            exts =
                creep.room.find(FIND_MY_STRUCTURES, {
                    filter: function (s) {
                        return (s.structureType == STRUCTURE_SPAWN) &&
                            ((s.energy < s.energyCapacity));
                    }
                });
        }
        if (!_.some(exts)) {
            exts =
                creep.room.find(FIND_MY_STRUCTURES, {
                    filter: function (s) {
                        return (s.structureType == STRUCTURE_TOWER) &&
                            ((s.energy == 0) ||
                                ((s.energyCapacity - s.energy) > creep.carry[RESOURCE_ENERGY]));
                    }
                });
        }
        if (!_.some(exts)) {
            return null;
        }
        return creep.pos.findClosestByPath(exts);
    };
    return MobileCharger;
}(ChargerBase_1.ChargerBase));
exports.MobileCharger = MobileCharger;


/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var RoutedCharger_1 = __webpack_require__(38);
var Role_Base_1 = __webpack_require__(4);
var SquareCharger = (function (_super) {
    __extends(SquareCharger, _super);
    function SquareCharger() {
        var _this = _super.call(this) || this;
        _this.name = 'squareCharger';
        _this[RoutedCharger_1.STATE_ROUTEDCHARGER_INIT] = _this._moveToInitialPosition;
        _this[RoutedCharger_1.STATE_ROUTEDCHARGER_GET] = _this._get;
        _this[RoutedCharger_1.STATE_ROUTEDCHARGER_PUT] = _this._put;
        _this[RoutedCharger_1.STATE_ROUTEDCHARGER_WALK] = _this._walk;
        _this[RoutedCharger_1.STATE_ROUTEDCHARGER_WAIT] = _this._wait;
        _this._myInitialPositionRange = 0;
        return _this;
    }
    SquareCharger.prototype._wait = function (creep) {
        var myPost = Role_Base_1.RoleBase._getMyAssignmentPosition(creep);
        if (!creep.pos.isEqualTo(myPost)) {
            this._setState(creep, RoutedCharger_1.STATE_ROUTEDCHARGER_INIT);
            return false;
        }
        if (!this._allCharged(creep)) {
            this._setState(creep, RoutedCharger_1.STATE_ROUTEDCHARGER_WALK);
            return false;
        }
        var myLink = _.first(this._getMyLinks(creep));
        var cache = this._getCachedObject(creep, 'currentContainerId', this._findMyCurrentContainer, false);
        if ((myLink != null) && ((_.sum(cache.store) + _.sum(creep.carry)) < cache.storeCapacity)) {
            this._setState(creep, RoutedCharger_1.STATE_ROUTEDCHARGER_PUT);
            return false;
        }
        this._renewIfNecessary(creep, 1400);
        creep.say('🚬', true);
        return true;
    };
    return SquareCharger;
}(RoutedCharger_1.RoutedCharger));
exports.SquareCharger = SquareCharger;


/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var BehaviorBase_1 = __webpack_require__(2);
var Spawn_1 = __webpack_require__(3);
var CostMatrixType_1 = __webpack_require__(0);
var ChargerBase_1 = __webpack_require__(24);
var StationaryCharger = (function (_super) {
    __extends(StationaryCharger, _super);
    function StationaryCharger() {
        var _this = _super.call(this) || this;
        _this.name = 'stationaryCharger';
        _this[1] = _this._travelToDestination;
        _this[2] = _this._work;
        return _this;
    }
    StationaryCharger.prototype._work = function (creep) {
        var pos = this._getMyInitialPosition(creep);
        if (!creep.pos.isEqualTo(pos)) {
            BehaviorBase_1.default.GoToPosition(creep, pos, { costMatrixType: CostMatrixType_1.CostMatrixType.HalfSpeed, range: 0 });
            return true;
        }
        this._renewIfNecessary(creep, 1400);
        return (_.sum(creep.carry) > 0) ?
            this._put(creep) :
            this._get(creep);
    };
    StationaryCharger.prototype._travelToDestination = function (creep) {
        var assign = Spawn_1.getAssignmentByName(creep.name);
        if (!_.isUndefined(Game.flags[assign])) {
            var flag = this._getMyFlag(creep);
            if (creep.pos.isNearTo(flag)) {
                this._setTravelTime(creep);
                this._nextState(creep);
                return false;
            }
            return this._travelToFlag(creep, flag, 0, CostMatrixType_1.CostMatrixType.Offroad);
        }
        var pos = RoomPosition.unpack(parseInt(assign));
        if (creep.pos.isNearTo(pos)) {
            this._setTravelTime(creep);
            this._nextState(creep);
            return false;
        }
        BehaviorBase_1.default.GoToPosition(creep, pos, { costMatrixType: CostMatrixType_1.CostMatrixType.HalfSpeed, range: 0 });
        return true;
    };
    StationaryCharger.prototype._getMyInitialPosition = function (creep) {
        var assign = Spawn_1.getAssignmentByName(creep.name);
        if (!_.isUndefined(Game.flags[assign])) {
            return Game.flags[assign].pos;
        }
        return RoomPosition.unpack(parseInt(assign));
    };
    StationaryCharger.prototype._get = function (creep) {
        return this._pickupEnergyNear(creep) ||
            this._pickupMineralNear(creep) ||
            this._lootTombstones(creep) ||
            this._cleanupLink(creep) ||
            this._getFromMyContainer(creep, 1000) ||
            this._getPowerForProcessing(creep) ||
            this._getMineralFromStorage(creep) ||
            this._getMineralFromTerminal(creep) ||
            this._getFromTerminal(creep, 101000) ||
            this._getFromStorage(creep) ||
            this._getFromTerminal(creep, 0) ||
            this._getFromMyContainer(creep, 0) ||
            true;
    };
    StationaryCharger.prototype._put = function (creep) {
        return this._placePower(creep) ||
            this._placeMineral(creep) ||
            this._chargeLink(creep) ||
            this._chargeSpawns(creep, 200) ||
            this._refillContainer(creep, 1000) ||
            this._chargeTowers(creep, 900) ||
            this._fillPowerSpawner(creep) ||
            this._fillTerminal(creep, 100000) ||
            this._chargeSpawns(creep, 300) ||
            this._fillStorage(creep) ||
            this._fillTerminal(creep, 290000) ||
            true;
    };
    return StationaryCharger;
}(ChargerBase_1.ChargerBase));
exports.StationaryCharger = StationaryCharger;


/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var BehaviorBase_1 = __webpack_require__(2);
var CostMatrixType_1 = __webpack_require__(0);
var Role_Base_1 = __webpack_require__(4);
var BaseClaimer_1 = __webpack_require__(39);
var Claimer = (function (_super) {
    __extends(Claimer, _super);
    function Claimer() {
        var _this = _super.call(this) || this;
        _this.name = 'claimer';
        _this._myInitialPositionRange = 1;
        _this[1] = _this._travelToNewRoom;
        _this[2] = _this._take;
        return _this;
    }
    Claimer.prototype._travelToNewRoom = function (creep) {
        var flag = this._getMyFlag(creep);
        if (flag && (flag.secondaryColor == COLOR_GREEN) && creep.memory['_trav'] && creep.memory['_trav'].path) {
            var stroke = creep.memory['_trav'].path.length > creep.ticksToLive ? '#ff8080' : '#80ff80';
            this._drawTravelVisuals(creep, { stroke: stroke });
        }
        return this._travelToAssignment(creep, CostMatrixType_1.CostMatrixType.Offroad);
    };
    Claimer.prototype._travelToFlag = function (creep, flag, rng) {
        if (creep.fatigue > 0) {
            return true;
        }
        var currentCheckpoint = this._getCurrentCheckpoint(creep, flag);
        if (currentCheckpoint == null) {
            return false;
        }
        var range = creep.pos.getRangeTo(currentCheckpoint);
        if (range == 1) {
            creep.move(creep.pos.getDirectionTo(currentCheckpoint));
            if (currentCheckpoint.pos.isEqualTo(Role_Base_1.RoleBase._getMyAssignmentPosition(creep))) {
                this._setTravelTime(creep);
            }
            return true;
        }
        BehaviorBase_1.default.GoToPosition(creep, currentCheckpoint.pos, { costMatrixType: CostMatrixType_1.CostMatrixType.Offroad, range: rng });
        return true;
    };
    Claimer.prototype._take = function (creep) {
        if (!creep.pos.isNearTo(creep.room.controller.pos)) {
            BehaviorBase_1.default.GoToPosition(creep, creep.room.controller, { costMatrixType: CostMatrixType_1.CostMatrixType.Offroad, range: 1 });
            return true;
        }
        if (creep.room.controller.reservation && (creep.room.controller.reservation.username != creep.owner.username)) {
            creep.attackController(creep.room.controller);
            return true;
        }
        if (!creep.room.controller.my) {
            creep.claimController(creep.room.controller);
        }
        return true;
    };
    return Claimer;
}(BaseClaimer_1.BaseClaimer));
exports.Claimer = Claimer;


/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var CostMatrixType_1 = __webpack_require__(0);
var BaseClaimer_1 = __webpack_require__(39);
var BehaviorBase_1 = __webpack_require__(2);
var Role_Base_1 = __webpack_require__(4);
var Reserver = (function (_super) {
    __extends(Reserver, _super);
    function Reserver() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = 'reserver';
        return _this;
    }
    Reserver.prototype._travelToFlag = function (creep, flag, rng) {
        if (creep.fatigue > 0) {
            return true;
        }
        var currentCheckpoint = this._getCurrentCheckpoint(creep, flag);
        if (currentCheckpoint == null) {
            return false;
        }
        var range = creep.pos.getRangeTo(currentCheckpoint);
        if (range == 1) {
            creep.move(creep.pos.getDirectionTo(currentCheckpoint));
            if (currentCheckpoint.pos.isEqualTo(Role_Base_1.RoleBase._getMyAssignmentPosition(creep))) {
                this._setTravelTime(creep);
            }
            return true;
        }
        BehaviorBase_1.default.GoToPosition(creep, currentCheckpoint.pos, { costMatrixType: CostMatrixType_1.CostMatrixType.FullSpeed, range: rng });
        return true;
    };
    return Reserver;
}(BaseClaimer_1.BaseClaimer));
exports.Reserver = Reserver;


/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FighterBase_1 = __webpack_require__(13);
var Spawn_1 = __webpack_require__(3);
var BehaviorBase_1 = __webpack_require__(2);
var Squad_1 = __webpack_require__(23);
var CostMatrixType_1 = __webpack_require__(0);
var RoomProvider_1 = __webpack_require__(12);
var AssaultDismantler = (function (_super) {
    __extends(AssaultDismantler, _super);
    function AssaultDismantler() {
        var _this = _super.call(this) || this;
        _this.name = 'assaultDismantler';
        _this[1] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_ZYNTHIUM_ALKALIDE); };
        _this[2] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_GHODIUM_ALKALIDE); };
        _this[3] = function (c) { return _this._nextState(c); };
        _this[4] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_ZYNTHIUM_ACID); };
        _this[5] = _this._disableRenew;
        _this[6] = _this._march;
        _this[7] = _this._fight;
        _this[8] = _this._travelHome;
        _this[9] = _this._recycle;
        return _this;
    }
    AssaultDismantler.prototype._getMyHealBoostMultiplier = function () {
        return 4;
    };
    AssaultDismantler.prototype._getMyDismantleBoostMultiplier = function () {
        return 4;
    };
    AssaultDismantler.prototype._work = function (creep) {
        this._healMySignificantDamage(creep) ||
            this._dismantleFocusedStructure(creep) ||
            this._dismantleEnemyStructureNear(creep) ||
            this._healMyMinorDamage(creep) ||
            this._healOthersNearby(creep) ||
            this._healOthersAtDistance(creep) ||
            this._overheal(creep);
        var destination = Game.flags[Spawn_1.getAssignmentByName(creep.name)];
        if (creep.room.name == destination.pos.roomName) {
            var squad_1 = BehaviorBase_1.default.GetFollowers(creep);
            if ((squad_1.length > 2) && _.every(squad_1, function (c) { return (c.room.name == destination.pos.roomName) && !c.pos.isEdge(); })) {
                this._nextState(creep);
                return false;
            }
        }
        return this._moveInRaidToFlag(creep, CostMatrixType_1.CostMatrixType.Military, 0) ||
            this._travelToFlag(creep, destination, 0, CostMatrixType_1.CostMatrixType.Military) ||
            this._moveToFlag(creep, 0, CostMatrixType_1.CostMatrixType.Military) || true;
    };
    AssaultDismantler.prototype._combatActions = function (creep) {
        this._healMySignificantDamage(creep) ||
            this._dismantleFocusedStructure(creep) ||
            this._dismantleEnemyStructureNear(creep) ||
            this._healMyMinorDamage(creep) ||
            this._healOthersNearby(creep) ||
            this._healOthersAtDistance(creep) ||
            this._overheal(creep);
        return true;
    };
    AssaultDismantler.prototype._march = function (creep) {
        this._combatActions(creep);
        if (!_.isUndefined(creep.memory['moved'])) {
            delete creep.memory['moved'];
            return true;
        }
        return this._travelToAssignment(creep);
    };
    AssaultDismantler.prototype._fight = function (creep) {
        var _this = this;
        this._combatActions(creep);
        if (!_.isUndefined(creep.memory['moved'])) {
            delete creep.memory['moved'];
            return true;
        }
        var flag = this._getMyFlag(creep);
        var position = (flag && (flag.color == COLOR_BLUE)) ? flag.pos : creep.pos;
        if (flag &&
            creep.memory['spawnedFromRoom'] &&
            flag.memory['squad'] &&
            _.some(flag.memory['squad']['creeps']) &&
            flag.memory['squad']['ttl'] &&
            (creep.ticksToLive == flag.memory['squad']['ttl'])) {
            Squad_1.default(creep.memory['spawnedFromRoom'], flag.name, flag.memory['squad']['creeps']);
        }
        var target = Game.getObjectById(creep.memory['focusedObject']);
        if (!target && creep.memory['focusedObject']) {
            delete creep.memory['focusedObject'];
            RoomProvider_1.default.UpdateRoom(creep.room);
        }
        target = this._findTarget(position, 0, 5);
        if (target) {
            creep.memory['focusedObject'] = target.id;
            if (!creep.pos.isNearTo(target)) {
                return this._moveInRaid(creep, target.pos, { costMatrixType: CostMatrixType_1.CostMatrixType.Military, range: 1 });
            }
        }
        else {
            var squad_2 = BehaviorBase_1.default.GetSquad(creep);
            if (flag.memory["next"] && Game.flags[flag.memory["next"]]) {
                squad_2.forEach(function (c) {
                    c.memory["assignedTo"] = flag.memory["next"];
                    _this._setState(c, _this._getState(c) - 1);
                });
            }
            return true;
        }
        return true;
    };
    return AssaultDismantler;
}(FighterBase_1.default));
exports.default = AssaultDismantler;


/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var TickCache_1 = __webpack_require__(1);
var FighterBase_1 = __webpack_require__(13);
var Traveler_1 = __webpack_require__(16);
var BoostedDefender = (function (_super) {
    __extends(BoostedDefender, _super);
    function BoostedDefender() {
        var _this = _super.call(this) || this;
        _this.name = 'boostedDefender';
        _this[1] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_ZYNTHIUM_ALKALIDE); };
        _this[2] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_GHODIUM_ALKALIDE); };
        _this[3] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_UTRIUM_ACID); };
        _this[4] = _this._fight;
        return _this;
    }
    BoostedDefender.prototype._getMyHealBoostMultiplier = function () {
        return 0;
    };
    BoostedDefender.prototype._getMyDismantleBoostMultiplier = function () {
        return 0;
    };
    BoostedDefender.prototype._combatActions = function (creep) {
        return this._meleeAttack(creep);
    };
    BoostedDefender.prototype._fight = function (creep) {
        this._combatActions(creep);
        var rampartsUnderThreat = TickCache_1.__find(creep.room, FIND_STRUCTURES, {
            filter: function (s) {
                return (s.structureType == STRUCTURE_RAMPART) &&
                    (s.pos.getRangeTo(s.room.storage) < 7) &&
                    _.some(TickCache_1.__findInRange(s.pos, FIND_HOSTILE_CREEPS, 2)) &&
                    !_.some(TickCache_1.__findInRange(s.pos, FIND_MY_CREEPS, 0, { filter: function (c) { return c.id != creep.id; } }));
            }
        });
        if (_.some(rampartsUnderThreat)) {
            var closest = creep.pos.findClosestByPath(rampartsUnderThreat);
            Traveler_1.Traveler.travelTo(creep, closest, {
                range: 0
            });
        }
        return true;
    };
    return BoostedDefender;
}(FighterBase_1.default));
exports.default = BoostedDefender;


/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Dismantler_1 = __webpack_require__(60);
var Squad_1 = __webpack_require__(23);
var CostMatrixType_1 = __webpack_require__(0);
var BoostedDismantler = (function (_super) {
    __extends(BoostedDismantler, _super);
    function BoostedDismantler() {
        var _this = _super.call(this) || this;
        _this.name = 'boostedDismantler';
        _this[1] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_ZYNTHIUM_ALKALIDE); };
        _this[2] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_ZYNTHIUM_ACID); };
        _this[3] = _this._disableRenew;
        _this[4] = _this._march;
        _this[5] = _this._fight;
        return _this;
    }
    BoostedDismantler.prototype._getMyHealBoostMultiplier = function () {
        return 4;
    };
    BoostedDismantler.prototype._getMyDismantleBoostMultiplier = function () {
        return 4;
    };
    BoostedDismantler.prototype._march = function (creep) {
        this._combatActions(creep);
        if (!_.isUndefined(creep.memory['moved'])) {
            delete creep.memory['moved'];
            return true;
        }
        return this._travelToAssignment(creep);
    };
    BoostedDismantler.prototype._fight = function (creep) {
        this._combatActions(creep);
        if (!_.isUndefined(creep.memory['moved'])) {
            delete creep.memory['moved'];
            return true;
        }
        var flag = this._getMyFlag(creep);
        if (flag &&
            creep.memory['spawnedFromRoom'] &&
            flag.memory['squad'] &&
            _.some(flag.memory['squad']['creeps']) &&
            flag.memory['squad']['ttl'] &&
            (creep.ticksToLive == flag.memory['squad']['ttl'])) {
            Squad_1.default(creep.memory['spawnedFromRoom'], flag.name, flag.memory['squad']['creeps']);
        }
        var target = this._findTarget(creep.pos, 0, 5);
        if (target) {
            creep.memory['focusedObject'] = target.id;
            if (!creep.pos.isNearTo(target)) {
                return this._moveInRaid(creep, target.pos, { costMatrixType: CostMatrixType_1.CostMatrixType.FullSpeed });
            }
        }
        else {
        }
        return true;
    };
    return BoostedDismantler;
}(Dismantler_1.default));
exports.default = BoostedDismantler;


/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var AssaultMelee_1 = __webpack_require__(25);
var BoostedMelee = (function (_super) {
    __extends(BoostedMelee, _super);
    function BoostedMelee() {
        var _this = _super.call(this) || this;
        _this[1] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_ZYNTHIUM_ALKALIDE); };
        _this[2] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_UTRIUM_ACID); };
        _this[3] = _this._disableRenew;
        _this[4] = _this._march;
        _this[5] = _this._fight;
        _this[6] = _this._travelHome;
        _this[7] = _this._recycle;
        return _this;
    }
    return BoostedMelee;
}(AssaultMelee_1.default));
exports.default = BoostedMelee;


/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var PortalBlocker_1 = __webpack_require__(61);
var BoostedPortalBlocker = (function (_super) {
    __extends(BoostedPortalBlocker, _super);
    function BoostedPortalBlocker() {
        var _this = _super.call(this) || this;
        _this[1] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_ZYNTHIUM_ALKALIDE); };
        _this[2] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_LEMERGIUM_ALKALIDE); };
        _this[3] = function (c) { return _this._boost(c, RESOURCE_KEANIUM_ALKALIDE); };
        _this[4] = _this._fight;
        return _this;
    }
    return BoostedPortalBlocker;
}(PortalBlocker_1.default));
exports.default = BoostedPortalBlocker;


/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Suppressor_1 = __webpack_require__(30);
var BoostedSuppressor = (function (_super) {
    __extends(BoostedSuppressor, _super);
    function BoostedSuppressor() {
        var _this = _super.call(this) || this;
        _this[1] = function (c) { return _this._boost(c, RESOURCE_ZYNTHIUM_OXIDE); };
        _this[2] = function (c) { return _this._boost(c, RESOURCE_LEMERGIUM_OXIDE); };
        _this[3] = function (c) { return _this._boost(c, RESOURCE_KEANIUM_OXIDE); };
        _this[4] = _this._disableRenew;
        _this[5] = _this._fight;
        _this[6] = _this._bulldoze;
        return _this;
    }
    return BoostedSuppressor;
}(Suppressor_1.default));
exports.default = BoostedSuppressor;


/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FighterBase_1 = __webpack_require__(13);
var Role_Base_1 = __webpack_require__(4);
var BehaviorBase_1 = __webpack_require__(2);
var CostMatrixType_1 = __webpack_require__(0);
var Guardian = (function (_super) {
    __extends(Guardian, _super);
    function Guardian() {
        var _this = _super.call(this) || this;
        _this.name = 'guardian';
        _this[1] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_ZYNTHIUM_ALKALIDE); };
        _this[2] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_GHODIUM_ALKALIDE); };
        _this[3] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_UTRIUM_ACID); };
        _this[4] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_KEANIUM_ALKALIDE); };
        _this[5] = _this._disableRenew;
        _this[6] = _this._fight;
        return _this;
    }
    Guardian.prototype._travelToPost = function (creep) {
        this._rangedAttacks(creep);
        var myPost = Role_Base_1.RoleBase._getMyAssignmentPosition(creep);
        if (creep.pos.isEqualTo(myPost)) {
            this._nextState(creep);
            return true;
        }
        BehaviorBase_1.default.GoToPosition(creep, myPost, { costMatrixType: CostMatrixType_1.CostMatrixType.Military });
        return true;
    };
    Guardian.prototype._combatActions = function (creep) {
        this._rangedAttacks(creep);
        this._meleeAttack(creep);
        return true;
    };
    Guardian.prototype._fight = function (creep) {
        this._combatActions(creep);
        var myPost = Role_Base_1.RoleBase._getMyAssignmentPosition(creep);
        if (!creep.pos.isEqualTo(myPost)) {
            BehaviorBase_1.default.GoToPosition(creep, myPost, { costMatrixType: CostMatrixType_1.CostMatrixType.Military });
        }
        return true;
    };
    Guardian.prototype._getMyHealBoostMultiplier = function () {
        return 4;
    };
    Guardian.prototype._getMyDismantleBoostMultiplier = function () {
        return 1;
    };
    return Guardian;
}(FighterBase_1.default));
exports.default = Guardian;


/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Suppressor_1 = __webpack_require__(30);
var HeavySuppressor = (function (_super) {
    __extends(HeavySuppressor, _super);
    function HeavySuppressor() {
        var _this = _super.call(this) || this;
        _this[1] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_ZYNTHIUM_ALKALIDE); };
        _this[2] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_GHODIUM_ALKALIDE); };
        _this[3] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_LEMERGIUM_ALKALIDE); };
        _this[4] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_KEANIUM_ALKALIDE); };
        _this[5] = _this._disableRenew;
        _this[6] = _this._fight;
        _this[7] = _this._bulldoze;
        return _this;
    }
    return HeavySuppressor;
}(Suppressor_1.default));
exports.default = HeavySuppressor;


/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var TickCache_1 = __webpack_require__(1);
var Traveler_1 = __webpack_require__(16);
var FighterBase_1 = __webpack_require__(13);
var RangedBoostedDefender = (function (_super) {
    __extends(RangedBoostedDefender, _super);
    function RangedBoostedDefender() {
        var _this = _super.call(this) || this;
        _this.name = 'boostedRangedDefender';
        _this[1] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_ZYNTHIUM_ALKALIDE); };
        _this[2] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_GHODIUM_ALKALIDE); };
        _this[3] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_KEANIUM_ALKALIDE); };
        _this[4] = _this._fight;
        return _this;
    }
    RangedBoostedDefender.prototype._getMyHealBoostMultiplier = function () {
        return 0;
    };
    RangedBoostedDefender.prototype._getMyDismantleBoostMultiplier = function () {
        return 0;
    };
    RangedBoostedDefender.prototype._combatActions = function (creep) {
        return this._rangedAttacks(creep);
    };
    RangedBoostedDefender.prototype._fight = function (creep) {
        this._combatActions(creep);
        var rampartsUnderThreat = TickCache_1.__find(creep.room, FIND_STRUCTURES, {
            filter: function (s) {
                return (s.structureType == STRUCTURE_RAMPART) &&
                    (s.pos.getRangeTo(s.room.storage) < 7) &&
                    _.some(TickCache_1.__findInRange(s.pos, FIND_HOSTILE_CREEPS, 3)) &&
                    s.pos.isWalkable() &&
                    !_.some(TickCache_1.__findInRange(s.pos, FIND_MY_CREEPS, 0, { filter: function (c) { return c.id != creep.id; } }));
            }
        });
        if (_.some(rampartsUnderThreat)) {
            var closest = creep.pos.findClosestByPath(rampartsUnderThreat);
            creep.room.visual.circle(closest.pos.x, closest.pos.y, {
                stroke: '#8888ff'
            });
            Traveler_1.Traveler.travelTo(creep, closest, {
                range: 0
            });
        }
        else {
            creep.say('🚬', true);
        }
        return true;
    };
    return RangedBoostedDefender;
}(FighterBase_1.default));
exports.default = RangedBoostedDefender;


/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var TickCache_1 = __webpack_require__(1);
var AssaultRanger_1 = __webpack_require__(21);
var Spawn_1 = __webpack_require__(3);
var BehaviorBase_1 = __webpack_require__(2);
var CostMatrixType_1 = __webpack_require__(0);
var RemoteDefender = (function (_super) {
    __extends(RemoteDefender, _super);
    function RemoteDefender() {
        var _this = _super.call(this) || this;
        _this.name = 'remoteDefender';
        _this._findDamagedAllies = function (creep) { return TickCache_1.__find(Game.rooms[Spawn_1.getAssignmentByName(creep.name)], FIND_MY_CREEPS, { filter: function (c) { return c.hits < c.hitsMax; } }); };
        _this[1] = _this._moveToDefendingRoom;
        _this[2] = _this._defend;
        _this[3] = _this._healAllies;
        _this[4] = _this._utilize;
        _this[5] = _this._recycle;
        _this[6] = _this._recycle;
        return _this;
    }
    RemoteDefender.prototype._moveToDefendingRoom = function (creep) {
        if (creep.room.name == Spawn_1.getAssignmentByName(creep.name)) {
            this._nextState(creep);
        }
        BehaviorBase_1.default.GoToPosition(creep, new RoomPosition(25, 25, Spawn_1.getAssignmentByName(creep.name)), { costMatrixType: CostMatrixType_1.CostMatrixType.Military, range: 22 });
        return true;
    };
    RemoteDefender.prototype._defend = function (creep) {
        var enemies = this._getCachedObjects(creep, 'enemies', this._findEnemiesInRoom);
        var currentEnemy = _.first(_.compact(enemies));
        if (currentEnemy == null) {
            this._nextState(creep);
            return true;
        }
        if (creep.pos.getRangeTo(currentEnemy) > 3) {
            BehaviorBase_1.default.GoToPosition(creep, currentEnemy, { costMatrixType: CostMatrixType_1.CostMatrixType.Military, range: 3 });
        }
        this._rangedAttacks(creep);
        this._healMySignificantDamage(creep) || this._healOthersNearby(creep);
        return true;
    };
    RemoteDefender.prototype._healAllies = function (creep) {
        this._nextState(creep);
        return true;
    };
    RemoteDefender.prototype._utilize = function (creep) {
        var homeRoom = this._getHomeRoom(creep);
        if (homeRoom == null) {
            console.log("Home room for " + creep.name + " not found");
            return true;
        }
        if (creep.room.name == homeRoom.name) {
            this._nextState(creep);
            return false;
        }
        if (creep.pos.isNearTo(homeRoom.storage)) {
            this._nextState(creep);
            return false;
        }
        BehaviorBase_1.default.GoToPosition(creep, homeRoom.storage.pos, { costMatrixType: CostMatrixType_1.CostMatrixType.Military, range: 1 });
        return true;
    };
    RemoteDefender.prototype._getMyHealBoostMultiplier = function () {
        return 1;
    };
    RemoteDefender.prototype._getMyDismantleBoostMultiplier = function () {
        return 1;
    };
    return RemoteDefender;
}(AssaultRanger_1.default));
exports.default = RemoteDefender;


/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var CreepAnalyzer_1 = __webpack_require__(15);
var BehaviorBase_1 = __webpack_require__(2);
var Config_1 = __webpack_require__(8);
var Spawn_1 = __webpack_require__(3);
var TaskManager_1 = __webpack_require__(7);
var TickCache_1 = __webpack_require__(1);
var CostMatrixType_1 = __webpack_require__(0);
var Role_Base_1 = __webpack_require__(4);
var AssaultMelee_1 = __webpack_require__(25);
var RemoteMelee = (function (_super) {
    __extends(RemoteMelee, _super);
    function RemoteMelee() {
        var _this = _super.call(this) || this;
        _this.name = 'remoteMelee';
        _this[1] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_ZYNTHIUM_ALKALIDE); };
        _this[2] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_UTRIUM_ACID); };
        _this[3] = function (c) { return _this._travelToDestination(c, CostMatrixType_1.CostMatrixType.Military); };
        _this[4] = _this._guard;
        _this[5] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_ZYNTHIUM_ALKALIDE); };
        _this[6] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_UTRIUM_ACID); };
        _this[7] = _this._fight;
        return _this;
    }
    RemoteMelee.prototype._getMyHealBoostMultiplier = function () {
        return 4;
    };
    RemoteMelee.prototype._getMyDismantleBoostMultiplier = function () {
        return 1;
    };
    RemoteMelee.prototype._guard = function (creep) {
        var enemies = this._findDangerousCreeps(creep);
        if (_.some(enemies)) {
            var levels = enemies.map(function (c) { return CreepAnalyzer_1.CreepAnalyzer.GetThreatLevel(c, false); });
            if (_.some(levels, function (l) { return l.EffectiveHp > 5000; })) {
                this._nextState(creep);
                return false;
            }
        }
        var pos = this._getMyInitialPosition(creep);
        if (!creep.pos.isEqualTo(pos)) {
            BehaviorBase_1.default.GoToPosition(creep, pos, { costMatrixType: CostMatrixType_1.CostMatrixType.Military });
            return true;
        }
        if (creep.ticksToLive > 1450) {
            this._idle(creep);
            return true;
        }
        var spawner = _.first(TickCache_1.__findInRange(pos, FIND_MY_SPAWNS, 1));
        if (spawner == null) {
            return true;
        }
        if (spawner.spawning != null) {
            this._idle(creep);
            return true;
        }
        if (!creep.pos.isNearTo(spawner)) {
            BehaviorBase_1.default.GoToPosition(creep, spawner.pos, { costMatrixType: CostMatrixType_1.CostMatrixType.HalfSpeed, range: 1 });
            return true;
        }
        spawner.renewCreep(creep);
        return true;
    };
    RemoteMelee.prototype._fight = function (creep) {
        this._healMySignificantDamage(creep) ||
            this._meleeAttack(creep) ||
            this._attackFocusedStructure(creep, 1) ||
            this._attackHostileStructuresNear(creep) ||
            this._healMyMinorDamage(creep) ||
            this._healOthersNearby(creep) ||
            this._healOthersAtDistance(creep) ||
            this._overheal(creep);
        if (!_.isUndefined(creep.memory['moved'])) {
            delete creep.memory['moved'];
            return true;
        }
        var enemies = this._findDangerousCreeps(creep);
        if (_.some(enemies)) {
            console.log(enemies.length + " hostiles found");
            var myRamparts = TickCache_1.__find(creep.room, FIND_MY_STRUCTURES, {
                filter: function (s) { return (s.structureType == STRUCTURE_RAMPART) && s.pos.isWalkable(); }
            });
            var ranges = myRamparts.map(function (rampart) {
                return {
                    rampart: rampart,
                    range: rampart.pos.getRangeTo(rampart.pos.findClosestByRange(enemies))
                };
            });
            var minRange_1 = _.min(ranges.map(function (cr) { return cr.range; }));
            console.log("Min range: " + minRange_1);
            var mostDanger = _.filter(ranges, function (cr) { return cr.range == minRange_1; });
            var toGo = creep.pos.findClosestByPath(mostDanger.map(function (r) { return r.rampart; }));
            BehaviorBase_1.default.GoToPosition(creep, toGo.pos, { costMatrixType: CostMatrixType_1.CostMatrixType.Military });
            return true;
        }
        else {
            if (creep.ticksToLive < 200) {
                this._setState(creep, 4);
                delete creep.memory[RESOURCE_CATALYZED_ZYNTHIUM_ALKALIDE + "boostLabId"];
                delete creep.memory[RESOURCE_CATALYZED_UTRIUM_ACID + "boostLabId"];
                TaskManager_1.default.AddLoadTask(creep.room.name, RESOURCE_CATALYZED_ZYNTHIUM_ALKALIDE, creep.getActiveBodyparts(MOVE));
                TaskManager_1.default.AddLoadTask(creep.room.name, RESOURCE_CATALYZED_UTRIUM_ACID, creep.getActiveBodyparts(ATTACK));
                return false;
            }
            var destination = Game.flags[Spawn_1.getAssignmentByName(creep.name)];
            return this._moveInRaidToFlag(creep, CostMatrixType_1.CostMatrixType.Military, 0) ||
                this._travelToFlag(creep, destination, 0, CostMatrixType_1.CostMatrixType.Military) ||
                this._moveToFlag(creep, 0, CostMatrixType_1.CostMatrixType.Military) || true;
        }
    };
    RemoteMelee.prototype._findDangerousCreeps = function (creep) {
        var enemies = TickCache_1.__find(creep.room, FIND_HOSTILE_CREEPS, {
            filter: function (c) { return !_.contains(Config_1.alliedPlayers, c.owner.username) && (c.owner.username != 'Invader'); }
        });
        return enemies;
    };
    RemoteMelee.prototype._getMyInitialPosition = function (creep) {
        var assignString = Spawn_1.getAssignmentByName(creep.name);
        if (!_.isUndefined(Game.flags[assignString])) {
            return Game.flags[assignString].pos;
        }
        if (!_.isUndefined(Game.rooms[assignString])) {
            return Game.rooms[assignString].controller.pos;
        }
        return RoomPosition.unpack(parseInt(assignString));
    };
    RemoteMelee.prototype._travelToDestination = function (creep, moveType) {
        var flag = this._getMyFlag(creep);
        if (creep.pos.isNearTo(flag)) {
            this._setTravelTime(creep);
            this._nextState(creep);
            delete creep.memory['XZHO2boostLabId'];
            return false;
        }
        return this._travelToFlag(creep, flag, 0, moveType);
    };
    RemoteMelee.prototype._travelToFlag = function (creep, flag, rng, moveType) {
        if (creep.fatigue > 0) {
            return true;
        }
        var currentCheckpoint = this._getCurrentCheckpoint(creep, flag);
        if (currentCheckpoint == null) {
            return false;
        }
        var range = creep.pos.getRangeTo(currentCheckpoint);
        if (range == 1) {
            creep.move(creep.pos.getDirectionTo(currentCheckpoint));
            if (currentCheckpoint.pos.isEqualTo(Role_Base_1.RoleBase._getMyAssignmentPosition(creep))) {
                this._setTravelTime(creep);
            }
            return true;
        }
        BehaviorBase_1.default.GoToPosition(creep, currentCheckpoint.pos, { costMatrixType: moveType, range: rng });
        return true;
    };
    return RemoteMelee;
}(AssaultMelee_1.default));
exports.default = RemoteMelee;


/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Spawn_1 = __webpack_require__(3);
var AssaultRanger_1 = __webpack_require__(21);
var Saboteur = (function (_super) {
    __extends(Saboteur, _super);
    function Saboteur() {
        var _this = _super.call(this) || this;
        _this[1] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_ZYNTHIUM_ALKALIDE); };
        _this[2] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_GHODIUM_ALKALIDE); };
        _this[3] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_LEMERGIUM_ALKALIDE); };
        _this[4] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_KEANIUM_ALKALIDE); };
        _this[5] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_KEANIUM_ACID); };
        _this[6] = _this._disableRenew;
        _this[7] = _this._fight;
        _this[8] = _this._makeFormation;
        _this[9] = _this._fightInFormation;
        return _this;
    }
    Saboteur.prototype._defaultRMA = function () {
        return false;
    };
    Saboteur.prototype._fight = function (creep) {
        var destination = Game.flags[Spawn_1.getAssignmentByName(creep.name)];
        if (destination && (destination.pos.roomName == creep.pos.roomName)) {
            if (creep.store.getUsedCapacity()) {
                var resourceToDrop = _(creep.store).keys().filter(function (r) { return creep.store[r]; }).first();
                creep.drop(resourceToDrop);
            }
            else {
                var saboteurStructure = _.first(creep.pos.findInRange(FIND_HOSTILE_STRUCTURES, 1, { filter: function (s) { return !s.my && s.store && s.store[RESOURCE_ENERGY]; } })) ||
                    _.first(creep.pos.findInRange(FIND_STRUCTURES, 1, { filter: function (s) { return !s.my && s.store && s.store[RESOURCE_ENERGY]; } }));
                if (saboteurStructure) {
                    creep.withdraw(saboteurStructure, RESOURCE_ENERGY);
                }
            }
        }
        return _super.prototype._fight.call(this, creep);
    };
    return Saboteur;
}(AssaultRanger_1.default));
exports.default = Saboteur;


/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var CostMatrixType_1 = __webpack_require__(0);
var Role_Base_1 = __webpack_require__(4);
var FighterBase_1 = __webpack_require__(13);
var BehaviorBase_1 = __webpack_require__(2);
var Senitel = (function (_super) {
    __extends(Senitel, _super);
    function Senitel() {
        var _this = _super.call(this) || this;
        _this.name = 'senitel';
        _this._findEnergySource = function (c) { return c.pos.findClosestByPath(FIND_STRUCTURES, {
            filter: function (s) { return (_.includes([STRUCTURE_LINK, STRUCTURE_SPAWN, STRUCTURE_LAB], s.structureType) && s.energy > 0) ||
                (_.includes([STRUCTURE_CONTAINER, STRUCTURE_STORAGE, STRUCTURE_TERMINAL], s.structureType) && s.store.energy > 0); }
        }); };
        _this[1] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_ZYNTHIUM_ALKALIDE); };
        _this[2] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_KEANIUM_ALKALIDE); };
        _this[3] = _this._disableRenew;
        _this[4] = _this._travelToPost;
        _this[5] = _this._fight;
        _this[10] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_KEANIUM_ALKALIDE); };
        _this[11] = function (c) { _this._setState(c, 4); return false; };
        _this[255] = _this._recycle;
        return _this;
    }
    Senitel.prototype._getMyHealBoostMultiplier = function () {
        return 4;
    };
    Senitel.prototype._getMyDismantleBoostMultiplier = function () {
        return 1;
    };
    Senitel.prototype._charge = function (creep) {
        if (creep.carry.energy == creep.carryCapacity) {
            this._nextState(creep);
            return false;
        }
        var source = this._getCachedObject(creep, 'energyStorageId', this._findEnergySource);
        if (creep.withdraw(source, RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {
            BehaviorBase_1.default.GoToPosition(creep, source, { costMatrixType: CostMatrixType_1.CostMatrixType.Military, range: 1 });
        }
        else {
            delete creep.memory['energyStorageId'];
        }
        return true;
    };
    Senitel.prototype._travelToPost = function (creep) {
        this._rangedAttacks(creep);
        var myPost = Role_Base_1.RoleBase._getMyAssignmentPosition(creep);
        if (creep.pos.isEqualTo(myPost)) {
            this._nextState(creep);
            return true;
        }
        BehaviorBase_1.default.GoToPosition(creep, myPost, { costMatrixType: CostMatrixType_1.CostMatrixType.Military, range: 1 });
        return true;
    };
    Senitel.prototype._combatActions = function (creep) {
        if (!_.isUndefined(creep.room.memory['focusFire'])) {
            this._rangedAttacks(creep);
        }
        return true;
    };
    Senitel.prototype._fight = function (creep) {
        this._combatActions(creep);
        var myPost = Role_Base_1.RoleBase._getMyAssignmentPosition(creep);
        if (!creep.pos.isEqualTo(myPost)) {
            this._setState(creep, 4);
            return false;
        }
        return true;
    };
    return Senitel;
}(FighterBase_1.default));
exports.default = Senitel;


/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var AssaultRanger_1 = __webpack_require__(21);
var SuicideRanger = (function (_super) {
    __extends(SuicideRanger, _super);
    function SuicideRanger() {
        var _this = _super.call(this) || this;
        _this[4] = function (c) { return _this._boost(c, RESOURCE_KEANIUM_ALKALIDE); };
        return _this;
    }
    return SuicideRanger;
}(AssaultRanger_1.default));
exports.SuicideRanger = SuicideRanger;


/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var AssaultHealer_1 = __webpack_require__(40);
var UnboostedHealer = (function (_super) {
    __extends(UnboostedHealer, _super);
    function UnboostedHealer() {
        var _this = _super.call(this) || this;
        _this[1] = _this._work;
        delete _this[2];
        delete _this[3];
        delete _this[4];
        delete _this[5];
        return _this;
    }
    UnboostedHealer.prototype._getMyHealBoostMultiplier = function () {
        return 1;
    };
    return UnboostedHealer;
}(AssaultHealer_1.default));
exports.default = UnboostedHealer;


/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var AssaultMelee_1 = __webpack_require__(25);
var UnboostedMelee = (function (_super) {
    __extends(UnboostedMelee, _super);
    function UnboostedMelee() {
        var _this = _super.call(this) || this;
        _this.name = 'melee';
        _this[1] = _this._march;
        _this[2] = _this._fight;
        _this[3] = _this._travelHome;
        _this[4] = _this._recycle;
        delete _this[5];
        delete _this[6];
        return _this;
    }
    return UnboostedMelee;
}(AssaultMelee_1.default));
exports.default = UnboostedMelee;


/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var AssaultRanger_1 = __webpack_require__(21);
var UnboostedRanger = (function (_super) {
    __extends(UnboostedRanger, _super);
    function UnboostedRanger() {
        var _this = _super.call(this) || this;
        _this[1] = _this._fight;
        delete _this[2];
        delete _this[3];
        delete _this[4];
        delete _this[5];
        delete _this[6];
        return _this;
    }
    UnboostedRanger.prototype._getMyHealBoostMultiplier = function () {
        return 1;
    };
    return UnboostedRanger;
}(AssaultRanger_1.default));
exports.default = UnboostedRanger;


/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var TickCache_1 = __webpack_require__(1);
var PathUtils_1 = __webpack_require__(19);
var Spawn_1 = __webpack_require__(3);
var Role_Base_1 = __webpack_require__(4);
var FighterBase_1 = __webpack_require__(13);
function adjustGroupingEffeciency(creep, allies, position) {
    var result = position.efficiency;
    var alliesNearby = allies.filter(function (c) { return (c.id != creep.id) && (position.position.isNearTo(c)); }).length;
    result *= 0.1 * alliesNearby + 1;
    return {
        position: position.position,
        efficiency: result
    };
}
function getRangedAttackEfficiency(pos, enemies) {
    var result = 0;
    for (var i = 0; i < enemies.length; i++) {
        switch (pos.getRangeTo(enemies[i])) {
            case 1:
                result += 10;
                break;
            case 2:
                result += 4;
                break;
            case 3:
                result += 1;
                break;
            default:
                break;
        }
    }
    return result;
}
var ArmedCentralLeecher = (function (_super) {
    __extends(ArmedCentralLeecher, _super);
    function ArmedCentralLeecher() {
        var _this = _super.call(this) || this;
        _this.name = 'armedCentralLeecher';
        _this._findMyKeeperLair = function (creep) {
            return Role_Base_1.RoleBase._getMyAssignmentPosition(creep).findClosestByRange(FIND_STRUCTURES, {
                filter: function (s) { return s.structureType == STRUCTURE_KEEPER_LAIR; }
            });
        };
        _this._findMySource = function (creep) { return Role_Base_1.RoleBase._getMyAssignmentPosition(creep).findClosestByRange(FIND_SOURCES); };
        _this._findMyContainer = function (creep) { return _.first(TickCache_1.__findInRange(creep.pos, FIND_STRUCTURES, 0, {
            filter: function (s) { return s.structureType == STRUCTURE_CONTAINER; }
        })); };
        _this._findKeeper = function (creep) { return _.first(TickCache_1.__findInRange(_this._getMyInitialPosition(creep), FIND_CREEPS, 7, {
            filter: function (c) { return c.owner.username == 'Source Keeper'; }
        })); };
        _this._findInvaders = function (creep) { return TickCache_1.__find(creep.room, FIND_CREEPS, {
            filter: function (c) { return c.owner.username == 'Invader'; }
        }); };
        _this._findSquadMembers = function (creep) { return TickCache_1.__find(creep.room, FIND_MY_CREEPS, {
            filter: function (c) { return Spawn_1.getRoleByName(c.name) == Spawn_1.getRoleByName(creep.name); }
        }); };
        _this._findTransportFlag = function (c) { return _.first(TickCache_1.__findInRange(c.pos, FIND_FLAGS, 1, { filter: function (f) { return (f.color == COLOR_BLUE); } })); };
        _this._findDroppedResourced = function (c) { return _.first(TickCache_1.__findInRange(c.pos, FIND_DROPPED_RESOURCES, 1)); };
        _this[1] = _this._moveToInitialPosition;
        _this[2] = _this._snipeKeeper;
        _this[3] = _this._work;
        _this[4] = _this._getTogether;
        _this[5] = _this._fightInvaders;
        return _this;
    }
    ArmedCentralLeecher.prototype._getMyHealBoostMultiplier = function () {
        return 1;
    };
    ArmedCentralLeecher.prototype._getMyDismantleBoostMultiplier = function () {
        return 1;
    };
    ArmedCentralLeecher.prototype._combatActions = function (creep) {
        return this._healMySignificantDamage(creep) ||
            this._healOthersNearby(creep) ||
            this._healMyMinorDamage(creep);
    };
    ArmedCentralLeecher.prototype._work = function (creep) {
        this._healOthersNearby(creep) || this._healOthersAtDistance(creep);
        return this._checkInvasion(creep) ||
            this._checkLair(creep) ||
            this._walkToSource(creep) ||
            this._repairContainer(creep) ||
            this._buildContainer(creep) ||
            this._placeResource(creep) ||
            this._harvestEnergy(creep) ||
            this._buildShitNearby(creep) ||
            true;
    };
    ArmedCentralLeecher.prototype._snipeKeeper = function (creep) {
        this._healMySignificantDamage(creep) ||
            this._healOthersNearby(creep) ||
            this._healMyMinorDamage(creep);
        if (this._checkInvasion(creep)) {
            return true;
        }
        var keeper = this._getCachedObject(creep, 'currentKeeperId', this._findKeeper);
        var lair = this._getCachedObject(creep, 'myKeeperLairId', this._findMyKeeperLair);
        var avoid = keeper != null ? keeper.pos : lair.pos;
        var distance = creep.pos.getRangeTo(avoid);
        if (distance > 3) {
            creep.moveTo(avoid);
        }
        if (distance < 3) {
            var path = PathUtils_1.getFleeFromOnePath(creep, avoid, 5);
            creep.moveByPath(path);
        }
        if (keeper == null) {
            delete creep.memory['currentKeeperId'];
            delete creep.memory['resourceId'];
            var lair_1 = this._getCachedObject(creep, 'myKeeperLairId', this._findMyKeeperLair);
            if (!_.isUndefined(lair_1.ticksToSpawn) && (lair_1.ticksToSpawn > this._getSnipePrepareTicks(creep))) {
                this._nextState(creep);
            }
            return true;
        }
        creep.rangedAttack(keeper);
        return true;
    };
    ArmedCentralLeecher.prototype._buildContainer = function (creep) {
        var energyRequired = Math.min(creep.carryCapacity, BUILD_POWER * creep.getActiveBodyparts(WORK));
        if (creep.carry[RESOURCE_ENERGY] < energyRequired) {
            var energyNear = _.first(TickCache_1.__findInRange(creep.pos, FIND_DROPPED_RESOURCES, 1, {
                filter: function (r) { return r.resourceType == RESOURCE_ENERGY; }
            }));
            if (energyNear != null) {
                creep.pickup(energyNear);
                return true;
            }
            return false;
        }
        var myContainer = this._getCachedObject(creep, 'myContainerId', this._findMyContainer);
        if (myContainer != null) {
            return false;
        }
        var cSite = this._getCachedObject(creep, 'constructionSiteId', function (c) { return _.first(TickCache_1.__findInRange(c.pos, FIND_CONSTRUCTION_SITES, 1)); });
        if (cSite == null) {
            if (this._findMyContainer(creep) == null) {
                creep.room.createConstructionSite(creep.pos, STRUCTURE_CONTAINER);
                delete creep.memory['constructionSiteId'];
                return true;
            }
            delete creep.memory['myContainerId'];
            delete creep.memory['constructionSiteId'];
            return false;
        }
        creep.build(cSite);
        if (cSite.progress >= 4900) {
            var transportFlag = this._findTransportFlag(cSite);
            if ((transportFlag != null) && (transportFlag.secondaryColor == COLOR_GREY)) {
                transportFlag.setColor(COLOR_BLUE, COLOR_RED);
            }
        }
        return true;
    };
    ArmedCentralLeecher.prototype._repairContainer = function (creep) {
        var energyRequired = Math.min(creep.carryCapacity, creep.getActiveBodyparts(WORK));
        if (creep.carry[RESOURCE_ENERGY] < energyRequired) {
            var energyNear = _.first(TickCache_1.__findInRange(creep.pos, FIND_DROPPED_RESOURCES, 1, {
                filter: function (r) { return r.resourceType == RESOURCE_ENERGY; }
            }));
            if (energyNear != null) {
                creep.pickup(energyNear);
                return true;
            }
            return false;
        }
        var myContainer = this._getCachedObject(creep, 'myContainerId', this._findMyContainer);
        if (myContainer == null) {
            return false;
        }
        if (myContainer.hits == myContainer.hitsMax) {
            return false;
        }
        creep.repair(myContainer);
        return true;
    };
    ArmedCentralLeecher.prototype._walkToSource = function (creep) {
        var mySource = this._getCachedObject(creep, 'mySourceId', this._findMySource);
        if (mySource == null) {
            creep.say('src?');
            return true;
        }
        var workPosition = this._getWorkingPosition(creep);
        if (workPosition == null) {
            if (creep.pos.isNearTo(mySource)) {
                return false;
            }
            creep.moveTo(mySource);
            return true;
        }
        else {
            if (creep.pos.isEqualTo(workPosition)) {
                return false;
            }
            if (creep.pos.isNearTo(workPosition)) {
                creep.move(creep.pos.getDirectionTo(workPosition));
            }
            else {
                creep.moveTo(workPosition);
            }
            return true;
        }
    };
    ArmedCentralLeecher.prototype._getWorkingPosition = function (creep) {
        var myFlag = this._getMyFlag(creep);
        if (_.isUndefined(myFlag.memory['workPosition'])) {
            var mySource = this._getCachedObject(creep, 'mySourceId', this._findMySource);
            var container = _.first(TickCache_1.__findInRange(mySource.pos, FIND_STRUCTURES, 1, {
                filter: function (s) { return s.structureType == STRUCTURE_CONTAINER; }
            }));
            if (container != null) {
                myFlag.memory['workPosition'] = container.pos;
            }
            else {
                var cSite = _.first(TickCache_1.__findInRange(mySource.pos, FIND_CONSTRUCTION_SITES, 1, {
                    filter: function (cs) { return cs.structureType == STRUCTURE_CONTAINER; }
                }));
                if (cSite != null) {
                    myFlag.memory['workPosition'] = cSite.pos;
                }
            }
        }
        return new RoomPosition(myFlag.memory['workPosition'].x, myFlag.memory['workPosition'].y, myFlag.memory['workPosition'].roomName);
    };
    ArmedCentralLeecher.prototype._buildShitNearby = function (creep) {
        var energyRequired = Math.min(creep.carryCapacity, BUILD_POWER * creep.getActiveBodyparts(WORK));
        if (creep.carry[RESOURCE_ENERGY] < energyRequired) {
            return false;
        }
        var cSite = _.first(TickCache_1.__findInRange(creep.pos, FIND_CONSTRUCTION_SITES, 3));
        if (cSite != null) {
            creep.build(cSite);
            return true;
        }
        return false;
    };
    ArmedCentralLeecher.prototype._placeResource = function (creep) {
        var resource = this._getCachedObject(creep, 'resourceId', this._findDroppedResourced);
        if (resource == null) {
            return false;
        }
        var myContainer = this._getCachedObject(creep, 'myContainerId', this._findMyContainer);
        if (_.sum(myContainer.store) == myContainer.storeCapacity) {
            return false;
        }
        if (_.sum(creep.carry) == creep.carryCapacity) {
            creep.transfer(myContainer, RESOURCE_ENERGY);
            return false;
        }
        creep.pickup(resource);
        return true;
    };
    ArmedCentralLeecher.prototype._harvestEnergy = function (creep) {
        var myContainer = this._getCachedObject(creep, 'myContainerId', this._findMyContainer);
        if ((myContainer == null) || (_.sum(myContainer.store) < myContainer.storeCapacity) || (_.sum(creep.carry) < creep.carryCapacity)) {
            var mySource = this._getCachedObject(creep, 'mySourceId', this._findMySource);
            if (mySource.energy > 0) {
                var toBeHarvested = Math.min(mySource.energy, HARVEST_POWER * creep.getActiveBodyparts(WORK));
                if (toBeHarvested > 0) {
                    var alreadyHarvested = _.isUndefined(creep.room.memory['energyHarvested']) ? 0 : creep.room.memory['energyHarvested'];
                    creep.room.memory['energyHarvested'] = alreadyHarvested + toBeHarvested;
                }
                creep.harvest(mySource);
                return true;
            }
        }
        return false;
    };
    ArmedCentralLeecher.prototype._checkLair = function (creep) {
        var myFlag = this._getMyFlag(creep);
        if (myFlag.pos.roomName != creep.pos.roomName) {
            return false;
        }
        var lair = this._getCachedObject(creep, 'myKeeperLairId', this._findMyKeeperLair);
        if (lair == null) {
            creep.say('lair?');
            return false;
        }
        if (lair.ticksToSpawn > this._getSnipePrepareTicks(creep)) {
            return false;
        }
        this._beRelieved(creep);
        this._setState(creep, 2);
        return true;
    };
    ArmedCentralLeecher.prototype._checkInvasion = function (creep) {
        if ((Game.time % 3) != 2) {
            return false;
        }
        var myFlag = this._getMyFlag(creep);
        if (myFlag.pos.roomName != creep.pos.roomName) {
            return false;
        }
        var invaders = this._findInvaders(creep);
        if (_.some(invaders)) {
            creep.say('🐐', true);
            creep.memory['invadersIds'] = invaders.map(function (i) { return i.id; });
            if (_.isUndefined(creep.room.memory['reopenAt']) || _.isUndefined(creep.room.memory['energyHarvested']) || (creep.room.memory['energyHarvested'] > 0)) {
                if (!_.isUndefined(creep.room.memory['invasionsHistory'])) {
                    delete creep.room.memory['invasionsHistory'];
                }
                creep.room.memory['energyHarvested'] = 0;
                creep.room.memory['reopenAt'] = 1500 + Game.time;
            }
            this._beRelieved(creep);
            this._nextState(creep);
            return true;
        }
        return false;
    };
    ArmedCentralLeecher.prototype._beRelieved = function (creep) {
        if (_.sum(creep.carry) > 0) {
            var myContainer = this._getCachedObject(creep, 'myContainerId', this._findMyContainer);
            if ((myContainer == null) || ((_.sum(myContainer.store) + _.sum(creep.carry)) > myContainer.storeCapacity) || !creep.pos.isNearTo(myContainer)) {
                creep.drop(RESOURCE_ENERGY);
            }
            else {
                creep.transfer(myContainer, RESOURCE_ENERGY);
            }
        }
    };
    ArmedCentralLeecher.prototype._getTogether = function (creep) {
        this._healMySignificantDamage(creep) ||
            this._healOthersNearby(creep) ||
            this._healMyMinorDamage(creep) ||
            this._healOthersAtDistance(creep);
        var rendezvous = null;
        if (!_.isUndefined(creep.memory['rendezvousFlag'])) {
            rendezvous = Game.flags[creep.memory['rendezvousFlag']];
        }
        else {
            rendezvous = _.first(TickCache_1.__find(creep.room, FIND_FLAGS, { filter: function (f) { return (f.color == COLOR_RED) && (f.secondaryColor == COLOR_ORANGE); } }));
            creep.memory['rendezvousFlag'] = rendezvous.name;
        }
        var allMiners = this._findSquadMembers(creep);
        if (!creep.pos.isNearTo(rendezvous)) {
            var keeper = this._getCachedObject(creep, 'currentKeeperId', this._findKeeper);
            if (keeper != null) {
                var distance = creep.pos.getRangeTo(keeper);
                if (distance < 7) {
                    var path = PathUtils_1.getFleeFromOnePath(creep, keeper.pos, 7);
                    creep.moveByPath(path);
                }
                else {
                    creep.moveTo(rendezvous);
                }
            }
            else {
                creep.moveTo(rendezvous);
            }
        }
        else {
            var squadMembers = TickCache_1.__findInRange(rendezvous.pos, FIND_MY_CREEPS, 1, {
                filter: function (c) { return Spawn_1.getRoleByName(c.name) == Spawn_1.getRoleByName(creep.name); }
            });
            if (squadMembers.length == allMiners.length) {
                this._nextState(creep);
                return false;
            }
        }
        var invaders = _.filter(this._getCachedObjects(creep, 'invadersIds', this._findInvaders), function (c) { return c != null; });
        if (_.some(allMiners, function (m) { return _.some(invaders, function (i) { return m.pos.getRangeTo(i) <= 4; }); })) {
            this._nextState(creep);
            return false;
        }
        return true;
    };
    ArmedCentralLeecher.prototype._fightInvaders = function (creep) {
        this._healMySignificantDamage(creep) ||
            this._healOthersNearby(creep) ||
            this._healMyMinorDamage(creep);
        var invaders = _.filter(this._getCachedObjects(creep, 'invadersIds', this._findInvaders), function (c) { return c != null; });
        var defenders = _.filter(this._getCachedObjects(creep, 'squadMembers', this._findSquadMembers), function (c) { return c != null; });
        if (!_.some(invaders)) {
            this._setState(creep, 1);
            creep.say('🖕', true);
            delete creep.room.memory['reopenAt'];
            delete creep.memory['currentKeeperId'];
            return true;
        }
        var attacking = false;
        var efficiency = getRangedAttackEfficiency(creep.pos, invaders.map(function (e) { return e.pos; }));
        if (efficiency >= 10) {
            creep.rangedMassAttack();
            attacking = true;
        }
        var availableTargets = _.filter(invaders, function (i) { return creep.pos.inRangeTo(i, 3); });
        var bestTarget = _.first(availableTargets.sort(function (a, b) { return a.hits - b.hits; }));
        if (bestTarget != null) {
            creep.rangedAttack(bestTarget);
            attacking = true;
        }
        var betterPosition = this._findBetterPosition(creep, defenders, invaders);
        if (betterPosition != null) {
            if (creep.pos.isNearTo(betterPosition)) {
                creep.move(creep.pos.getDirectionTo(betterPosition));
            }
            else {
                creep.moveTo(betterPosition);
            }
        }
        else {
            if (efficiency == 0) {
                creep.moveTo(creep.pos.findClosestByPath(invaders));
            }
        }
        if (!attacking) {
            this._healOthersAtDistance(creep);
        }
        return true;
    };
    ArmedCentralLeecher.prototype._findBetterPosition = function (creep, myTroops, enemies) {
        var minX = Math.max(1, creep.pos.x - 2);
        var maxX = Math.min(48, creep.pos.x + 2);
        var minY = Math.max(1, creep.pos.y - 2);
        var maxY = Math.min(48, creep.pos.y + 2);
        var freePositions = [];
        var entities = creep.room.lookAtArea(minY, minX, maxY, maxX, true);
        var blockingEntities = _.filter(entities, function (e) { return (e.creep != null) || ((e.structure != null) && !PathUtils_1.structureIsWalkable(e.structure)); });
        var _loop_1 = function (i) {
            var _loop_2 = function (j) {
                var position = new RoomPosition(i, j, creep.room.name);
                if (Game.map.getTerrainAt(position) == 'wall') {
                    return "continue";
                }
                if (_.some(blockingEntities, function (e) { return (e.x == i) && (e.y == j); })) {
                    return "continue";
                }
                freePositions.push(position);
            };
            for (var j = minY; j <= maxY; j++) {
                _loop_2(j);
            }
        };
        for (var i = minX; i <= maxX; i++) {
            _loop_1(i);
        }
        var enemyPositions = enemies.map(function (e) { return e.pos; });
        var Efficiencies = _.map(freePositions, function (item) {
            return { position: item, efficiency: getRangedAttackEfficiency(item, enemyPositions) };
        });
        var adjustedEffeciencies = _.map(Efficiencies, function (i) { return adjustGroupingEffeciency(creep, myTroops, i); });
        var bestPosition = _.first(adjustedEffeciencies.sort(function (a, b) { return b.efficiency - a.efficiency; }));
        var myCurrentEffeciency = adjustGroupingEffeciency(creep, myTroops, {
            position: creep.pos,
            efficiency: getRangedAttackEfficiency(creep.pos, enemyPositions)
        }).efficiency;
        if (bestPosition.efficiency > myCurrentEffeciency) {
            return bestPosition.position;
        }
        return null;
    };
    ArmedCentralLeecher.prototype._getSnipePrepareTicks = function (c) {
        var flag = this._getMyFlag(c);
        if ((flag != null) && !_.isUndefined(flag.memory['prepareTicks'])) {
            return flag.memory['prepareTicks'];
        }
        return 10;
    };
    ArmedCentralLeecher.prototype._moveToInitialPosition = function (creep) {
        this._healMySignificantDamage(creep) ||
            this._healOthersNearby(creep) ||
            this._healMyMinorDamage(creep) ||
            this._healOthersAtDistance(creep);
        var myPosition = Role_Base_1.RoleBase._getMyAssignmentPosition(creep);
        if (creep.room.name == myPosition.roomName) {
            if (this._checkInvasion(creep)) {
                return true;
            }
            this._checkLair(creep);
        }
        return this._moveToPosition(creep, myPosition);
    };
    ArmedCentralLeecher.prototype._moveToPosition = function (creep, position) {
        var range = creep.pos.getRangeTo(position);
        switch (range) {
            case 0:
                this._nextState(creep);
                return false;
            case 1:
                if (!creep.memory.firstArrive) {
                    creep.memory.firstArrive = Game.time;
                    creep.memory.travelTime = creep.memory.firstArrive - creep.memory.spawnedAt;
                }
                if (this._myInitialPositionRange == 1) {
                    this._nextState(creep);
                    return true;
                }
                creep.move(creep.pos.getDirectionTo(position));
                return true;
            default:
                creep.moveTo(position, { reusePath: 50, noPathFinding: false, ignoreCreeps: false });
                return true;
        }
    };
    return ArmedCentralLeecher;
}(FighterBase_1.default));
exports.ArmedCentralLeecher = ArmedCentralLeecher;


/***/ }),
/* 207 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var BehaviorBase_1 = __webpack_require__(2);
var TickCache_1 = __webpack_require__(1);
var CostMatrixType_1 = __webpack_require__(0);
var CreepAnalyzer_1 = __webpack_require__(46);
var Role_Base_1 = __webpack_require__(4);
var Leecher = (function (_super) {
    __extends(Leecher, _super);
    function Leecher() {
        var _this = _super.call(this) || this;
        _this.name = 'leecher';
        _this[1] = _this._moveToInitialPosition;
        _this[2] = _this._work;
        return _this;
    }
    Leecher.prototype._getMyInitialPosition = function (creep) {
        if (!creep) {
            return null;
        }
        var p = this._process;
        return p.HarvestingPosition;
    };
    Leecher.prototype._work = function (creep) {
        var myPosition = this._getMyInitialPosition(creep);
        if (!creep.pos.isEqualTo(myPosition)) {
            BehaviorBase_1.default.GoToPosition(creep, myPosition, { costMatrixType: CostMatrixType_1.CostMatrixType.HalfSpeed });
            return true;
        }
        var source = this._getMySource();
        var link = this._getMyLink(creep);
        if (!source || !link) {
            return this._idle(creep);
        }
        var harvestPower = CreepAnalyzer_1.default.CalcBodyEffectiveness(creep.body).harvest * HARVEST_POWER;
        var carryNearFull = (_.sum(creep.carry) + harvestPower * 2) > creep.carryCapacity;
        var linkNearFull = creep.carry.energy >= (link.energyCapacity - link.energy);
        if (creep.carry.energy && carryNearFull || linkNearFull || creep.ticksToLive <= 2) {
            if (carryNearFull && link.energy == link.energyCapacity) {
                return this._idle(creep);
            }
            creep.transfer(link, RESOURCE_ENERGY);
        }
        if (!source.energy) {
            return this._idle(creep);
        }
        if (creep.ticksToLive <= 2) {
            return true;
        }
        var result = creep.harvest(source);
        if (result != OK) {
            console.log("Harvester " + creep.name + "@" + creep.pos + " harvest error: " + result);
        }
        return true;
    };
    Leecher.prototype._getMySource = function () {
        var p = this._process;
        return p.Source;
    };
    Leecher.prototype._getMyLink = function (creep) {
        if (!_.isUndefined(creep.memory.myLinkId)) {
            return Game.getObjectById(creep.memory.myLinkId);
        }
        var link = _.first(TickCache_1.__findInRange(creep.pos, FIND_MY_STRUCTURES, 1, { filter: function (s) { return s.structureType == STRUCTURE_LINK; } }));
        creep.memory.myLinkId = (link == null) ? null : link.id;
        return link;
    };
    return Leecher;
}(Role_Base_1.RoleBase));
exports.Leecher = Leecher;


/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var TickCache_1 = __webpack_require__(1);
var Role_Base_1 = __webpack_require__(4);
var Spawn_1 = __webpack_require__(3);
var LeecherBase = (function (_super) {
    __extends(LeecherBase, _super);
    function LeecherBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LeecherBase.prototype._getMyInitialPosition = function (creep) {
        var assign = Spawn_1.getAssignmentByName(creep.name);
        if (!_.isUndefined(Game.flags[assign])) {
            return Game.flags[assign].pos;
        }
        return RoomPosition.unpack(parseInt(assign));
    };
    LeecherBase.prototype._getMyContainer = function (creep) {
        return this._getCachedObject(creep, 'myContainerId', function (creep) { return _.first(TickCache_1.__findInRange(creep.pos, FIND_STRUCTURES, 0, {
            filter: function (s) { return (s.structureType == STRUCTURE_CONTAINER) || (s.structureType == STRUCTURE_TERMINAL); }
        })); });
    };
    return LeecherBase;
}(Role_Base_1.RoleBase));
exports.LeecherBase = LeecherBase;


/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var TickCache_1 = __webpack_require__(1);
var MineralLeecher_1 = __webpack_require__(62);
var RotationMineralLeecher = (function (_super) {
    __extends(RotationMineralLeecher, _super);
    function RotationMineralLeecher() {
        var _this = _super.call(this) || this;
        _this.name = 'rotationMineralLeecher';
        _this._findMyLab = function (creep) { return _.first(TickCache_1.__findInRange(creep.pos, FIND_MY_STRUCTURES, 1, {
            filter: function (s) { return s.structureType == STRUCTURE_LAB; }
        })); };
        _this[1] = _this._moveToInitialPosition;
        _this[2] = _this._boostHarvest;
        _this[3] = _this._work;
        return _this;
    }
    RotationMineralLeecher.prototype._boostHarvest = function (creep) {
        return this._boost(creep, RESOURCE_CATALYZED_UTRIUM_ALKALIDE);
    };
    RotationMineralLeecher.prototype._work = function (creep) {
        return this._harvest(creep) ||
            this._pickup(creep) ||
            this._transfer(creep) ||
            this._chargeLab(creep) ||
            this._fillLab(creep) ||
            true;
    };
    RotationMineralLeecher.prototype._chargeLab = function (creep) {
        var myLab = this._getCachedObject(creep, 'myLabId', this._findMyLab);
        if (myLab == null) {
            return false;
        }
        var container = this._getMyContainer(creep);
        var missingEnergy = myLab.energyCapacity - myLab.energy;
        if (missingEnergy > 0) {
            if (creep.carry.energy > 0) {
                creep.transfer(myLab, RESOURCE_ENERGY);
                return true;
            }
            if (container.store.energy > 0) {
                creep.withdraw(container, RESOURCE_ENERGY, Math.min(creep.carryCapacity - _.sum(creep.carry), missingEnergy));
                return true;
            }
        }
        else {
            if (creep.carry.energy > 0) {
                creep.transfer(container, RESOURCE_ENERGY);
                return true;
            }
        }
        return false;
    };
    RotationMineralLeecher.prototype._fillLab = function (creep) {
        var myLab = this._getCachedObject(creep, 'myLabId', this._findMyLab);
        if (myLab == null) {
            return false;
        }
        if (!_.isUndefined(creep.carry[RESOURCE_CATALYZED_UTRIUM_ALKALIDE]) && (creep.carry[RESOURCE_CATALYZED_UTRIUM_ALKALIDE] > 0)) {
            creep.transfer(myLab, RESOURCE_CATALYZED_UTRIUM_ALKALIDE);
            return true;
        }
        var missingMineral = myLab.mineralCapacity - myLab.mineralAmount;
        if (missingMineral == 0) {
            return false;
        }
        var container = this._getMyContainer(creep);
        if (!_.isUndefined(container.store[RESOURCE_CATALYZED_UTRIUM_ALKALIDE]) && (container.store[RESOURCE_CATALYZED_UTRIUM_ALKALIDE] > 0)) {
            creep.withdraw(container, RESOURCE_CATALYZED_UTRIUM_ALKALIDE, Math.min(creep.carryCapacity - _.sum(creep.carry), container.store[RESOURCE_CATALYZED_UTRIUM_ALKALIDE], missingMineral));
            return true;
        }
        return false;
    };
    return RotationMineralLeecher;
}(MineralLeecher_1.MineralLeecher));
exports.RotationMineralLeecher = RotationMineralLeecher;


/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Role_Base_1 = __webpack_require__(4);
var Spawn_1 = __webpack_require__(3);
var CostMatrixType_1 = __webpack_require__(0);
var CaravanCarrier = (function (_super) {
    __extends(CaravanCarrier, _super);
    function CaravanCarrier() {
        var _this = _super.call(this) || this;
        _this.name = 'caravanCarrier';
        _this[1] = _this._travelToDestination;
        return _this;
    }
    CaravanCarrier.prototype._getMyInitialPosition = function (creep) {
        var assign = Spawn_1.getAssignmentByName(creep.name);
        return RoomPosition.unpack(parseInt(assign));
    };
    CaravanCarrier.prototype._travelToDestination = function (creep) {
        var pos = this._getMyInitialPosition(creep);
        return this._moveInRaid(creep, pos, { costMatrixType: CostMatrixType_1.CostMatrixType.FullSpeed }) || true;
    };
    return CaravanCarrier;
}(Role_Base_1.RoleBase));
exports.default = CaravanCarrier;


/***/ }),
/* 211 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var AssaultHealer_1 = __webpack_require__(40);
var CostMatrixType_1 = __webpack_require__(0);
var CaravanHealer = (function (_super) {
    __extends(CaravanHealer, _super);
    function CaravanHealer() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = 'caravanHealer';
        return _this;
    }
    CaravanHealer.prototype._work = function (creep) {
        this._healMySignificantDamage(creep) ||
            this._healOthersNearby(creep) ||
            this._healOthersAtDistance(creep) ||
            this._healMyMinorDamage(creep) ||
            this._overheal(creep);
        var pos = this._getMyInitialPosition(creep);
        return this._moveInRaid(creep, pos, { costMatrixType: CostMatrixType_1.CostMatrixType.FullSpeed }) || true;
    };
    return CaravanHealer;
}(AssaultHealer_1.default));
exports.default = CaravanHealer;


/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var AssaultMelee_1 = __webpack_require__(25);
var CostMatrixType_1 = __webpack_require__(0);
var CaravanMelee = (function (_super) {
    __extends(CaravanMelee, _super);
    function CaravanMelee() {
        var _this = _super.call(this) || this;
        _this.name = 'caravanMelee';
        _this[1] = _this._fight;
        return _this;
    }
    CaravanMelee.prototype._fight = function (creep) {
        this._healMySignificantDamage(creep) ||
            this._meleeAttack(creep) ||
            this._attackFocusedStructure(creep, 1) ||
            this._attackHostileStructuresNear(creep) ||
            this._healMyMinorDamage(creep) ||
            this._healOthersNearby(creep) ||
            this._healOthersAtDistance(creep) ||
            this._overheal(creep);
        var pos = this._getMyInitialPosition(creep);
        return this._moveInRaid(creep, pos, { costMatrixType: CostMatrixType_1.CostMatrixType.FullSpeed }) || true;
    };
    return CaravanMelee;
}(AssaultMelee_1.default));
exports.default = CaravanMelee;


/***/ }),
/* 213 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var AssaultRanger_1 = __webpack_require__(21);
var CostMatrixType_1 = __webpack_require__(0);
var CaravanRanger = (function (_super) {
    __extends(CaravanRanger, _super);
    function CaravanRanger() {
        var _this = _super.call(this) || this;
        _this.name = 'caravanRanger';
        _this[1] = _this._fight;
        return _this;
    }
    CaravanRanger.prototype._fight = function (creep) {
        var rangedAttack = this._rangedAttacks(creep) || this._attackFocusedStructure(creep, 3);
        var heal = this._healMySignificantDamage(creep) || this._healOthersNearby(creep) || this._overheal(creep);
        if (!rangedAttack && !heal) {
            this._healOthersAtDistance(creep);
        }
        var pos = this._getMyInitialPosition(creep);
        return this._moveInRaid(creep, pos, { costMatrixType: CostMatrixType_1.CostMatrixType.FullSpeed }) || true;
    };
    return CaravanRanger;
}(AssaultRanger_1.default));
exports.default = CaravanRanger;


/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Degrader_1 = __webpack_require__(63);
var CostMatrixType_1 = __webpack_require__(0);
var BoostedDegrader = (function (_super) {
    __extends(BoostedDegrader, _super);
    function BoostedDegrader() {
        var _this = _super.call(this) || this;
        _this[1] = _this._blockSpawning;
        _this[2] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_ZYNTHIUM_ALKALIDE); };
        _this[3] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_GHODIUM_ALKALIDE); };
        _this[4] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_LEMERGIUM_ALKALIDE); };
        _this[5] = _this._travelToDestinationRoom;
        _this[6] = _this._degrade;
        _this[7] = _this._travelHome;
        _this[8] = _this._recycle;
        return _this;
    }
    BoostedDegrader.prototype._getMyInitialPosition = function (creep) {
        var flag = this._getMyFlag(creep);
        if (flag == null) {
            creep.say('?');
            return null;
        }
        return flag.pos;
    };
    BoostedDegrader.prototype._travelToDestinationRoom = function (creep) {
        creep.heal(creep);
        return _super.prototype._travelToDestinationRoom.call(this, creep, CostMatrixType_1.CostMatrixType.FullSpeed);
    };
    BoostedDegrader.prototype._degrade = function (creep) {
        creep.heal(creep);
        return _super.prototype._degrade.call(this, creep);
    };
    return BoostedDegrader;
}(Degrader_1.Degrader));
exports.default = BoostedDegrader;


/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var RemoteHelper_1 = __webpack_require__(64);
var GreaterRemoteHelper = (function (_super) {
    __extends(GreaterRemoteHelper, _super);
    function GreaterRemoteHelper() {
        var _this = _super.call(this) || this;
        _this[1] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_ZYNTHIUM_ALKALIDE); };
        _this[2] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_KEANIUM_ACID); };
        _this[3] = _this._take;
        _this[4] = _this._moveToInitialPosition;
        _this[5] = _this._chargeStructures;
        _this[6] = _this._work;
        return _this;
    }
    return GreaterRemoteHelper;
}(RemoteHelper_1.default));
exports.default = GreaterRemoteHelper;


/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Role_Base_1 = __webpack_require__(4);
var Task_1 = __webpack_require__(6);
var TaskManager_1 = __webpack_require__(7);
var TasksRepository_1 = __webpack_require__(11);
var Locomotive = (function (_super) {
    __extends(Locomotive, _super);
    function Locomotive() {
        var _this = _super.call(this) || this;
        _this.name = 'locomotive';
        _this[1] = _this._work;
        _this[255] = _this._recycle;
        return _this;
    }
    Locomotive.prototype._getMyInitialPosition = function (creep) {
        return creep.pos;
    };
    Locomotive.prototype._work = function (creep) {
        return this._task(creep) || this._queryTask(creep) || this._idle(creep);
    };
    Locomotive.prototype._task = function (creep) {
        if (_.isUndefined(creep.memory['taskId'])) {
            return false;
        }
        var task = TasksRepository_1.default.GetById(creep.memory['taskId']);
        if (task == null) {
            delete creep.memory['taskId'];
            return false;
        }
        var result = task.Execute(creep);
        if (result.Type == Task_1.TaskExecutionResultType.Postpone) {
            delete creep.memory['taskId'];
            task.Unassign(creep);
            return false;
        }
        if (result.Type == Task_1.TaskExecutionResultType.Continue) {
            return true;
        }
        if (result.Type == Task_1.TaskExecutionResultType.Completed) {
            delete creep.memory['taskId'];
            task.Unassign(creep);
            TasksRepository_1.default.CleanupCompletedTasks();
            return true;
        }
        console.log("Unexpected result for creep " + creep.name + ": " + JSON.stringify(result));
        creep.say('?');
        return true;
    };
    Locomotive.prototype._queryTask = function (creep) {
        var task = TaskManager_1.default.QueryTowTask(creep);
        if (task != null) {
            creep.memory['taskId'] = task.id;
            task.AssignTo(creep);
            return true;
        }
        return false;
    };
    return Locomotive;
}(Role_Base_1.RoleBase));
exports.default = Locomotive;


/***/ }),
/* 217 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var BehaviorBase_1 = __webpack_require__(2);
var CostMatrixType_1 = __webpack_require__(0);
var RoomProvider_1 = __webpack_require__(12);
var BaseClaimer_1 = __webpack_require__(39);
var RoomCleaner = (function (_super) {
    __extends(RoomCleaner, _super);
    function RoomCleaner() {
        var _this = _super.call(this) || this;
        _this.name = 'roomCleaner';
        _this[1] = _this._travelToNewRoom;
        _this[2] = _this._clear;
        return _this;
    }
    RoomCleaner.prototype._travelToNewRoom = function (creep) {
        var flag = this._getMyFlag(creep);
        if (flag && (flag.secondaryColor == COLOR_GREEN) && creep.memory['_trav'] && creep.memory['_trav'].path) {
            var stroke = creep.memory['_trav'].path.length > creep.ticksToLive ? '#ff8080' : '#80ff80';
            this._drawTravelVisuals(creep, { stroke: stroke });
        }
        return this._travelToAssignment(creep, CostMatrixType_1.CostMatrixType.FullSpeed);
    };
    RoomCleaner.prototype._clear = function (creep) {
        if (!creep.pos.isNearTo(creep.room.controller.pos)) {
            BehaviorBase_1.default.GoToPosition(creep, creep.room.controller, { costMatrixType: CostMatrixType_1.CostMatrixType.FullSpeed, range: 1 });
            return true;
        }
        if (creep.room.controller.reservation && (creep.room.controller.reservation.username != creep.owner.username)) {
            creep.attackController(creep.room.controller);
            return true;
        }
        if (!creep.room.controller.my) {
            creep.claimController(creep.room.controller);
            return true;
        }
        var structures = creep.room.find(FIND_STRUCTURES, { filter: function (s) { return s.structureType != STRUCTURE_CONTROLLER; } });
        if (_.some(structures)) {
            creep.say('🧹');
            _.forEach(structures, function (s) { return s.destroy(); });
            return true;
        }
        if (creep.room.controller.sign && creep.room.controller.sign.text) {
            creep.signController(creep.room.controller, '');
        }
        creep.room.controller.unclaim();
        creep.suicide();
        RoomProvider_1.default.UpdateRoom(creep.room);
        return true;
    };
    return RoomCleaner;
}(BaseClaimer_1.BaseClaimer));
exports.RoomCleaner = RoomCleaner;


/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var BehaviorBase_1 = __webpack_require__(2);
var Spawn_1 = __webpack_require__(3);
var CostMatrixType_1 = __webpack_require__(0);
var RoomProvider_1 = __webpack_require__(12);
var Role_Base_1 = __webpack_require__(4);
var RoomLocker = (function (_super) {
    __extends(RoomLocker, _super);
    function RoomLocker() {
        var _this = _super.call(this) || this;
        _this.name = 'roomLocker';
        _this[1] = _this._charge;
        _this[2] = _this._travelToAssignment;
        _this[3] = _this._lock;
        return _this;
    }
    RoomLocker.prototype._charge = function (creep) {
        if ((creep.carry.energy >= creep.carryCapacity) && (creep.carryCapacity > 0)) {
            this._nextState(creep);
            return false;
        }
        var energySource = this._getCachedObject(creep, 'energyStorageId', function () { return creep.pos.findClosestByRange([
            creep.room.storage,
            creep.room.terminal
        ]); });
        if (!energySource) {
            creep.say('energy?');
            return true;
        }
        if (!creep.pos.isNearTo(energySource)) {
            BehaviorBase_1.default.GoToPosition(creep, energySource, { costMatrixType: CostMatrixType_1.CostMatrixType.FullSpeed, range: 1 });
            return true;
        }
        creep.withdraw(energySource, RESOURCE_ENERGY);
        return true;
    };
    RoomLocker.prototype._claim = function (creep) {
        if (creep.room.controller.my) {
            return false;
        }
        if (creep.pos.isNearTo(creep.room.controller)) {
            creep.claimController(creep.room.controller);
        }
        else {
            BehaviorBase_1.default.GoToPosition(creep, creep.room.controller, { costMatrixType: CostMatrixType_1.CostMatrixType.FullSpeed, range: 1 });
        }
        return true;
    };
    RoomLocker.prototype._upgrade = function (creep) {
        if (creep.room.controller.my && (creep.room.controller.level > 1)) {
            return false;
        }
        var structures = creep.room.find(FIND_STRUCTURES, { filter: function (s) { return !_.includes([STRUCTURE_WALL, STRUCTURE_TERMINAL], s.structureType); } });
        if (_.some(structures)) {
            _.forEach(structures, function (s) { return s.destroy(); });
        }
        if (creep.pos.getRangeTo(creep.room.controller) > 3) {
            BehaviorBase_1.default.GoToPosition(creep, creep.room.controller, { costMatrixType: CostMatrixType_1.CostMatrixType.FullSpeed, range: 3 });
        }
        else {
            creep.upgradeController(creep.room.controller);
        }
        return true;
    };
    RoomLocker.prototype._lockObject = function (creep, object) {
        if (creep.pos.isNearTo(object.pos)) {
            BehaviorBase_1.default.Flee(creep, object, 2);
        }
        var terrain = Game.map.getRoomTerrain(creep.room.name);
        var toLock = object.pos.around(1, { filter: function (p) { return !(TERRAIN_MASK_WALL & terrain.get(p.x, p.y)) &&
                !_.some(p.lookFor(LOOK_STRUCTURES), function (r) { return _.includes(OBSTACLE_OBJECT_TYPES, r.structureType); }); } });
        var currentLock = _.first(toLock);
        if (!currentLock) {
            return false;
        }
        var constructionSite = _.first(currentLock.lookFor(LOOK_CONSTRUCTION_SITES));
        if (!constructionSite) {
            currentLock.createConstructionSite(STRUCTURE_WALL);
            return true;
        }
        else {
            if (constructionSite.structureType != STRUCTURE_WALL) {
                constructionSite.remove();
                return true;
            }
        }
        if (creep.pos.getRangeTo(currentLock) > 3) {
            BehaviorBase_1.default.GoToPosition(creep, currentLock, { costMatrixType: CostMatrixType_1.CostMatrixType.FullSpeed, range: 3 });
            return true;
        }
        creep.build(constructionSite);
        return true;
    };
    RoomLocker.prototype._unclaim = function (creep) {
        if (!creep.room.controller.my) {
            return false;
        }
        creep.room.controller.unclaim();
        creep.suicide();
        return true;
    };
    RoomLocker.prototype._lock = function (creep) {
        var result = this._claim(creep) ||
            this._upgrade(creep) ||
            this._lockObject(creep, creep.room.controller);
        for (var _i = 0, _a = creep.room.find(FIND_SOURCES); _i < _a.length; _i++) {
            var source = _a[_i];
            result = result || this._lockObject(creep, source);
        }
        result || this._unclaim(creep);
        return true;
    };
    RoomLocker.prototype._getMyInitialPosition = function (creep) {
        var assignString = Spawn_1.getAssignmentByName(creep.name);
        if (!_.isUndefined(Game.flags[assignString])) {
            return Game.flags[assignString].pos;
        }
        var roomData = RoomProvider_1.default.GetRoomData(assignString);
        if (roomData != null) {
            return roomData.ControllerPosition;
        }
        if (!_.isUndefined(Game.rooms[assignString])) {
            return Game.rooms[assignString].controller.pos;
        }
        return new RoomPosition(25, 25, assignString);
    };
    return RoomLocker;
}(Role_Base_1.RoleBase));
exports.RoomLocker = RoomLocker;


/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Role_Base_1 = __webpack_require__(4);
var CostMatrixType_1 = __webpack_require__(0);
var BehaviorBase_1 = __webpack_require__(2);
var Signer = (function (_super) {
    __extends(Signer, _super);
    function Signer() {
        var _this = _super.call(this) || this;
        _this.name = 'signer';
        _this[1] = function (c) { return _this._travelToAssignment(c, CostMatrixType_1.CostMatrixType.Offroad); };
        _this[2] = _this._removeSign;
        _this[3] = _this._idle;
        return _this;
    }
    Signer.prototype._getMyInitialPosition = function (creep) {
        var flag = this._getMyFlag(creep);
        if (flag == null) {
            creep.say('?');
            return null;
        }
        return flag.pos;
    };
    Signer.prototype._removeSign = function (creep) {
        if (!creep.pos.isNearTo(creep.room.controller)) {
            BehaviorBase_1.default.GoToPosition(creep, creep.room.controller, { costMatrixType: CostMatrixType_1.CostMatrixType.Offroad, range: 1 });
            return true;
        }
        creep.signController(creep.room.controller, '');
        creep.suicide();
        return true;
    };
    return Signer;
}(Role_Base_1.RoleBase));
exports.default = Signer;


/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var CostMatrixType_1 = __webpack_require__(0);
var Role_Base_1 = __webpack_require__(4);
var TickCache_1 = __webpack_require__(1);
var BehaviorBase_1 = __webpack_require__(2);
var StationaryHarras = (function (_super) {
    __extends(StationaryHarras, _super);
    function StationaryHarras() {
        var _this = _super.call(this) || this;
        _this.name = 'stationaryHarras';
        _this[1] = _this._takeEnergy;
        _this[2] = _this._travelToDestinationRoom;
        _this[3] = _this._work;
        _this[4] = _this._upgrade;
        return _this;
    }
    StationaryHarras.prototype._takeEnergy = function (creep) {
        if (creep.carry[RESOURCE_ENERGY] == creep.carryCapacity) {
            this._nextState(creep);
            return false;
        }
        if (creep.pos.isNearTo(creep.room.storage)) {
            creep.withdraw(creep.room.storage, RESOURCE_ENERGY);
            this._nextState(creep);
            return false;
        }
        BehaviorBase_1.default.GoToPosition(creep, creep.room.storage.pos, { costMatrixType: CostMatrixType_1.CostMatrixType.FullSpeed, range: 1 });
        return true;
    };
    StationaryHarras.prototype._getMyInitialPosition = function (creep) {
        var flag = this._getMyFlag(creep);
        if (flag == null) {
            creep.say('?');
            return null;
        }
        return flag.pos;
    };
    StationaryHarras.prototype._work = function (creep) {
        if (!_.isUndefined(creep.room.controller) && creep.room.controller.my) {
            if ((creep.room.controller.level == 1) && (creep.carry[RESOURCE_ENERGY] > 0)) {
                this._setState(creep, 4);
                return false;
            }
            if (_.isUndefined(creep.room.controller.safeMode)) {
                creep.room.controller.activateSafeMode();
            }
        }
        if (creep.carry[RESOURCE_ENERGY] == 0) {
            var source = this._getMySource(creep);
            if ((source != null) && (source.energy > 0)) {
                if (!creep.pos.isNearTo(source)) {
                    BehaviorBase_1.default.GoToPosition(creep, source, { costMatrixType: CostMatrixType_1.CostMatrixType.FullSpeed, range: 1 });
                    return true;
                }
                creep.harvest(source);
                return true;
            }
            else {
                return this._idle(creep);
            }
        }
        if ((creep.pos.getRangeTo(creep.room.controller) <= 3) && (creep.room.controller.ticksToDowngrade < 5000)) {
            creep.upgradeController(creep.room.controller);
            return true;
        }
        var sites = [];
        if (!_.some(this._getMyTowers(creep))) {
            sites = TickCache_1.__findInRange(creep.pos, FIND_CONSTRUCTION_SITES, 3, {
                filter: function (cs) { return cs.my; }
            });
            if (_.some(sites)) {
                creep.build(_.first(sites));
                delete creep.memory['rampartsIds'];
                delete creep.memory['towersIds'];
                return true;
            }
        }
        if (this._chargeTowers(creep)) {
            return true;
        }
        var ramparts = this._getRamparts(creep);
        if (_.some(ramparts)) {
            var weakest = _.first(ramparts.sort(function (a, b) { return a.hits - b.hits; }));
            if ((weakest != null) && (weakest.hits < weakest.hitsMax)) {
                creep.repair(weakest);
                return true;
            }
        }
        if (!_.some(ramparts) && !_.some(sites)) {
            var positions = this._getMySource(creep).pos.around(1);
            for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {
                var p = positions_1[_i];
                creep.room.createConstructionSite(p, STRUCTURE_RAMPART);
            }
            return true;
        }
        if (creep.pos.getRangeTo(creep.room.controller) <= 3) {
            creep.upgradeController(creep.room.controller);
            return true;
        }
        return this._idle(creep);
    };
    StationaryHarras.prototype._upgrade = function (creep) {
        if (creep.carry[RESOURCE_ENERGY] == 0) {
            this._setState(creep, 2);
            return false;
        }
        if (creep.pos.getRangeTo(creep.room.controller) > 3) {
            BehaviorBase_1.default.GoToPosition(creep, creep.room.controller.pos, { costMatrixType: CostMatrixType_1.CostMatrixType.FullSpeed, range: 3 });
            return true;
        }
        creep.upgradeController(creep.room.controller);
        return true;
    };
    StationaryHarras.prototype._chargeTowers = function (creep) {
        var towers = this._getMyTowers(creep);
        if (_.some(towers)) {
            var towerToCharge = _.first(towers.sort(function (a, b) { return a.energy - b.energy; }));
            if (towerToCharge != null) {
                if (towerToCharge.energy > 900) {
                    return false;
                }
                creep.transfer(towerToCharge, RESOURCE_ENERGY);
                return true;
            }
        }
        return false;
    };
    StationaryHarras.prototype._getMyTowers = function (creep) {
        return this._getCachedObjects(creep, 'towersIds', function (creep) { return TickCache_1.__findInRange(creep.pos, FIND_MY_STRUCTURES, 1, {
            filter: function (s) { return (s.structureType == STRUCTURE_TOWER); }
        }); }, true);
    };
    StationaryHarras.prototype._getMySource = function (creep) {
        if (!_.isUndefined(creep.memory['mySourceId'])) {
            return Game.getObjectById(creep.memory['mySourceId']);
        }
        var source = creep.pos.findClosestByRange(FIND_SOURCES);
        if (source != null) {
            creep.memory['mySourceId'] = source.id;
        }
        return source;
    };
    StationaryHarras.prototype._getRamparts = function (creep) {
        return this._getCachedObjects(creep, 'rampartsIds', function (creep) { return TickCache_1.__findInRange(creep.pos, FIND_MY_STRUCTURES, 3, {
            filter: function (s) { return (s.structureType == STRUCTURE_RAMPART); }
        }); }, true);
    };
    return StationaryHarras;
}(Role_Base_1.RoleBase));
exports.default = StationaryHarras;


/***/ }),
/* 221 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Role_Base_1 = __webpack_require__(4);
var Spawn_1 = __webpack_require__(3);
var TickCache_1 = __webpack_require__(1);
var BehaviorBase_1 = __webpack_require__(2);
var CostMatrixType_1 = __webpack_require__(0);
var Waster = (function (_super) {
    __extends(Waster, _super);
    function Waster() {
        var _this = _super.call(this) || this;
        _this.name = 'wasterwaster';
        _this[1] = _this._moveToInitialPosition;
        _this[2] = _this._work;
        _this[3] = _this._bulldoze;
        return _this;
    }
    Waster.prototype._getMyInitialPosition = function (creep) {
        var assign = Spawn_1.getAssignmentByName(creep.name);
        if (!_.isUndefined(Game.flags[assign])) {
            return Game.flags[assign].pos;
        }
        return RoomPosition.unpack(parseInt(assign));
    };
    Waster.prototype._work = function (creep) {
        if (_.sum(creep.carry) > 0) {
            var resourceToDrop = _.last(_.keys(creep.carry));
            this.onDropped(creep, resourceToDrop, creep.carry[resourceToDrop]);
            creep.drop(resourceToDrop);
            return true;
        }
        var toBulldoze = this._findConstructionSite(creep);
        if (toBulldoze != null) {
            creep.memory['bulldozePos'] = toBulldoze.pos.pack();
            this._nextState(creep);
            return false;
        }
        var terminal = this._getCachedObject(creep, 'terminalId', this._findMyTerminal);
        if (terminal != null) {
            var assign = Spawn_1.getAssignmentByName(creep.name);
            var f = Game.flags[assign];
            var toTake = f && f.memory['resource'] || _.last(_.keys(terminal.store));
            if (toTake == RESOURCE_ENERGY && !!f && f.color != COLOR_RED) {
                return true;
            }
            if (terminal.store[toTake] > 0) {
                creep.withdraw(terminal, toTake);
                return true;
            }
        }
        return this._idle(creep);
    };
    Waster.prototype.onDropped = function (creep, res, amount) {
        if (_.isUndefined(creep.room.memory)) {
            creep.room.memory = {};
        }
        if (_.isUndefined(creep.room.memory['wasted'])) {
            creep.room.memory['wasted'] = {};
        }
        var alreadyWasted = (creep.room.memory['wasted'][res] || 0);
        creep.room.memory['wasted'][res] = amount + alreadyWasted;
        var reportRes = res == RESOURCE_ENERGY ? 'E' : res;
        creep.say(reportRes + ": " + (amount + alreadyWasted) / 1000 + "k", true);
    };
    Waster.prototype._bulldoze = function (creep) {
        if (!_.isUndefined(creep.memory['bulldozePos'])) {
            var pos = RoomPosition.unpack(creep.memory['bulldozePos']);
            if (creep.pos.isEqualTo(pos)) {
                delete creep.memory['bulldozePos'];
                creep.say('ouch', true);
                this._setState(creep, 1);
                return false;
            }
            BehaviorBase_1.default.GoToPosition(creep, pos, { costMatrixType: CostMatrixType_1.CostMatrixType.FullSpeed });
            return true;
        }
        var toBulldoze = this._findConstructionSite(creep);
        if (toBulldoze == null) {
            this._setState(creep, 1);
            return false;
        }
        creep.memory['bulldozePos'] = toBulldoze.pos.pack();
        BehaviorBase_1.default.GoToPosition(creep, toBulldoze.pos, { costMatrixType: CostMatrixType_1.CostMatrixType.FullSpeed });
        return true;
    };
    Waster.prototype._findMyTerminal = function (creep) {
        return _.first(TickCache_1.__findInRange(creep.pos, FIND_STRUCTURES, 1, {
            filter: function (s) { return s.structureType == STRUCTURE_TERMINAL || s.structureType == STRUCTURE_STORAGE; }
        }));
    };
    Waster.prototype._findConstructionSite = function (creep) {
        return _.first(TickCache_1.__find(creep.room, FIND_CONSTRUCTION_SITES, { filter: function (cs) { return cs.progress >= (cs.progressTotal / 2); } }));
    };
    return Waster;
}(Role_Base_1.RoleBase));
exports.default = Waster;


/***/ }),
/* 222 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Role_Base_1 = __webpack_require__(4);
var Spawn_1 = __webpack_require__(3);
var BehaviorBase_1 = __webpack_require__(2);
var CostMatrixType_1 = __webpack_require__(0);
var Deliverer = (function (_super) {
    __extends(Deliverer, _super);
    function Deliverer() {
        var _this = _super.call(this) || this;
        _this.name = "deliverer";
        _this._myInitialPositionRange = 0;
        _this[1] = _this._take;
        _this[2] = _this._deliver;
        _this[3] = _this._recycle;
        return _this;
    }
    Deliverer.prototype._getMyInitialPosition = function (creep) {
        return Role_Base_1.RoleBase._getMyAssignmentPosition(creep);
    };
    Deliverer.prototype._take = function (creep) {
        var assign = Spawn_1.getAssignmentByName(creep.name);
        if (Game.rooms[assign]) {
            this._setState(creep, 3);
            return false;
        }
        var process = this._process;
        var harvestPos = process.HarvestPosition;
        if (harvestPos == null) {
            creep.say('h?');
            return true;
        }
        var container = process.Container;
        if (container == null) {
            creep.say('c?');
            return true;
        }
        var carriers = process._getCurrentCreeps();
        var carriersNear = _.filter(carriers, function (c) { return c.pos.isNearTo(container); });
        var wantRange = 1 + _.size(carriersNear);
        if (creep.pos.getRangeTo(harvestPos) > wantRange) {
            BehaviorBase_1.default.GoToPosition(creep, harvestPos, { costMatrixType: CostMatrixType_1.CostMatrixType.HalfSpeed, range: wantRange });
            return true;
        }
        if (creep.pos.getRangeTo(harvestPos) > 2) {
            return this._idle(creep);
        }
        var myCapacity = creep.carryCapacity - _.sum(creep.carry);
        if (myCapacity == 0) {
            this._nextState(creep);
            return false;
        }
        var containerContents = _.sum(container.store);
        if (containerContents >= myCapacity) {
            creep.withdraw(container, _.last(_.keys(container.store)));
            return true;
        }
        if (creep.ticksToLive < (10 + process.RouteLength)) {
            creep.withdraw(container, _.last(_.keys(container.store)));
            if (_.size(container.store) <= 1) {
                this._nextState(creep);
                return false;
            }
            return true;
        }
        return this._idle(creep);
    };
    Deliverer.prototype._deliver = function (creep) {
        var process = this._process;
        var struct = process.UnloadStructure;
        if (!struct) {
            creep.say('u?');
            return true;
        }
        if (!creep.pos.isNearTo(struct)) {
            BehaviorBase_1.default.GoToPosition(creep, struct, { costMatrixType: CostMatrixType_1.CostMatrixType.HalfSpeed, range: 1 });
            return true;
        }
        if (_.sum(creep.carry) > 0) {
            creep.transfer(struct, _.last(_.keys(creep.carry)));
            if (_.size(creep.carry) > 1) {
                return true;
            }
        }
        if ((2 * process.RouteLength + 10) > creep.ticksToLive) {
            if (creep.ticksToLive <= 10) {
                creep.suicide();
                return true;
            }
            this._nextState(creep);
        }
        else {
            this._prevState(creep);
        }
        return false;
    };
    return Deliverer;
}(Role_Base_1.RoleBase));
exports.default = Deliverer;


/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Role_Base_1 = __webpack_require__(4);
var BehaviorBase_1 = __webpack_require__(2);
var CostMatrixType_1 = __webpack_require__(0);
var RoadStatus_1 = __webpack_require__(28);
var Harvester = (function (_super) {
    __extends(Harvester, _super);
    function Harvester() {
        var _this = _super.call(this) || this;
        _this.name = "harvester";
        _this._myInitialPositionRange = 0;
        _this[1] = _this._charge;
        _this[2] = _this._go;
        _this[3] = _this._work;
        return _this;
    }
    Harvester.prototype._getMyInitialPosition = function (creep) {
        return Role_Base_1.RoleBase._getMyAssignmentPosition(creep);
    };
    Harvester.prototype._charge = function (creep) {
        var room = this._getHomeRoom(creep);
        if (!room) {
            this._nextState(creep);
            return false;
        }
        if (creep.carry[RESOURCE_ENERGY] > 0) {
            this._nextState(creep);
            return false;
        }
        var struct = room.terminal || room.storage;
        if (creep.pos.isNearTo(struct)) {
            creep.withdraw(struct, RESOURCE_ENERGY);
            this._nextState(creep);
            return false;
        }
        BehaviorBase_1.default.GoToPosition(creep, struct, { costMatrixType: CostMatrixType_1.CostMatrixType.HalfSpeed, range: 1 });
        return true;
    };
    Harvester.prototype._go = function (creep) {
        var process = this._process;
        var targetPos = process.HarvestPosition;
        if (targetPos == null) {
            creep.say('?');
            return true;
        }
        if (creep.pos.isEqualTo(targetPos)) {
            if (!_.isUndefined(creep.memory['roadStatus'])) {
                process.RemoteRoomProcess.SetRoadStatus(creep.memory['roadStatus']);
            }
            this._setTravelTime(creep);
            this._nextState(creep);
            return false;
        }
        var routes = _.map(process.RemoteRoomProcess.routes, function (r) { return r.substr(2); });
        var positions = RoomPosition.unpackPath(routes.join(''));
        var costs = {};
        _.forEach(positions, function (p) { costs[p.pack()] = 1; });
        BehaviorBase_1.default.GoToPosition(creep, targetPos, { costMatrixType: CostMatrixType_1.CostMatrixType.HalfSpeed, range: 0, addCosts: costs });
        if (creep.room.controller && creep.room.controller.my) {
            return true;
        }
        if (creep.pos.isEdge()) {
            return true;
        }
        var myPos = creep.pos.spack();
        var routePositions = process.RemoteRoomProcess.routes.join();
        if (routePositions.indexOf(myPos) >= 0) {
            var roadHere = _.first(creep.pos.findInRange(FIND_STRUCTURES, 0, { filter: { structureType: STRUCTURE_ROAD } }));
            if (roadHere == null) {
                creep.say('r?');
                creep.memory['roadStatus'] = RoadStatus_1.RoadStatus.Broken;
                return true;
            }
            var repairPower = creep.getActiveBodyparts(WORK) * REPAIR_POWER;
            if ((roadHere.hitsMax - roadHere.hits) >= repairPower) {
                if (creep.carry[RESOURCE_ENERGY] >= creep.getActiveBodyparts(WORK)) {
                    creep.repair(roadHere);
                    creep.cancelOrder('move');
                    return true;
                }
                creep.say('f!');
                creep.memory['roadStatus'] = RoadStatus_1.RoadStatus.WornOut;
            }
        }
        return true;
    };
    Harvester.prototype._work = function (creep) {
        var process = this._process;
        var targetPos = process.HarvestPosition;
        if (targetPos != null && !creep.pos.isEqualTo(targetPos)) {
            BehaviorBase_1.default.GoToPosition(creep, targetPos, { costMatrixType: CostMatrixType_1.CostMatrixType.HalfSpeed, range: 0 });
            return true;
        }
        var container = process.Container;
        if (container == null) {
            creep.say('c?');
            return true;
        }
        var source = process.Source;
        if (source == null) {
            creep.say('s?');
            return true;
        }
        if (container.hits < container.hitsMax) {
            if (creep.carry[RESOURCE_ENERGY] > 0) {
                creep.repair(container);
            }
            if (container.store[RESOURCE_ENERGY] > 0) {
                creep.withdraw(container, RESOURCE_ENERGY);
            }
            else {
                creep.harvest(source);
            }
            return true;
        }
        var myHarvestPower = HARVEST_POWER * creep.getActiveBodyparts(WORK);
        if ((source.energy > 0) && (_.sum(container.store) + myHarvestPower <= container.storeCapacity)) {
            creep.harvest(source);
            return true;
        }
        return this._idle(creep);
    };
    return Harvester;
}(Role_Base_1.RoleBase));
exports.default = Harvester;


/***/ }),
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var InfrastructureWorker_1 = __webpack_require__(65);
var WeakerInfrastructureWorker = (function (_super) {
    __extends(WeakerInfrastructureWorker, _super);
    function WeakerInfrastructureWorker() {
        var _this = _super.call(this) || this;
        _this._myInitialPositionRange = 1;
        _this[1] = _this._charge;
        _this[2] = _this._work;
        _this[3] = _this._travelHome;
        _this[4] = _this._recycle;
        return _this;
    }
    WeakerInfrastructureWorker.prototype._repairBoostMultiplier = function () {
        return 1;
    };
    return WeakerInfrastructureWorker;
}(InfrastructureWorker_1.default));
exports.default = WeakerInfrastructureWorker;


/***/ }),
/* 225 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Role_Base_1 = __webpack_require__(4);
var CostMatrixType_1 = __webpack_require__(0);
var RoleScout = (function (_super) {
    __extends(RoleScout, _super);
    function RoleScout() {
        var _this = _super.call(this) || this;
        _this.name = 'scout';
        _this[1] = function (c) { return _this._travelToAssignment(c, CostMatrixType_1.CostMatrixType.Offroad); };
        _this[2] = _this._arrived;
        _this[3] = _this._testStrongholdDeploy;
        return _this;
    }
    RoleScout.prototype._getMyInitialPosition = function (creep) {
        return Role_Base_1.RoleBase._getMyAssignmentPosition(creep);
    };
    RoleScout.prototype._arrived = function (creep) {
        this._setTravelTime(creep);
        this._nextState(creep);
        return false;
    };
    RoleScout.prototype._testStrongholdDeploy = function (creep) {
        var strongholdRampart = _.first(creep.pos.findInRange(FIND_STRUCTURES, 1, { filter: { structureType: 'rampart', isPublic: true } }));
        if (strongholdRampart) {
            if (strongholdRampart.ticksToDecay == 1) {
                creep.move(creep.pos.getDirectionTo(strongholdRampart.pos));
                creep.say('move');
            }
            else {
                creep.say('wait');
            }
            return true;
        }
        else {
            creep.say('-');
            return true;
        }
    };
    return RoleScout;
}(Role_Base_1.RoleBase));
exports.RoleScout = RoleScout;


/***/ }),
/* 226 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var SuicideTransport_1 = __webpack_require__(67);
var GreaterSuicideTransport = (function (_super) {
    __extends(GreaterSuicideTransport, _super);
    function GreaterSuicideTransport() {
        var _this = _super.call(this) || this;
        _this.name = 'greaterSuicideTransport';
        _this[1] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_ZYNTHIUM_ALKALIDE); };
        _this[2] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_KEANIUM_ACID); };
        _this[3] = _this._charge;
        _this[4] = _this._travelToDestination;
        _this[5] = _this._unload;
        _this[6] = _this._recycle;
        _this[255] = _this._recycle;
        return _this;
    }
    return GreaterSuicideTransport;
}(SuicideTransport_1.default));
exports.default = GreaterSuicideTransport;


/***/ }),
/* 227 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Role_Base_1 = __webpack_require__(4);
var Spawn_1 = __webpack_require__(3);
var BehaviorBase_1 = __webpack_require__(2);
var CostMatrixType_1 = __webpack_require__(0);
var SuicideHealer = (function (_super) {
    __extends(SuicideHealer, _super);
    function SuicideHealer() {
        var _this = _super.call(this) || this;
        _this.name = 'suicideHealer';
        _this[1] = _this._travelToDestination;
        _this[2] = _this._recycle;
        return _this;
    }
    SuicideHealer.prototype._getMyInitialPosition = function (creep) {
        var assignString = Spawn_1.getAssignmentByName(creep.name);
        if (!_.isUndefined(Game.flags[assignString])) {
            return Game.flags[assignString].pos;
        }
        if (!_.isUndefined(Game.rooms[assignString])) {
            return Game.rooms[assignString].controller.pos;
        }
        return RoomPosition.unpack(parseInt(assignString));
    };
    SuicideHealer.prototype._travelToDestination = function (creep) {
        if (creep.hits < creep.hitsMax) {
            creep.heal(creep);
        }
        var flag = this._getMyFlag(creep);
        if (flag.memory['destination'] && Game.flags[flag.memory['destination']]) {
            flag = Game.flags[flag.memory['destination']];
        }
        if (creep.pos.isNearTo(flag)) {
            this._setTravelTime(creep);
            this._nextState(creep);
            return false;
        }
        return this._travelToFlag(creep, flag);
    };
    SuicideHealer.prototype._travelToFlag = function (creep, flag, rng) {
        if (creep.fatigue > 0) {
            return true;
        }
        var currentCheckpoint = this._getCurrentCheckpoint(creep, flag);
        if (currentCheckpoint == null) {
            return false;
        }
        var range = creep.pos.getRangeTo(currentCheckpoint);
        if (range == 1) {
            creep.move(creep.pos.getDirectionTo(currentCheckpoint));
            if (currentCheckpoint.pos.isEqualTo(Role_Base_1.RoleBase._getMyAssignmentPosition(creep))) {
                this._setTravelTime(creep);
            }
            return true;
        }
        BehaviorBase_1.default.GoToPosition(creep, currentCheckpoint.pos, { costMatrixType: CostMatrixType_1.CostMatrixType.FullSpeed, range: rng });
        return true;
    };
    return SuicideHealer;
}(Role_Base_1.RoleBase));
exports.default = SuicideHealer;


/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var BehaviorBase_1 = __webpack_require__(2);
var Traveler_1 = __webpack_require__(16);
var Rooms_1 = __webpack_require__(14);
var TickCache_1 = __webpack_require__(1);
var CostMatrixType_1 = __webpack_require__(0);
var Role_Base_1 = __webpack_require__(4);
var TestRole = (function (_super) {
    __extends(TestRole, _super);
    function TestRole() {
        var _this = _super.call(this) || this;
        _this.name = 'test';
        _this._findEnergySource = function (c) { return c.pos.findClosestByPath(FIND_STRUCTURES, {
            filter: function (s) { return (_.includes([STRUCTURE_LINK, STRUCTURE_SPAWN, STRUCTURE_LAB], s.structureType) && s.energy > 0) ||
                (_.includes([STRUCTURE_CONTAINER, STRUCTURE_STORAGE, STRUCTURE_TERMINAL], s.structureType) && s.store.energy > 0); }
        }); };
        _this[1] = _this._charge;
        _this[2] = _this._travelToPosition;
        return _this;
    }
    TestRole.prototype._getMyInitialPosition = function (creep) {
        return Role_Base_1.RoleBase._getMyAssignmentPosition(creep);
    };
    TestRole.prototype._charge = function (creep) {
        if (creep.carry.energy == creep.carryCapacity) {
            this._nextState(creep);
            return false;
        }
        var source = this._getCachedObject(creep, 'energyStorageId', this._findEnergySource);
        if (creep.withdraw(source, RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {
            BehaviorBase_1.default.GoToPosition(creep, source, { costMatrixType: CostMatrixType_1.CostMatrixType.FullSpeed, range: 1 });
        }
        else {
            delete creep.memory['energyStorageId'];
        }
        return true;
    };
    TestRole.prototype._travelToPosition = function (creep) {
        var destination = this._getMyFlag(creep);
        if (creep.pos.isEqualTo(destination.pos)) {
            return this._idle(creep);
        }
        return this._shieldedTravel(creep, destination.pos) || true;
    };
    TestRole.prototype._shieldedTravel = function (creep, pos) {
        var data = {};
        Traveler_1.Traveler.travelTo(creep, pos, {
            returnData: data
        });
        if (data.nextPos != null) {
            var csite = _.first(TickCache_1.__findInRange(data.nextPos, FIND_CONSTRUCTION_SITES, 0));
            _.forEach(data.nextPos.around(1), function (p) {
                if (creep.room.createConstructionSite(p, STRUCTURE_RAMPART) == OK) {
                    Rooms_1.ignoreConstructionSite(p);
                }
            });
            if ((csite == null) && !_.some(TickCache_1.__findInRange(data.nextPos, FIND_STRUCTURES, 0, {
                filter: function (s) { return (s.structureType == STRUCTURE_RAMPART) && (s.hits > 1); }
            }))) {
                creep.cancelOrder('move');
                return false;
            }
            else {
                Rooms_1.unignoreConstructionSite(csite.pos);
                creep.build(csite);
            }
            var oldSites = TickCache_1.__findInRange(creep.pos, FIND_CONSTRUCTION_SITES, 1, {
                filter: function (cs) { return cs.pos.getRangeTo(data.nextPos) > 1; }
            });
            _.forEach(oldSites, function (cs) {
                Rooms_1.unignoreConstructionSite(cs.pos);
                cs.remove();
            });
        }
        return true;
    };
    return TestRole;
}(Role_Base_1.RoleBase));
exports.TestRole = TestRole;


/***/ }),
/* 229 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Looter_1 = __webpack_require__(69);
var BoostedLooter = (function (_super) {
    __extends(BoostedLooter, _super);
    function BoostedLooter() {
        var _this = _super.call(this) || this;
        _this[1] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_ZYNTHIUM_ALKALIDE); };
        _this[2] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_KEANIUM_ACID); };
        _this[3] = _this._there;
        _this[4] = _this._loot;
        _this[5] = _this._here;
        _this[6] = _this._unload;
        _this[7] = _this._recycle;
        return _this;
    }
    BoostedLooter.prototype._unload = function (creep) {
        var structure = creep.pos.isNearTo(creep.room.storage) ? creep.room.storage : creep.room.terminal;
        if (_.sum(creep.carry) == 0) {
            if (_.isUndefined(creep.memory['returnIn'])) {
                creep.memory['returnIn'] = CREEP_LIFE_TIME - creep.ticksToLive;
            }
            if (creep.ticksToLive < (10 + creep.memory['returnIn'])) {
                this._setState(creep, 7);
            }
            else {
                delete creep.memory['checkPoints'];
                this._setState(creep, 3);
            }
            return false;
        }
        creep.transfer(structure, _.last(_.keys(creep.carry)));
        return true;
    };
    return BoostedLooter;
}(Looter_1.RoleLooter));
exports.default = BoostedLooter;


/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var TickCache_1 = __webpack_require__(1);
var StationaryUpgrader_1 = __webpack_require__(41);
var Reupgrader = (function (_super) {
    __extends(Reupgrader, _super);
    function Reupgrader() {
        var _this = _super.call(this) || this;
        _this._findMyLab = function (creep) { return _.first(TickCache_1.__findInRange(creep.pos, FIND_MY_STRUCTURES, 1, {
            filter: function (s) { return s.structureType == STRUCTURE_LAB; }
        })); };
        _this._findTower = function (creep) { return _.first(TickCache_1.__findInRange(creep.pos, FIND_MY_STRUCTURES, 1, {
            filter: function (s) { return s.structureType == STRUCTURE_TOWER; }
        })); };
        _this._findMySpawn = function (creep) { return _.first(TickCache_1.__findInRange(creep.pos, FIND_MY_SPAWNS, 1)); };
        _this[1] = _this._moveToInitialPosition;
        _this[2] = _this._renew;
        _this[3] = _this._work;
        return _this;
    }
    Reupgrader.prototype._work = function (creep) {
        if ((creep.ticksToLive <= 5) && (creep.room.controller.level < 6)) {
            this._setState(creep, 2);
            return false;
        }
        var container = this._getCachedObject(creep, 'myContainerId', this._findMyContainer);
        if (creep.carry[RESOURCE_ENERGY] > 0) {
            creep.upgradeController(creep.room.controller);
        }
        if (creep.carry[RESOURCE_ENERGY] < creep.carryCapacity) {
            creep.withdraw(container, RESOURCE_ENERGY);
        }
        var myLab = this._getCachedObject(creep, 'myLabId', this._findMyLab);
        if ((myLab != null) && (myLab.energy < myLab.energyCapacity)) {
            creep.transfer(myLab, RESOURCE_ENERGY, (creep.carryCapacity - 2 * creep.getActiveBodyparts(WORK)));
        }
        else {
            var tower = this._getCachedObject(creep, 'towerId', this._findTower);
            if ((tower != null) && (tower.energy < tower.energyCapacity)) {
                creep.transfer(tower, RESOURCE_ENERGY, (creep.carryCapacity - 2 * creep.getActiveBodyparts(WORK)));
            }
        }
        return true;
    };
    Reupgrader.prototype._renew = function (creep) {
        var myFlag = this._getMyFlag(creep);
        if (!_.isUndefined(myFlag) && (myFlag.secondaryColor != COLOR_GREY)) {
            myFlag.setColor(myFlag.color, COLOR_GREY);
        }
        var mySpawn = this._getCachedObject(creep, 'mySpawnId', this._findMySpawn);
        if (mySpawn == null) {
            this._nextState(creep);
            return false;
        }
        var myLab = this._getCachedObject(creep, 'myLabId', this._findMyLab);
        var container = this._getCachedObject(creep, 'myContainerId', this._findMyContainer);
        if (!_.isUndefined(creep.carry['XGH2O']) && (creep.carry['XGH2O'] > 0)) {
            if ((myLab != null) && (myLab.mineralAmount < myLab.mineralCapacity)) {
                creep.transfer(myLab, 'XGH2O');
            }
            else {
                creep.transfer(container, 'XGH2O');
            }
            mySpawn.renewCreep(creep);
            return true;
        }
        if (creep.carry.energy > 0) {
            creep.transfer(mySpawn, RESOURCE_ENERGY);
            mySpawn.renewCreep(creep);
            return true;
        }
        if (_.isUndefined(container.store['XGH2O']) ||
            (myLab == null) ||
            (myLab.mineralAmount == myLab.mineralCapacity) ||
            (container.store['XGH2O'] == 0) ||
            (mySpawn.energy < 200)) {
            creep.withdraw(container, RESOURCE_ENERGY);
        }
        else {
            creep.withdraw(container, 'XGH2O');
        }
        mySpawn.renewCreep(creep);
        if (creep.ticksToLive >= 1490) {
            if (myLab != null) {
                myLab.boostCreep(creep);
            }
            this._nextState(creep);
            return false;
        }
        return true;
    };
    Reupgrader.prototype._findMyContainer = function (creep) {
        return _.first(TickCache_1.__findInRange(creep.pos, FIND_STRUCTURES, 1, {
            filter: function (s) { return s.structureType == STRUCTURE_STORAGE; }
        }));
    };
    return Reupgrader;
}(StationaryUpgrader_1.StationaryUpgrader));
exports.Reupgrader = Reupgrader;


/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var CostMatrixType_1 = __webpack_require__(0);
var Role_Base_1 = __webpack_require__(4);
var Spawn_1 = __webpack_require__(3);
var StationaryUpgrader_1 = __webpack_require__(41);
var BehaviorBase_1 = __webpack_require__(2);
var TickCache_1 = __webpack_require__(1);
var UpgradingCanister = (function (_super) {
    __extends(UpgradingCanister, _super);
    function UpgradingCanister() {
        var _this = _super.call(this) || this;
        _this.name = 'upgradingCanister';
        _this[1] = _this._moveToInitialPosition;
        _this[2] = _this._work;
        _this[255] = _this._recycle;
        return _this;
    }
    UpgradingCanister.prototype._getMyInitialPosition = function (creep) {
        var flag = StationaryUpgrader_1.StationaryUpgrader._assignedTo(creep);
        var pos = (flag == null) ?
            RoomPosition.unpack(parseInt(Spawn_1.getAssignmentByName(creep.name))) :
            flag.pos;
        return pos;
    };
    UpgradingCanister.prototype._work = function (creep) {
        var myPost = Role_Base_1.RoleBase._getMyAssignmentPosition(creep);
        if (!creep.pos.isEqualTo(myPost)) {
            BehaviorBase_1.default.GoToPosition(creep, myPost, { costMatrixType: CostMatrixType_1.CostMatrixType.HalfSpeed });
            return true;
        }
        var container = this._getCachedObject(creep, 'containerId', function () {
            return _.first(TickCache_1.__findInRange(myPost, FIND_STRUCTURES, 1, {
                filter: { structureType: STRUCTURE_CONTAINER }
            }));
        });
        if (container == null) {
            creep.say('?');
            return true;
        }
        if (creep.carryCapacity > (container.storeCapacity - _.sum(container.store))) {
            return this._idle(creep);
        }
        if (creep.carry[RESOURCE_ENERGY] == 0) {
            creep.withdraw(creep.room.terminal, RESOURCE_ENERGY);
        }
        else {
            creep.transfer(container, RESOURCE_ENERGY);
        }
        return true;
    };
    return UpgradingCanister;
}(Role_Base_1.RoleBase));
exports.default = UpgradingCanister;


/***/ }),
/* 232 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Role_Base_1 = __webpack_require__(4);
var CostMatrixType_1 = __webpack_require__(0);
var BackdoorBuilder = (function (_super) {
    __extends(BackdoorBuilder, _super);
    function BackdoorBuilder() {
        var _this = _super.call(this) || this;
        _this.name = 'backdoorBuilder';
        _this[1] = function (c) { return _this._travelToAssignment(c, CostMatrixType_1.CostMatrixType.FullSpeed); };
        _this[2] = _this._work;
        return _this;
    }
    BackdoorBuilder.prototype._getMyInitialPosition = function (creep) {
        return creep.pos;
    };
    BackdoorBuilder.prototype._work = function (creep) {
        var tunnel = this._process.GetCachedObject('tunnelId', function () { return _.first(creep.pos.findInRange(FIND_CONSTRUCTION_SITES, 3, { filter: { structureType: 'road' } })); });
        var fortifications = _.compact(this._process.GetCachedObjects('fortificationsIds', function () { return creep.pos.findInRange(FIND_STRUCTURES, 1, { filter: function (s) { return _.includes([STRUCTURE_WALL, STRUCTURE_RAMPART], s.structureType); } }); }));
        if (!tunnel || !_.some(fortifications)) {
            var myFlag = this._getMyFlag(creep);
            if ((myFlag != null) && (myFlag.secondaryColor != COLOR_GREY)) {
                myFlag.setColor(myFlag.color, COLOR_GREY);
                creep.suicide();
            }
            return this._idle(creep);
        }
        if (creep.carry.energy > 0) {
            creep.build(tunnel);
        }
        else {
            creep.dismantle(_.first(fortifications));
        }
        return true;
    };
    return BackdoorBuilder;
}(Role_Base_1.RoleBase));
exports.BackdoorBuilder = BackdoorBuilder;
var GreaterBackdoorBuilder = (function (_super) {
    __extends(GreaterBackdoorBuilder, _super);
    function GreaterBackdoorBuilder() {
        var _this = _super.call(this) || this;
        _this.name = 'greaterBackdoorBuilder';
        _this[1] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_ZYNTHIUM_ALKALIDE); };
        _this[2] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_LEMERGIUM_ACID); };
        _this[3] = function (c) { return _this._travelToAssignment(c, CostMatrixType_1.CostMatrixType.FullSpeed); };
        _this[4] = _this._work;
        return _this;
    }
    return GreaterBackdoorBuilder;
}(BackdoorBuilder));
exports.GreaterBackdoorBuilder = GreaterBackdoorBuilder;


/***/ }),
/* 233 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Nomad_1 = __webpack_require__(31);
var BoostedNomad = (function (_super) {
    __extends(BoostedNomad, _super);
    function BoostedNomad() {
        var _this = _super.call(this) || this;
        _this._myInitialPositionRange = 1;
        _this[1] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_ZYNTHIUM_ALKALIDE); };
        _this[2] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_LEMERGIUM_ACID); };
        _this[3] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_KEANIUM_ACID); };
        _this[4] = _this._charge;
        _this[5] = _this._travelToAssignment;
        _this[6] = _this._charge;
        _this[7] = _this._work;
        _this[8] = _this._chargeExtensions;
        return _this;
    }
    BoostedNomad.prototype._findTaskPosition = function (creep) {
        var struct = this._findChargeStructure(creep);
        if (struct != null) {
            creep.memory['extId'] = struct.id;
            this._setState(creep, 8);
            return struct.pos.pack();
        }
        return _super.prototype._findTaskPosition.call(this, creep);
    };
    BoostedNomad.prototype._work = function (creep) {
        if (!creep.carry.energy && creep.room.controller && !creep.room.controller.my) {
            var room = this._getHomeRoom(creep);
            if (room && room.storage) {
                delete creep.memory['taskPos'];
                delete creep.memory['taskObjectId'];
                delete creep.memory['workPosition'];
                creep.memory['energyStorageId'] = room.storage.id;
                this._setState(creep, 4);
                return false;
            }
        }
        return _super.prototype._work.call(this, creep);
    };
    return BoostedNomad;
}(Nomad_1.default));
exports.default = BoostedNomad;


/***/ }),
/* 234 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Worker_1 = __webpack_require__(42);
var BoostedWorker = (function (_super) {
    __extends(BoostedWorker, _super);
    function BoostedWorker() {
        var _this = _super.call(this) || this;
        _this._myInitialPositionRange = 1;
        _this[1] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_ZYNTHIUM_ALKALIDE); };
        _this[2] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_LEMERGIUM_ACID); };
        _this[3] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_KEANIUM_ACID); };
        _this[4] = _this._moveToInitialPosition;
        _this[5] = _this._charge;
        _this[6] = _this._work;
        return _this;
    }
    return BoostedWorker;
}(Worker_1.Worker));
exports.BoostedWorker = BoostedWorker;


/***/ }),
/* 235 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var TickCache_1 = __webpack_require__(1);
var BaseWorker_1 = __webpack_require__(71);
var DefenseRaiser = (function (_super) {
    __extends(DefenseRaiser, _super);
    function DefenseRaiser() {
        var _this = _super.call(this) || this;
        _this.name = 'defenseRaiser';
        _this._findMyLinks = function (creep) { return TickCache_1.__findInRange(creep.pos, FIND_STRUCTURES, 1, {
            filter: function (s) { return s.structureType == STRUCTURE_LINK; }
        }); };
        _this._myInitialPositionRange = 0;
        _this[1] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_ZYNTHIUM_ALKALIDE); };
        _this[2] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_LEMERGIUM_ACID); };
        _this[3] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_KEANIUM_ACID); };
        _this[4] = _this._moveToInitialPosition;
        _this[5] = _this._work;
        return _this;
    }
    DefenseRaiser.prototype._findTaskPosition = function (creep) {
        var allTasks = TickCache_1.__find(creep.room, FIND_MY_CREEPS, {
            filter: function (c) { return !_.isUndefined(c.memory['taskPos']) && (c.memory['taskPos'] != null); }
        })
            .map(function (c) { return c.memory['taskPos']; });
        var rampartCSite = _.first(TickCache_1.__findInRange(creep.pos, FIND_CONSTRUCTION_SITES, 3, {
            filter: function (cs) {
                return (cs.structureType == STRUCTURE_RAMPART) &&
                    !_.includes(allTasks, cs.pos.pack());
            }
        })
            .sort(function (a, b) {
            return ((a.progressTotal - a.progress) - (b.progressTotal - b.progress)) ||
                (creep.pos.getRangeTo(a) - creep.pos.getRangeTo(b));
        }));
        if (rampartCSite != null) {
            return rampartCSite.pos.pack();
        }
        var rampartToFortify = _.first(TickCache_1.__findInRange(creep.pos, FIND_STRUCTURES, 3, {
            filter: function (s) { return s.structureType == STRUCTURE_RAMPART; }
        }).sort(function (a, b) { return a.hits - b.hits; }));
        if (rampartToFortify != null) {
            return rampartToFortify.pos.pack();
        }
        return null;
    };
    DefenseRaiser.prototype._work = function (creep) {
        if (creep.carry.energy <= creep.getActiveBodyparts(WORK)) {
            delete creep.memory['taskObjectId'];
            var taskPos = this._findTaskPosition(creep);
            if (taskPos == null) {
                return this._idle(creep);
            }
            creep.memory['taskPos'] = taskPos;
            creep.memory['workPosition'] = this._getMyInitialPosition(creep).pack();
            var links = this._getCachedObjects(creep, 'myLinksIds', this._findMyLinks, true);
            var myLink = _.first(links.sort(function (a, b) { return b.energy - a.energy; }));
            creep.withdraw(myLink, RESOURCE_ENERGY);
        }
        return (creep.carry.energy > 0) ? _super.prototype._work.call(this, creep) : true;
    };
    return DefenseRaiser;
}(BaseWorker_1.BaseWorker));
exports.default = DefenseRaiser;


/***/ }),
/* 236 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Nomad_1 = __webpack_require__(31);
var Settler = (function (_super) {
    __extends(Settler, _super);
    function Settler() {
        var _this = _super.call(this) || this;
        _this._myInitialPositionRange = 1;
        _this[1] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_ZYNTHIUM_ALKALIDE); };
        _this[2] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_GHODIUM_ACID); };
        _this[3] = function (c) { return _this._boost(c, RESOURCE_CATALYZED_KEANIUM_ACID); };
        _this[4] = _this._charge;
        _this[5] = _this._travelToAssignment;
        _this[6] = _this._charge;
        _this[7] = _this._work;
        _this[8] = _this._chargeExtensions;
        return _this;
    }
    Settler.prototype._storageLimit = function () {
        return 1000;
    };
    Settler.prototype._findTaskPosition = function (creep) {
        var currentEnergySource = Game.getObjectById(creep.memory['energyStorageId']);
        var struct = this._findChargeStructure(creep);
        if (struct != null) {
            creep.memory['extId'] = struct.id;
            this._setState(creep, 8);
            return struct.pos.pack();
        }
        if ((currentEnergySource != null) && (currentEnergySource instanceof Resource) && !_.isUndefined(creep.room.storage) && creep.room.storage.my) {
            creep.memory['extId'] = creep.room.storage.id;
            this._setState(creep, 8);
            return creep.room.storage.pos.pack();
        }
        return creep.room.controller.pos.pack();
    };
    Settler.prototype._findMySource = function (creep) {
        var sources = creep.room.find(FIND_SOURCES);
        var creeps = creep.room.find(FIND_MY_CREEPS);
        var unoccupiedSource = _.find(sources, function (s) { return !_.some(creeps, function (c) { return s.id == c.memory['mySourceId']; }); });
        if (unoccupiedSource) {
            return unoccupiedSource;
        }
        return _.min(sources, function (s) { return _.max(_.filter(creeps, function (c) { return s.id == c.memory['mySourceId']; }), function (c) { return c.ticksToLive; }); });
    };
    Settler.prototype._charge = function (creep) {
        var myPosition = this._getMyInitialPosition(creep);
        if (myPosition &&
            (myPosition.roomName == creep.pos.roomName) &&
            !creep.memory['mySourceId']) {
            var mySource = this._findMySource(creep);
            if (mySource) {
                creep.memory['mySourceId'] = mySource.id;
            }
        }
        return _super.prototype._charge.call(this, creep);
    };
    return Settler;
}(Nomad_1.default));
exports.default = Settler;


/***/ }),
/* 237 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Nomad_1 = __webpack_require__(31);
var TickCache_1 = __webpack_require__(1);
var energyStartLevels = [0, 0, 0, 0, 5000, 10000, 20000, 50000, 100000];
var StartWorker = (function (_super) {
    __extends(StartWorker, _super);
    function StartWorker() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._findEnergySource = function (creep) {
            var res = creep.pos.findClosestByPath(FIND_DROPPED_RESOURCES, { filter: function (r) { return (r.resourceType == RESOURCE_ENERGY) && (r.amount >= 100); } });
            if (res != null) {
                return res;
            }
            if ((creep.room.terminal != null) && creep.room.memory['emptyTerminal']) {
                return creep.room.terminal;
            }
            if (!_.isUndefined(creep.room.storage) && (creep.room.storage.store[RESOURCE_ENERGY] > (creep.carryCapacity + energyStartLevels[creep.room.controller.level]))) {
                var structs = TickCache_1.__find(creep.room, FIND_STRUCTURES, {
                    filter: function (s) {
                        return _.includes([STRUCTURE_CONTAINER, STRUCTURE_TERMINAL], s.structureType) && (s.store.energy >= (creep.carryCapacity - _.sum(creep.carry))) ||
                            ((s.structureType == STRUCTURE_STORAGE) && ((s.store[RESOURCE_ENERGY] > (creep.carryCapacity + energyStartLevels[creep.room.controller.level])) || !s.my)) ||
                            ((s.structureType == STRUCTURE_LINK) && (s.energy >= (creep.carryCapacity - _.sum(creep.carry))));
                    }
                });
                if (_.some(structs)) {
                    return creep.pos.findClosestByPath(structs, {
                        ignoreCreeps: true
                    });
                }
            }
            var counts = {};
            _.forEach(creep.room.find(FIND_MY_CREEPS), function (creep) {
                if (!_.isUndefined(creep.memory['energyStorageId'])) {
                    counts[creep.memory['energyStorageId']] = 1 + (counts[creep.memory['energyStorageId']] || 0);
                }
            });
            var sources = TickCache_1.__find(creep.room, FIND_SOURCES)
                .sort(function (a, b) { return ((counts[a.id] || 0) - (counts[b.id]) || 0) || (b.energy - a.energy) || (a.ticksToRegeneration - b.ticksToRegeneration); });
            var source = _.first(sources);
            if ((source.energy == 0) && (creep.carry[RESOURCE_ENERGY] > 0)) {
                creep.memory['state'] = 1 + creep.memory['state'];
            }
            return source;
        };
        return _this;
    }
    StartWorker.prototype._findTaskPosition = function (creep) {
        var struct = this._findChargeStructure(creep);
        if (struct != null) {
            creep.memory['extId'] = struct.id;
            this._setState(creep, 4);
            return null;
        }
        return _super.prototype._findTaskPosition.call(this, creep) || creep.room.controller.pos.pack();
    };
    StartWorker.prototype._findChargeStructure = function (creep) {
        if (!_.isUndefined(creep.room.storage) && (creep.room.storage.store[RESOURCE_ENERGY] < energyStartLevels[creep.room.controller.level])) {
            return creep.room.storage;
        }
        var exts = creep.room.find(FIND_MY_STRUCTURES, {
            filter: function (s) {
                return (s.structureType == STRUCTURE_TOWER) &&
                    ((s.energy == 0) ||
                        ((s.energyCapacity - s.energy) > creep.carry[RESOURCE_ENERGY]));
            }
        });
        if (!_.some(exts)) {
            exts =
                creep.room.find(FIND_MY_STRUCTURES, {
                    filter: function (s) {
                        return (s.structureType == STRUCTURE_EXTENSION) &&
                            (s.energy < s.energyCapacity);
                    }
                });
        }
        if (!_.some(exts)) {
            exts =
                creep.room.find(FIND_MY_SPAWNS, {
                    filter: function (s) {
                        return (s.energy < s.energyCapacity);
                    }
                });
        }
        if (!_.some(exts)) {
            return null;
        }
        return creep.pos.findClosestByPath(exts);
    };
    return StartWorker;
}(Nomad_1.default));
exports.default = StartWorker;


/***/ }),
/* 238 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function SetupChargers(setups) {
    setups['lesserStationaryCharger'] = 'lesserStationaryCharger/4c1m';
    setups['stationaryCharger'] = 'stationaryCharger/8c1m';
    setups['greaterStationaryCharger'] = 'stationaryCharger/24c1m';
    setups['mobileCharger'] = 'mobileCharger/8c4m';
    setups['circularCharger'] = 'circularCharger/8c4m';
    setups['l8circularCharger'] = 'circularCharger/16c8m';
}
exports.SetupChargers = SetupChargers;


/***/ }),
/* 239 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function SetupFighters(setups) {
    setups['weakInvadersHunter'] = 'invadersHunter/11m10r1h';
    setups['invadersHunter'] = 'invadersHunter/16m30r1h';
    setups['unboostedMelee'] = 'unboostedMelee/25a25m';
    setups['remoteMelee'] = 'remoteMelee/40aA310mM3';
    setups['nanoMelee'] = 'unboostedMelee/1a1m';
    setups['nanoDismantler'] = 'dismantler/1w1m';
    setups['nanoRanger'] = 'unboostedRanger/1r1m';
    setups['nanoSuppressor'] = 'suppressor/2m1r1h';
    setups['dismantler'] = 'dismantler/25w25m';
    setups['unboostedRanger'] = 'unboostedRanger/25m20r5h';
    setups['unboostedHealer'] = 'unboostedHealer/25h25m';
    setups['suppressor'] = 'suppressor/25m15r10h';
    setups['portalBlocker'] = 'portalBlocker/25m15r10h';
    setups['boostedSuppressor'] = 'boostedSuppressor/15mM120rR110hH1';
    setups['heavySuppressor'] = 'heavySuppressor/5tT325rR310hH310mM3';
    setups['tSuppressor'] = 'boostedSuppressor/11tT36rR323hH310mM3';
    setups['blocker'] = 'assaultMelee/5tT330aA3/5hH310mM3';
    setups['unboostedDefender'] = 'assaultMelee/33a17m';
    setups['boostedDefender'] = 'assaultMelee/44aA36mM3';
    setups['dMelee'] = 'assaultMelee/6tT334aA310mM3';
    setups['dRanger'] = 'assaultRanger/6tT319rR315hH310mM3';
    setups['dDismantler'] = 'assaultDismantler/6tT334wD310mM3';
    setups['drainer'] = 'assaultRanger/11tT36rR323hH310mM3';
    setups['saboteur'] = 'saboteur/10tT36rR34cC320hH310mM3';
    setups['assaultMelee'] = 'assaultMelee/11tT316aA310hH310mM3';
    setups['assaultRanger'] = 'assaultRanger/11tT315rR314hH310mM3';
    setups['assaultDismantler'] = 'assaultDismantler/11tT316wD313hH310mM3';
    setups['assaultHealer'] = 'assaultHealer/11tT329hH310mM3';
    setups['l7Ranger'] = 'assaultRanger/10tT315rR311hH39mM3';
    setups['squadMelee'] = 'assaultMelee/10tT330aA310mM3';
    setups['squadRanger'] = 'assaultRanger/10tT330rR310mM3';
    setups['squadDismantler'] = 'assaultDismantler/10tT330wD310mM3';
    setups['tRanger'] = 'assaultRanger/15tT312rR313hH310mM3';
    setups['tHealer'] = 'assaultHealer/15tT325hH310mM3';
    setups['tDismantler'] = 'assaultDismantler/15tT325wD310mM3';
    setups['tMelee'] = 'assaultMelee/15tT325aA310mM3';
    setups['boostedDismantler'] = 'boostedDismantler/40wD310mM3';
    setups['boostedMelee'] = 'boostedMelee/40aA310mM3';
}
exports.SetupFighters = SetupFighters;


/***/ }),
/* 240 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function SetupLeechers(setups) {
    setups['leecher'] = 'leecher/6w1c3m';
    setups['armedCentralLeecher'] = 'armedCentralLeecher/10w2c14m10r8h';
    setups['mineralLeecher'] = 'mineralLeecher/30w5c15m';
    setups['remoteMineralLeecher'] = 'mineralLeecher/20w10c20m';
}
exports.SetupLeechers = SetupLeechers;


/***/ }),
/* 241 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function SetupOthers(setups) {
    setups['scout'] = 'scout/1m';
    setups['signer'] = 'signer/1m';
    setups['pfMelee'] = 'pfMelee/20aA220m';
    setups['pfHealer'] = 'pfHealer/25hH225m';
    setups['suicideHealer'] = 'suicideHealer/25h25m';
    setups['waster'] = 'waster/40c1m';
    setups['locomotive'] = 'locomotive/50m';
    setups['stationaryHarras'] = 'stationaryHarras/15w5c20m';
    setups['degrader'] = 'degrader/19k19m';
    setups['roomCleaner'] = 'roomCleaner/1k1m';
    setups['roomLocker'] = 'roomLocker/1k5c15w21m';
    setups['boostedDegrader'] = 'boostedDegrader/10tT320hH310k10mM3';
    setups['remoteHelper'] = 'remoteHelper/25c25m';
    setups['greaterRemoteHelper'] = 'greaterRemoteHelper/40cC310mM3';
}
exports.SetupOthers = SetupOthers;


/***/ }),
/* 242 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function SetupReservers(setups) {
    setups['claimer'] = 'claimer/1k5m';
}
exports.SetupReservers = SetupReservers;


/***/ }),
/* 243 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function SetupTransports(setups) {
    setups['looter'] = 'looter/25c25m';
    setups['greaterLooter'] = 'greaterLooter/40cC310mM3';
    setups['suicideTransport'] = 'suicideTransport/24c24m';
    setups['greaterSuicideTransport'] = 'greaterSuicideTransport/40cC310mM3';
}
exports.SetupTransports = SetupTransports;


/***/ }),
/* 244 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function SetupUpgraders(setups) {
    setups['praiser'] = 'praiser/15w5c8m';
    setups['weakPraiser'] = 'praiser/1w1c1m';
    setups['stationaryUpgrader'] = 'praiser/10w1c5m';
    setups['l5Upgrader'] = 'praiser/14w1c7m';
    setups['doubleStationaryUpgrader'] = 'praiser/20wU31c5m';
    setups['tripleStationaryUpgrader'] = 'praiser/30wU32c15m';
    setups['quadStationaryUpgrader'] = 'praiser/40wU32c8m';
}
exports.SetupUpgraders = SetupUpgraders;


/***/ }),
/* 245 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function SetupWorkers(setups) {
    setups['startWorker'] = 'startWorker/1w1c2m';
    setups['l2Starter'] = 'startWorker/2w1c3m';
    setups['l3Starter'] = 'startWorker/3w3c6m';
    setups['topStarter'] = 'startWorker/15w15c15m';
    setups['worker'] = 'worker/15w15c15m';
    setups['boostedWorker'] = 'boostedWorker/40wB34cC36mM3';
    setups['nomad'] = 'nomad/10w10c20m';
    setups['recoverer'] = 'nomad/1w24c25m';
    setups['defenseRaiser'] = 'defenseRaiser/40wB34cC36mM3';
    setups['settler'] = 'settler/25wU315cC310mM3';
    setups['nearSettler'] = 'settler/35wU35cC310mM3';
    setups['boostedNomad'] = 'boostedNomad/30wB310cC310mM3';
    setups['spawnBuilder'] = 'boostedNomad/2wB338cC310mM3';
    setups['backdoorBuilder'] = 'backdoorBuilder/24w1c25m';
    setups['greaterBackdoorBuilder'] = 'greaterBackdoorBuilder/36wB34c10mM3';
    setups['tempBuilder'] = 'tempBuilder/15w15c15m';
}
exports.SetupWorkers = SetupWorkers;


/***/ }),
/* 246 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Traveler_1 = __webpack_require__(16);
var FighterBase_1 = __webpack_require__(13);
var BehaviorBase_1 = __webpack_require__(2);
var Role_Base_1 = __webpack_require__(4);
var Spawn_1 = __webpack_require__(3);
var TickCache_1 = __webpack_require__(1);
var CostMatrixType_1 = __webpack_require__(0);
var carryPerPart = 150;
function createPairPowerCarrierSetup(powerAmount) {
    var totalCarryParts = Math.ceil(powerAmount / carryPerPart);
    var carryParts = Math.ceil(totalCarryParts / 2);
    var moveParts = Math.ceil(carryParts / 3);
    return "pCarrier/" + carryParts + "cC2" + moveParts + "mM2";
}
var PowerFarmerBase = (function (_super) {
    __extends(PowerFarmerBase, _super);
    function PowerFarmerBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PowerFarmerBase.prototype._getMyDismantleBoostMultiplier = function () {
        return 1;
    };
    PowerFarmerBase.prototype._travelToPower = function (creep) {
        var pos = Role_Base_1.RoleBase._getMyAssignmentPosition(creep);
        if (creep.pos.isNearTo(pos)) {
            this._nextState(creep);
            return true;
        }
        return this._moveInRaidToFlag(creep, CostMatrixType_1.CostMatrixType.Military, 1) ||
            this._moveToFlag(creep, 1, CostMatrixType_1.CostMatrixType.Military);
    };
    PowerFarmerBase.prototype._travelHome = function (creep) {
        if (this._moveInRaid(creep, this._getHomeRoomTerminalPosition(creep), { costMatrixType: CostMatrixType_1.CostMatrixType.Military })) {
            return true;
        }
        BehaviorBase_1.default.GoToPosition(creep, this._getHomeRoomTerminalPosition(creep), { range: 1, costMatrixType: CostMatrixType_1.CostMatrixType.FullSpeed });
        return true;
    };
    PowerFarmerBase.prototype._findPowerBank = function (creep) {
        return _.first(TickCache_1.__findInRange(creep.pos, FIND_STRUCTURES, 1, {
            filter: function (s) { return s.structureType == STRUCTURE_POWER_BANK; }
        }));
    };
    PowerFarmerBase.prototype._getHomeRoomTerminalPosition = function (creep) {
        return this._getHomeRoom(creep).terminal.pos;
    };
    return PowerFarmerBase;
}(FighterBase_1.default));
var PowerFarmerMelee = (function (_super) {
    __extends(PowerFarmerMelee, _super);
    function PowerFarmerMelee() {
        var _this = _super.call(this) || this;
        _this.name = 'pfMelee';
        _this[1] = function (c) { return _this._boost(c, RESOURCE_UTRIUM_ACID); };
        _this[2] = _this._disableRenew;
        _this[3] = _this._waitForHealer;
        _this[4] = _this._travelToPower;
        _this[5] = _this._waitForHealer;
        _this[6] = _this._farm;
        _this[7] = _this._travelHome;
        _this[8] = _this._recycle;
        return _this;
    }
    PowerFarmerMelee.prototype._getMyHealBoostMultiplier = function () {
        return 3;
    };
    PowerFarmerMelee.prototype._getMyAttackBoostMultiplier = function () {
        return 3;
    };
    PowerFarmerMelee.prototype._travelHome = function (creep) {
        if (creep.pos.isNearTo(this._getHomeRoomTerminalPosition(creep))) {
            this._nextState(creep);
            return false;
        }
        return _super.prototype._travelHome.call(this, creep);
    };
    PowerFarmerMelee.prototype._waitForHealer = function (creep) {
        var myHealer = this._findMyHealer(creep);
        if (myHealer == null) {
            creep.say('🚬', true);
            return true;
        }
        creep.say('🤝', true);
        myHealer.say('🤝', true);
        this._nextState(creep);
        return true;
    };
    PowerFarmerMelee.prototype._farm = function (creep) {
        if (creep.hits < 2000) {
            creep.say('🚬', true);
            return true;
        }
        if (_.isUndefined(creep.memory.farmStartedAt)) {
            creep.memory.farmStartedAt = Game.time;
            creep.memory.travelTime = creep.memory.farmStartedAt - creep.memory.spawnedAt;
        }
        if (this._callTransport(creep)) {
            this._callSecondTransport(creep);
        }
        var powerBank = this._getCachedObject(creep, 'powerBankId', this._findPowerBank);
        if (powerBank != null) {
            creep.attack(powerBank);
            this._drawAttackStructureVisuals(creep, powerBank, creep.getActiveBodyparts(ATTACK));
        }
        else {
            creep.say('✌', true);
            this._nextState(creep);
            this._setState(this._findMyHealer(creep), 5);
        }
        return true;
    };
    PowerFarmerMelee.prototype._callTransport = function (creep) {
        if (!_.isUndefined(creep.memory['transportCalled'])) {
            creep.say('🚛', true);
            return true;
        }
        var powerBank = this._getCachedObject(creep, 'powerBankId', this._findPowerBank);
        var myTravelTime = creep.memory['travelTime'];
        if (this._getTicksToDestroy(powerBank, creep.getActiveBodyparts(ATTACK)) <= (myTravelTime + 100)) {
            creep.say('🚚', true);
            var name = Spawn_1.addToSpawnQueueBySetup(this._getHomeRoom(creep).name, createPairPowerCarrierSetup(powerBank.power), Spawn_1.getAssignmentByName(creep.name), 1);
            if (name) {
                this._process.processInfo.args.push(name);
                creep.memory['transportCalled'] = true;
                return true;
            }
        }
        return false;
    };
    PowerFarmerMelee.prototype._callSecondTransport = function (creep) {
        if (!_.isUndefined(creep.memory['transport2Called'])) {
            creep.say('🚛🚛', true);
            return true;
        }
        var powerBank = this._getCachedObject(creep, 'powerBankId', this._findPowerBank);
        var myTravelTime = creep.memory['travelTime'];
        if (this._getTicksToDestroy(powerBank, creep.getActiveBodyparts(ATTACK)) <= (myTravelTime + 50)) {
            creep.say('🚛🚚', true);
            var name = Spawn_1.addToSpawnQueueBySetup(this._getHomeRoom(creep).name, createPairPowerCarrierSetup(powerBank.power), Spawn_1.getAssignmentByName(creep.name), 1);
            if (name) {
                this._process.processInfo.args.push(name);
                creep.memory['transport2Called'] = true;
                return true;
            }
        }
        return false;
    };
    PowerFarmerMelee.prototype._findMyHealer = function (creep) {
        return _.first(TickCache_1.__findInRange(creep.pos, FIND_MY_CREEPS, 1, {
            filter: function (c) { return (Spawn_1.getRoleByName(c.name) == 'pfHealer') && (c.memory.state > 2); }
        }));
    };
    PowerFarmerMelee.prototype._drawAttackStructureVisuals = function (creep, struct, attackParts) {
        var structToShow = _.first(struct.pos.lookFor(LOOK_STRUCTURES).filter(function (s) { return s.structureType == STRUCTURE_RAMPART; })) || struct;
        var hits = structToShow.hits;
        var totalPower = ATTACK_POWER * attackParts * this._getMyAttackBoostMultiplier();
        var ticks = (hits - totalPower) / totalPower;
        var label = Math.floor(hits / 1000) + "k (" + Math.ceil(hits / totalPower) + " ticks)";
        var x = structToShow.pos.x + 0.5;
        var y = structToShow.pos.y - 0.5;
        var color = (ticks > creep.ticksToLive) ? '#ff8080' : '#80ff80';
        creep.room.visual.text(label, x, y, { align: 'left', size: 0.4, color: color, opacity: 0.8 });
    };
    PowerFarmerMelee.prototype._getTicksToDestroy = function (structure, attackParts) {
        var structToShow = _.first(structure.pos.lookFor(LOOK_STRUCTURES).filter(function (s) { return s.structureType == STRUCTURE_RAMPART; })) || structure;
        var hits = structToShow.hits;
        var totalPower = ATTACK_POWER * attackParts * this._getMyAttackBoostMultiplier();
        return (hits - totalPower) / totalPower;
    };
    PowerFarmerMelee.prototype._combatActions = function (creep) {
        return this._meleeAttack(creep);
    };
    return PowerFarmerMelee;
}(PowerFarmerBase));
exports.PowerFarmerMelee = PowerFarmerMelee;
var PowerFarmerHealer = (function (_super) {
    __extends(PowerFarmerHealer, _super);
    function PowerFarmerHealer() {
        var _this = _super.call(this) || this;
        _this.name = 'pfHealer';
        _this[1] = function (c) { return _this._boost(c, RESOURCE_LEMERGIUM_ALKALIDE); };
        _this[2] = _this._disableRenew;
        _this[3] = _this._travelToPower;
        _this[4] = _this._farm;
        _this[5] = _this._travelHome;
        _this[6] = _this._recycle;
        return _this;
    }
    PowerFarmerHealer.prototype._getMyHealBoostMultiplier = function () {
        return 4;
    };
    PowerFarmerHealer.prototype._travelToPower = function (creep) {
        var myFighter = null;
        if (_.isUndefined(creep.memory['myFighterId'])) {
            myFighter = _.first(_.filter(_.values(Game.creeps), function (c) { return (Spawn_1.getRoleByName(c.name) == 'pfMelee') && (Spawn_1.getAssignmentByName(c.name) == Spawn_1.getAssignmentByName(creep.name)); }));
            if (myFighter != null) {
                creep.memory['myFighterId'] = myFighter.id;
            }
        }
        else {
            myFighter = Game.getObjectById(creep.memory['myFighterId']);
        }
        if ((myFighter != null) && (creep.pos.isNearTo(myFighter.pos))) {
            creep.heal(myFighter);
        }
        return _super.prototype._travelToPower.call(this, creep);
    };
    PowerFarmerHealer.prototype._farm = function (creep) {
        var myFighter = this._getCachedObject(creep, 'myFighterId', this._findMyFighter);
        creep.heal(myFighter);
        return true;
    };
    PowerFarmerHealer.prototype._findMyFighter = function (creep) {
        return _.first(TickCache_1.__findInRange(creep.pos, FIND_MY_CREEPS, 1, {
            filter: function (c) { return Spawn_1.getRoleByName(c.name) == 'pfMelee'; }
        }));
    };
    PowerFarmerHealer.prototype._travelHome = function (creep) {
        this._healOthersNearby(creep);
        if (creep.pos.isNearTo(this._getHomeRoomTerminalPosition(creep))) {
            this._nextState(creep);
            return false;
        }
        return _super.prototype._travelHome.call(this, creep);
    };
    PowerFarmerHealer.prototype._combatActions = function (creep) {
        return this._healMySignificantDamage(creep) ||
            this._healOthersNearby(creep) ||
            this._healOthersAtDistance(creep) ||
            this._healMyMinorDamage(creep) ||
            this._overheal(creep);
    };
    return PowerFarmerHealer;
}(PowerFarmerBase));
exports.PowerFarmerHealer = PowerFarmerHealer;
var PowerCarrier = (function (_super) {
    __extends(PowerCarrier, _super);
    function PowerCarrier() {
        var _this = _super.call(this) || this;
        _this.name = 'pCarrier';
        _this[1] = function (c) { return _this._boost(c, RESOURCE_ZYNTHIUM_ALKALIDE); };
        _this[2] = function (c) { return _this._boost(c, RESOURCE_KEANIUM_ACID); };
        _this[3] = _this._travelToPower;
        _this[4] = _this._grabPower;
        _this[5] = _this._bringPowerHome;
        _this[6] = _this._recycle;
        return _this;
    }
    PowerCarrier.prototype._getMyHealBoostMultiplier = function () {
        return 1;
    };
    PowerCarrier.prototype._grabPower = function (creep) {
        var power = _.first(creep.pos.findInRange(FIND_RUINS, 10, {
            filter: function (r) { return r.structureType == STRUCTURE_POWER_BANK && !!r.store[RESOURCE_POWER]; }
        })) ||
            _.first(creep.pos.findInRange(FIND_DROPPED_RESOURCES, 10, {
                filter: function (r) { return r.resourceType == RESOURCE_POWER; }
            }));
        if (power != null) {
            if (creep.pos.isNearTo(power)) {
                if (power instanceof Resource) {
                    creep.pickup(power);
                }
                else {
                    creep.withdraw(power, RESOURCE_POWER);
                }
                this._nextState(creep);
                return false;
            }
            Traveler_1.Traveler.travelTo(creep, power);
        }
        var pos = Role_Base_1.RoleBase._getMyAssignmentPosition(creep);
        if (creep.pos.getRangeTo(pos) > 1) {
            Traveler_1.Traveler.travelTo(creep, pos);
        }
        return true;
    };
    PowerCarrier.prototype._bringPowerHome = function (creep) {
        var myRoomName = creep.memory['spawnedFromRoom'];
        var room = Game.rooms[myRoomName];
        if (creep.pos.isNearTo(room.terminal)) {
            creep.transfer(room.terminal, RESOURCE_POWER);
            this._nextState(creep);
            return false;
        }
        creep.say('✌', true);
        this._travelHome(creep);
        return true;
    };
    PowerCarrier.prototype._travelToPower = function (creep) {
        var pos = Role_Base_1.RoleBase._getMyAssignmentPosition(creep);
        if (creep.pos.getRangeTo(pos) <= 4) {
            this._nextState(creep);
            return false;
        }
        return this._moveInRaidToFlag(creep, CostMatrixType_1.CostMatrixType.Military, 0) ||
            this._moveToFlag(creep, 0, CostMatrixType_1.CostMatrixType.Military);
    };
    PowerCarrier.prototype._combatActions = function (creep) {
        return this._overheal(creep);
    };
    return PowerCarrier;
}(PowerFarmerBase));
exports.PowerCarrier = PowerCarrier;


/***/ }),
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var DistanceMatrix = (function () {
    function DistanceMatrix() {
        this._numbers = Array(2500);
    }
    DistanceMatrix.prototype.getDistance = function (x, y) {
        return this._numbers[50 * x + y];
    };
    DistanceMatrix.prototype.setDistance = function (x, y, distance) {
        this._numbers[50 * x + y] = distance;
    };
    return DistanceMatrix;
}());
exports.default = DistanceMatrix;


/***/ }),
/* 248 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var PathUtils_1 = __webpack_require__(19);
var Config_1 = __webpack_require__(8);
var defaultExpire = 1000;
var INFO_CONTROLLER = 1;
var INFO_MINERAL = 2;
var INFO_SOURCE = 3;
var INFO_LAIR = 4;
var INFO_OBSTACLE = 5;
var INFO_ROAD = 6;
var INFO_PORTAL = 7;
var RoomData = (function () {
    function RoomData(data, roomName) {
        this.SourcesPositions = [];
        this.LairsPositions = [];
        this.ObstaclesPositions = [];
        this.RoadsPositions = [];
        this.PortalsPositions = [];
        if (data instanceof Room) {
            this.Expire = Game.time + defaultExpire;
            this.ControllerPosition = data.controller == null ? null : data.controller.pos;
            var mineral = _.first(data.find(FIND_MINERALS));
            this.MineralPosition = mineral == null ? null : mineral.pos;
            this.SourcesPositions = data.find(FIND_SOURCES).map(function (s) { return s.pos; });
            this.LairsPositions =
                data.find(FIND_STRUCTURES, { filter: function (s) { return s.structureType == STRUCTURE_KEEPER_LAIR; } })
                    .map(function (l) { return l.pos; });
            var structures = data.find(FIND_STRUCTURES, { filter: function (s) { return !PathUtils_1.structureIsWalkable(s); } })
                .map(function (l) { return l.pos; });
            var constructionSites = data.find(FIND_MY_CONSTRUCTION_SITES, { filter: function (s) { return !PathUtils_1.structureIsWalkable(s); } })
                .map(function (l) { return l.pos; }).concat(data.find(FIND_CONSTRUCTION_SITES, {
                filter: function (s) { return _.includes(Config_1.alliedPlayers, s.owner.username); }
            })
                .map(function (l) { return l.pos; }));
            this.ObstaclesPositions = structures.concat(constructionSites);
            this.RoadsPositions =
                data.find(FIND_STRUCTURES, { filter: function (s) { return s.structureType == STRUCTURE_ROAD; } })
                    .map(function (l) { return l.pos; });
            this.PortalsPositions =
                data.find(FIND_STRUCTURES, { filter: function (s) { return s.structureType == STRUCTURE_PORTAL; } })
                    .map(function (l) { return l.pos; });
        }
        else {
            this.Expire = data.e;
            for (var i = 0; i < data.d.length; i++) {
                var sym = data.d[i];
                var options = { extData: 0 };
                var p = RoomPosition.unpackLocal(sym, roomName, options);
                if (p == null) {
                    console.log("Unable to local-unpack symbol " + sym + " for room " + roomName);
                    return;
                }
                switch (options.extData) {
                    case INFO_CONTROLLER:
                        this.ControllerPosition = p;
                        break;
                    case INFO_MINERAL:
                        this.MineralPosition = p;
                        break;
                    case INFO_SOURCE:
                        this.SourcesPositions.push(p);
                        break;
                    case INFO_LAIR:
                        this.LairsPositions.push(p);
                        break;
                    case INFO_OBSTACLE:
                        this.ObstaclesPositions.push(p);
                        break;
                    case INFO_ROAD:
                        this.RoadsPositions.push(p);
                        break;
                    case INFO_PORTAL:
                        this.PortalsPositions.push(p);
                        break;
                    default:
                        console.log("Unknown extended info type " + options.extData + " unpacked for " + p + " (sym " + sym + " at " + i + ", code " + sym.codePointAt(0));
                        return;
                }
            }
        }
    }
    RoomData.prototype.Serialize = function () {
        return {
            v: 1,
            e: this.Expire,
            d: this.Pack(),
        };
    };
    RoomData.prototype.Pack = function () {
        var result = '';
        if (this.ControllerPosition != null) {
            result += this.ControllerPosition.packLocal(INFO_CONTROLLER);
        }
        if (this.MineralPosition != null) {
            result += this.MineralPosition.packLocal(INFO_MINERAL);
        }
        for (var _i = 0, _a = this.SourcesPositions; _i < _a.length; _i++) {
            var p = _a[_i];
            result += p.packLocal(INFO_SOURCE);
        }
        for (var _b = 0, _c = this.LairsPositions; _b < _c.length; _b++) {
            var p = _c[_b];
            result += p.packLocal(INFO_LAIR);
        }
        for (var _d = 0, _e = this.ObstaclesPositions; _d < _e.length; _d++) {
            var p = _e[_d];
            result += p.packLocal(INFO_OBSTACLE);
        }
        for (var _f = 0, _g = this.RoadsPositions; _f < _g.length; _f++) {
            var p = _g[_f];
            result += p.packLocal(INFO_ROAD);
        }
        for (var _h = 0, _j = this.PortalsPositions; _h < _j.length; _h++) {
            var p = _j[_h];
            result += p.packLocal(INFO_PORTAL);
        }
        return result;
    };
    return RoomData;
}());
exports.RoomData = RoomData;


/***/ }),
/* 249 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var DistanceMatrix_1 = __webpack_require__(247);
var RoomUtils = (function () {
    function RoomUtils() {
    }
    RoomUtils.GetDistanceMatrix = function (sources, matrix) {
        var startCpu = Game.cpu.getUsed();
        var currentPoints = sources.map(function (p) { return 50 * p.x + p.y; });
        var result = new DistanceMatrix_1.default();
        sources.forEach(function (source) { result.setDistance(source.x, source.y, 0); });
        var _loop_1 = function () {
            var nextPoints = [];
            currentPoints.forEach(function (point) {
                var x = point / 50 | 0, y = point % 50;
                var currentDistance = result._numbers[point];
                for (var xx = x - 1; xx <= x + 1; xx++) {
                    for (var yy = y - 1; yy <= y + 1; yy++) {
                        if (xx < 0 || yy < 0 || xx > 49 || yy > 49) {
                            continue;
                        }
                        var cost = matrix.get(xx, yy);
                        if (cost >= 0xff) {
                            continue;
                        }
                        var knownDistance = result.getDistance(xx, yy);
                        if (_.isUndefined(knownDistance) || (knownDistance > (currentDistance + cost))) {
                            var p = 50 * xx + yy;
                            result._numbers[p] = currentDistance + cost;
                            nextPoints.push(p);
                        }
                    }
                }
            });
            currentPoints = nextPoints;
        };
        while (_.some(currentPoints)) {
            _loop_1();
        }
        ;
        console.log("Distance matrix build in " + (Game.cpu.getUsed() - startCpu) + "ms");
        return result;
    };
    return RoomUtils;
}());
exports.default = RoomUtils;


/***/ }),
/* 250 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var AnalyzeState;
(function (AnalyzeState) {
    AnalyzeState["Initialize"] = "init";
    AnalyzeState["BuildRoutes"] = "routes";
    AnalyzeState["Clustering"] = "clustering";
    AnalyzeState["Done"] = "done";
})(AnalyzeState = exports.AnalyzeState || (exports.AnalyzeState = {}));


/***/ }),
/* 251 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ZoningRoomStatus;
(function (ZoningRoomStatus) {
    ZoningRoomStatus["Used"] = "used";
    ZoningRoomStatus["Route"] = "route";
    ZoningRoomStatus["Deadend"] = "deadend";
    ZoningRoomStatus["Mustache"] = "mustache";
})(ZoningRoomStatus = exports.ZoningRoomStatus || (exports.ZoningRoomStatus = {}));


/***/ }),
/* 252 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Process_1 = __webpack_require__(5);
var ZoningRoomInformationProvider_1 = __webpack_require__(90);
var AnalyzeState_1 = __webpack_require__(250);
var ZoningRoomStatus_1 = __webpack_require__(251);
var roomNameRegex = /^([WE])(\d+)([NS])(\d+)$/;
var ZoneVisualizer = (function (_super) {
    __extends(ZoneVisualizer, _super);
    function ZoneVisualizer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(ZoneVisualizer.prototype, "name", {
        get: function () {
            return "/usr/sbin/zone-visualizer";
        },
        enumerable: true,
        configurable: true
    });
    ZoneVisualizer.prototype.tick = function () {
        if (this.sectorCenter == null) {
            return;
        }
        this.drawRect();
        var data = this.sectorData;
        switch (data.analyzeStatus) {
            case AnalyzeState_1.AnalyzeState.Initialize:
                this.Initialize();
                this.paintUsed();
                break;
            case AnalyzeState_1.AnalyzeState.BuildRoutes:
                this.paintUsed();
                this.BuildRoutes();
                break;
            case AnalyzeState_1.AnalyzeState.Clustering:
                this.Clustering();
                break;
            case AnalyzeState_1.AnalyzeState.Done:
                this.Done();
                break;
            default:
                console.log("Unknown status");
                return;
        }
        this.drawNaturalWalls();
        this.drawLevels();
    };
    ZoneVisualizer.prototype.Initialize = function () {
        var rooms = this.allRooms;
        this.sectorData.rooms = _.keys(rooms);
        for (var _i = 0, _a = this.sectorData.rooms; _i < _a.length; _i++) {
            var room = _a[_i];
            var roomInfo = ZoningRoomInformationProvider_1.default.GetRoomInfo(room);
            if ((roomInfo != null) &&
                !_.isUndefined(roomInfo.level) &&
                ((roomInfo.level != null) || roomInfo.harvesting)) {
                this.sectorData.roomsStatus[room] = {
                    name: room,
                    status: ZoningRoomStatus_1.ZoningRoomStatus.Used
                };
            }
        }
        this.sectorData.analyzeStatus = AnalyzeState_1.AnalyzeState.BuildRoutes;
    };
    ZoneVisualizer.prototype.BuildRoutes = function () {
        var _this = this;
        var usedRooms = _.filter(_.keys(this.sectorData.roomsStatus), function (r) { return (_this.sectorData.roomsStatus[r].status == ZoningRoomStatus_1.ZoningRoomStatus.Used) && _.isUndefined(_this.sectorData.routes[r]); });
        if (!_.some(usedRooms)) {
            this.sectorData.analyzeStatus = AnalyzeState_1.AnalyzeState.Clustering;
            return;
        }
        var currentlyRoutedRoom = _.last(usedRooms.sort(function (a, b) { return Game.map.getRoomLinearDistance(a, _this.sectorCenter) - Game.map.getRoomLinearDistance(b, _this.sectorCenter); }));
        console.log("About routing " + currentlyRoutedRoom);
    };
    ZoneVisualizer.prototype.Clustering = function () {
    };
    ZoneVisualizer.prototype.Done = function () {
        console.log("Analyzing of " + this.sectorCenter + " completed");
    };
    Object.defineProperty(ZoneVisualizer.prototype, "zoneFlag", {
        get: function () {
            return Game.flags[this.processInfo.args[0]];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ZoneVisualizer.prototype, "sectorData", {
        get: function () {
            if (_.isUndefined(this.memory['sectorData'])) {
                var newData = {
                    analyzeStatus: AnalyzeState_1.AnalyzeState.Initialize,
                    rooms: [],
                    routes: {},
                    roomsStatus: {},
                    clusters: {}
                };
                this.memory['sectorData'] = newData;
                return newData;
            }
            return this.memory['sectorData'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ZoneVisualizer.prototype, "sectorCenter", {
        get: function () {
            if (this.zoneFlag == null) {
                return null;
            }
            var parseResult = roomNameRegex.exec(this.zoneFlag.pos.roomName);
            if (!parseResult) {
                throw new Error("Malformed roomName: " + this.zoneFlag.pos.roomName + " in RoomPosition: " + JSON.stringify(this));
            }
            var str = parseResult[0], WE = parseResult[1], longitude = parseResult[2], NS = parseResult[3], latitude = parseResult[4];
            if (_.isUndefined(str)) {
                throw new Error("Regexp undefined in ZoneVisualizer: " + this.id);
            }
            var cLongitude = 5 + 10 * Math.floor(parseInt(longitude) / 10);
            var cLatitude = 5 + 10 * Math.floor(parseInt(latitude) / 10);
            var currentCenter = "" + WE + cLongitude + NS + cLatitude;
            if (!_.isUndefined(this.memory['sector']) && (this.memory['sector'] != currentCenter)) {
                console.log("Resetting zoning from " + this.memory['sector'] + " to " + currentCenter);
                for (var p in this.memory) {
                    delete this.memory[p];
                }
            }
            this.memory['sector'] = currentCenter;
            return currentCenter;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ZoneVisualizer.prototype, "allRooms", {
        get: function () {
            var parseResult = roomNameRegex.exec(this.sectorCenter);
            if (!parseResult) {
                throw new Error("Malformed roomName: " + this.zoneFlag.pos.roomName + " in RoomPosition: " + JSON.stringify(this));
            }
            var str = parseResult[0], WE = parseResult[1], longitude = parseResult[2], NS = parseResult[3], latitude = parseResult[4];
            if (_.isUndefined(str)) {
                throw new Error("Regexp undefined in ZoneVisualizer: " + this.id);
            }
            var centerLong = parseInt(longitude);
            var centerLat = parseInt(latitude);
            var result = {};
            for (var we = -5; we <= 5; we++) {
                for (var ns = -5; ns <= 5; ns++) {
                    var roomName = "" + WE + (centerLong + we) + NS + (centerLat + ns);
                    result[roomName] = {
                        offsetWE: WE == 'W' ? we : -we,
                        offsetNS: NS == 'N' ? ns : -ns
                    };
                }
            }
            return result;
        },
        enumerable: true,
        configurable: true
    });
    ZoneVisualizer.prototype.drawRect = function () {
        var position = this.zoneFlag.pos;
        this.visual.rect(position.x - 5.5, position.y - 5.5, 11, 11, {
            fill: 'white',
            opacity: 0.9
        });
    };
    ZoneVisualizer.prototype.drawNaturalWalls = function () {
        var rooms = this.allRooms;
        var position = this.zoneFlag.pos;
        for (var room in rooms) {
            var exits = Game.map.describeExits(room);
            if (_.isUndefined(exits[TOP])) {
                this.visual.line(position.x - rooms[room].offsetWE - 0.5, position.y - rooms[room].offsetNS - 0.5, position.x - rooms[room].offsetWE + 0.5, position.y - rooms[room].offsetNS - 0.5, { width: 0.1, color: 'black' });
            }
            if (_.isUndefined(exits[BOTTOM])) {
                this.visual.line(position.x - rooms[room].offsetWE + 0.5, position.y - rooms[room].offsetNS + 0.5, position.x - rooms[room].offsetWE - 0.5, position.y - rooms[room].offsetNS + 0.5, { width: 0.1, color: 'black' });
            }
            if (_.isUndefined(exits[RIGHT])) {
                this.visual.line(position.x - rooms[room].offsetWE + 0.5, position.y - rooms[room].offsetNS + 0.5, position.x - rooms[room].offsetWE + 0.5, position.y - rooms[room].offsetNS - 0.5, { width: 0.1, color: 'black' });
            }
            if (_.isUndefined(exits[LEFT])) {
                this.visual.line(position.x - rooms[room].offsetWE - 0.5, position.y - rooms[room].offsetNS + 0.5, position.x - rooms[room].offsetWE - 0.5, position.y - rooms[room].offsetNS - 0.5, { width: 0.1, color: 'black' });
            }
        }
    };
    ZoneVisualizer.prototype.drawLevels = function () {
        var position = this.zoneFlag.pos;
        var rooms = this.allRooms;
        for (var room in rooms) {
            var roomInfo = ZoningRoomInformationProvider_1.default.GetRoomInfo(room);
            if ((roomInfo != null) && !_.isUndefined(roomInfo.level) && (roomInfo.level != null)) {
                this.visual.text(roomInfo.level.toString(), position.x - rooms[room].offsetWE, position.y - rooms[room].offsetNS, {
                    opacity: 1,
                    size: 0.4,
                    color: 'grey'
                });
            }
        }
    };
    ZoneVisualizer.prototype.paintUsed = function () {
        var position = this.zoneFlag.pos;
        var rooms = this.allRooms;
        for (var room in rooms) {
            if (!_.isUndefined(this.sectorData.roomsStatus[room]) && (this.sectorData.roomsStatus[room].status == ZoningRoomStatus_1.ZoningRoomStatus.Used)) {
                this.visual.rect(position.x - rooms[room].offsetWE - 0.5, position.y - rooms[room].offsetNS - 0.5, 1, 1, {
                    opacity: 0.9,
                    fill: '#800000'
                });
            }
        }
    };
    Object.defineProperty(ZoneVisualizer.prototype, "visual", {
        get: function () {
            var position = this.zoneFlag.pos;
            return new RoomVisual(position.roomName);
        },
        enumerable: true,
        configurable: true
    });
    return ZoneVisualizer;
}(Process_1.Process));
exports.default = ZoneVisualizer;


/***/ }),
/* 253 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ZoningRoomInformation = (function () {
    function ZoningRoomInformation() {
    }
    return ZoningRoomInformation;
}());
exports.default = ZoningRoomInformation;


/***/ }),
/* 254 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ZoningRoomStatus;
(function (ZoningRoomStatus) {
    ZoningRoomStatus["Open"] = "open";
    ZoningRoomStatus["Closed"] = "closed";
    ZoningRoomStatus["Novice"] = "novice";
    ZoningRoomStatus["Respawn"] = "respawn";
})(ZoningRoomStatus = exports.ZoningRoomStatus || (exports.ZoningRoomStatus = {}));


/***/ }),
/* 255 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(48);


/***/ })
/******/ ]);